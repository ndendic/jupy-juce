[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "üçä Jupy-Juice",
    "section": "",
    "text": "pip install git+https://github.com/ndendic/jupy-juice.git\nor\npip install jupy-juice",
    "crumbs": [
      "üçä Jupy-Juice"
    ]
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "üçä Jupy-Juice",
    "section": "",
    "text": "pip install git+https://github.com/ndendic/jupy-juice.git\nor\npip install jupy-juice",
    "crumbs": [
      "üçä Jupy-Juice"
    ]
  },
  {
    "objectID": "index.html#configuration",
    "href": "index.html#configuration",
    "title": "üçä Jupy-Juice",
    "section": "Configuration",
    "text": "Configuration\nIn your environment variables:\n\nSet PYDANTIC_AI_MODEL in your environment variables\nSet your model API key - ie. OPENAI_API_KEY\n\n\n2. Usage\nImport the jupyter_assistant.core module:\n\nfrom jupy_juice.core import *\n\nStart prompting by adding the %%prompt cell magic:\n\nHello, how are you?\n\nHello! I‚Äôm here to assist you with your tasks. How can I help you today?\n\n\njupyter_assistant.core works with default notebook_agent that has basic create_cell tool and short system_prompt.\n\nfrom IPython.display import display, Markdown\n\ndisplay(Markdown(system_prompt))\nnotebook_agent\n\nYou are a helpful assistant that operates in a Jupyter notebook. Your regular text responses are rendered as cell output. You can create new cells, edit existing cells, and run code. You can also use tools to help you with your tasks. Today‚Äôs date is 2025-01-01.\n\n\nAgent(model=OpenAIModel(model_name='gpt-4o'), name='agent', end_strategy='early', model_settings=None)\n\n\nLet‚Äôs see how you can create a custom agent and set it as current agent. Here we‚Äôll use model we set earlier and set_agent function to set it as current agent.\n\nfrom pydantic_ai import Agent\n\n# Configure with custom system prompt\ncustom_prompt = system_prompt + \"\"\"\nPlease always add emojis to your responses where possible.\nYou use joining-teacher style of speech but also try to be concise.\n\"\"\"\nmy_agent = Agent(model, system_prompt=custom_prompt)\n\n# Set as current agent\nset_agent(my_agent)\n\nAgent(model=OpenAIModel(model_name='gpt-4o'), name=None, end_strategy='early', model_settings=None)\n\n\n\nHello, what are the things you can do for me?\n\nHello! I‚Äôm here to assist you with various tasks. Here are some of the things I can do:\n\nCode Assistance: Help you write, debug, and understand code.\nNotebook Management: Create, modify, and organize Jupyter notebook cells.\nData Analysis: Assist with data manipulation, analysis, and visualization.\nExplain Concepts: Provide explanations for various programming, data science, or other technical concepts.\nTool Usage: Show you how to use libraries and tools effectively in your projects.\nResearch: Provide information on a wide range of topics or find specific details that you need.\nLearning: Assist with learning new programming languages or technologies by providing guidance, examples, and exercises.\n\nLet me know how I can assist you further!\n\n\nlast_prompt_result variable will be automatically created and will contain the result of the prompt but also some other useful information.\n\nlast_prompt_result.all_messages()\n\n[ModelRequest(parts=[UserPromptPart(content='Here is the context of new notebook cells that were added:\\nCell[1]:\\nSource:\\n## Installation\\n\\n```bash\\npip install git+https://github.com/ndendic/jupy-juice.git\\n```\\nor\\n\\n```bash\\npip install jupy-juice\\n```\\n\\nOutputs:\\nNone\\n\\nCell[2]:\\nSource:\\n## Configuration\\n\\nIn your environment variables:\\n\\n1. Set `PYDANTIC_AI_MODEL` in your environment variables\\n2. Set your model API key - ie. `OPENAI_API_KEY`\\nOutputs:\\nNone\\n\\nCell[3]:\\nSource:\\n### 2. Usage\\n\\nImport the jupyter_assistant.core module:\\n\\nOutputs:\\nNone\\n\\nCell[4]:\\nSource:\\nfrom jupy_juice.core import *\\nOutputs:\\n[{\\'ename\\': \\'ModuleNotFoundError\\', \\'evalue\\': \"No module named \\'jupyjuice\\'\", \\'output_type\\': \\'error\\', \\'traceback\\': [\\'\\\\x1b[0;31m---------------------------------------------------------------------------\\\\x1b[0m\\', \\'\\\\x1b[0;31mModuleNotFoundError\\\\x1b[0m                       Traceback (most recent call last)\\', \\'Cell \\\\x1b[0;32mIn[1], line 1\\\\x1b[0m\\\\n\\\\x1b[0;32m----&gt; 1\\\\x1b[0m \\\\x1b[38;5;28;01mfrom\\\\x1b[39;00m \\\\x1b[38;5;21;01mjupyjuice\\\\x1b[39;00m\\\\x1b[38;5;21;01m.\\\\x1b[39;00m\\\\x1b[38;5;21;01mcore\\\\x1b[39;00m \\\\x1b[38;5;28;01mimport\\\\x1b[39;00m \\\\x1b[38;5;241m*\\\\x1b[39m\\\\n\\', \"\\\\x1b[0;31mModuleNotFoundError\\\\x1b[0m: No module named \\'jupyjuice\\'\"]}]\\n\\nCell[5]:\\nSource:\\nStart prompting by adding the `%%prompt` cell magic:\\nOutputs:\\nNone', timestamp=datetime.datetime(2025, 1, 1, 18, 28, 12, 950409, tzinfo=datetime.timezone.utc), part_kind='user-prompt')], kind='request'),\n ModelResponse(parts=[TextPart(content='I understand the new notebook context. How can I help?', part_kind='text')], timestamp=datetime.datetime(2025, 1, 1, 18, 28, 12, 950489, tzinfo=datetime.timezone.utc), kind='response'),\n ModelRequest(parts=[UserPromptPart(content='Hello, how are you?', timestamp=datetime.datetime(2025, 1, 1, 18, 28, 12, 951411, tzinfo=datetime.timezone.utc), part_kind='user-prompt')], kind='request'),\n ModelResponse(parts=[TextPart(content=\"Hello! I'm here to assist you with your tasks. How can I help you today?\", part_kind='text')], timestamp=datetime.datetime(2025, 1, 1, 18, 28, 13, tzinfo=datetime.timezone.utc), kind='response'),\n ModelRequest(parts=[UserPromptPart(content='Here is the context of new notebook cells that were added:\\nCell[7]:\\nSource:\\njupyter_assistant.core works with default notebook_agent that has basic create_cell tool and short system_prompt. \\nOutputs:\\nNone\\n\\nCell[8]:\\nSource:\\nfrom IPython.display import display, Markdown\\n\\ndisplay(Markdown(system_prompt))\\nnotebook_agent\\nOutputs:\\n[{\\'data\\': {\\'text/markdown\\': [\\'\\\\n\\', \\'You are a helpful assistant that operates in a Jupyter notebook.\\\\n\\', \\'Your regular text responses are rendered as cell output.\\\\n\\', \\'You can create new cells, edit existing cells, and run code.\\\\n\\', \\'You can also use tools to help you with your tasks.\\\\n\\', \"Today\\'s date is 2024-12-31.\\\\n\"], \\'text/plain\\': [\\'&lt;IPython.core.display.Markdown object&gt;\\']}, \\'metadata\\': {}, \\'output_type\\': \\'display_data\\'}, {\\'data\\': {\\'text/plain\\': [\"Agent(model=OpenAIModel(model_name=\\'gpt-4o\\'), name=\\'agent\\', end_strategy=\\'early\\', model_settings=None)\"]}, \\'execution_count\\': None, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]\\n\\nCell[9]:\\nSource:\\nLet\\'s see how you can create a custom agent and set it as current agent.\\nHere we\\'ll use `model` we set earlier and `set_agent` function to set it as current agent.\\nOutputs:\\nNone', timestamp=datetime.datetime(2025, 1, 1, 18, 28, 13, 843879, tzinfo=datetime.timezone.utc), part_kind='user-prompt')], kind='request'),\n ModelResponse(parts=[TextPart(content='I understand the new notebook context. How can I help?', part_kind='text')], timestamp=datetime.datetime(2025, 1, 1, 18, 28, 13, 843889, tzinfo=datetime.timezone.utc), kind='response'),\n ModelRequest(parts=[UserPromptPart(content='Hello, what are the things you can do for me?', timestamp=datetime.datetime(2025, 1, 1, 18, 28, 13, 844030, tzinfo=datetime.timezone.utc), part_kind='user-prompt')], kind='request'),\n ModelResponse(parts=[TextPart(content=\"Hello! I'm here to assist you with various tasks. Here are some of the things I can do:\\n\\n1. **Code Assistance**: Help you write, debug, and understand code.\\n2. **Notebook Management**: Create, modify, and organize Jupyter notebook cells.\\n3. **Data Analysis**: Assist with data manipulation, analysis, and visualization.\\n4. **Explain Concepts**: Provide explanations for various programming, data science, or other technical concepts.\\n5. **Tool Usage**: Show you how to use libraries and tools effectively in your projects.\\n6. **Research**: Provide information on a wide range of topics or find specific details that you need.\\n7. **Learning**: Assist with learning new programming languages or technologies by providing guidance, examples, and exercises.\\n\\nLet me know how I can assist you further!\", part_kind='text')], timestamp=datetime.datetime(2025, 1, 1, 18, 28, 14, tzinfo=datetime.timezone.utc), kind='response')]\n\n\nFrom the example above, you can see that in addition to the standard system prompt, agent will also get the context that provides notebook cells created so far with the whole chat history.\nThis context provides all the cells since the notebook was opened and any cells that we created between the last prompt we run and the current prompt.\nThis is useful for creating more complex agents that can use the history of the conversation to create more accurate responses.\nNow let‚Äôs ask our agent to create us some code.\n\ncan you create me a pydantic model to store User data?\n\nI have created a Pydantic model to store User data. You can find it in the new code cell. Here it is:\nfrom pydantic import BaseModel\n\nclass User(BaseModel):\n    user_id: int\n    username: str\n    email: str\n    is_active: bool = True\n\n# Example usage:\n# user = User(user_id=1, username='john_doe', email='john@example.com')\n# print(user)\nYou can create instances of this model to store user information with fields for user_id, username, email, and an optional is_active status.\n\n\n\nfrom pydantic import BaseModel\n\nclass User(BaseModel):\n    user_id: int\n    username: str\n    email: str\n    is_active: bool = True\n\n# Example usage:\n# user = User(user_id=1, username='john_doe', email='john@example.com')\n# print(user)\n\nLet‚Äôs check the last 3 messages to see how agent utilized the tool.\n\nlast_prompt_result.all_messages()[-3:]\n\n[ModelResponse(parts=[ToolCallPart(tool_name='create_cell', args=ArgsJson(args_json='{\"content\":\"from pydantic import BaseModel\\\\n\\\\nclass User(BaseModel):\\\\n    user_id: int\\\\n    username: str\\\\n    email: str\\\\n    is_active: bool = True\\\\n\\\\n# Example usage:\\\\n# user = User(user_id=1, username=\\'john_doe\\', email=\\'john@example.com\\')\\\\n# print(user)\",\"cell_type\":\"code\"}'), tool_call_id='call_U4ayyEDdMn0tSDAlJyxY7uls', part_kind='tool-call')], timestamp=datetime.datetime(2025, 1, 1, 18, 28, 15, tzinfo=datetime.timezone.utc), kind='response'),\n ModelRequest(parts=[ToolReturnPart(tool_name='create_cell', content=\"Created new code  with content: from pydantic import BaseModel\\n\\nclass User(BaseModel):\\n    user_id: int\\n    username: str\\n    email: str\\n    is_active: bool = True\\n\\n# Example usage:\\n# user = User(user_id=1, username='john_doe', email='john@example.com')\\n# print(user)\", tool_call_id='call_U4ayyEDdMn0tSDAlJyxY7uls', timestamp=datetime.datetime(2025, 1, 1, 18, 28, 17, 304, tzinfo=datetime.timezone.utc), part_kind='tool-return')], kind='request'),\n ModelResponse(parts=[TextPart(content=\"I have created a Pydantic model to store User data. You can find it in the new code cell. Here it is:\\n\\n```python\\nfrom pydantic import BaseModel\\n\\nclass User(BaseModel):\\n    user_id: int\\n    username: str\\n    email: str\\n    is_active: bool = True\\n\\n# Example usage:\\n# user = User(user_id=1, username='john_doe', email='john@example.com')\\n# print(user)\\n```\\n\\nYou can create instances of this model to store user information with fields for `user_id`, `username`, `email`, and an optional `is_active` status.\", part_kind='text')], timestamp=datetime.datetime(2025, 1, 1, 18, 28, 17, tzinfo=datetime.timezone.utc), kind='response')]\n\n\nLet‚Äôs ask our agent to summarize our conversation so far.\n\nCan you please summarize our conversation so far?\n\nCertainly! Here‚Äôs a summary of our conversation:\n\nSetup Instructions:\n\nYou shared notebook cells with installation and configuration instructions for a package related to Jupyter.\n\nModule Import Attempts:\n\nThere was an attempt to import a module that resulted in a ModuleNotFoundError.\n\nAgent Introduction:\n\nYou provided details about a Jupyter agent and how to utilize it within the notebook.\n\nCreating Custom Agents:\n\nInformation was given on setting up a custom agent using previously configured models.\n\nCreating a Pydantic User Model:\n\nI created a Pydantic model for storing user data with fields for user ID, username, email, and active status. You also added a similar model with additional fields.\n\nReview of Messages and Tool Utilization:\n\nYou reviewed messages and saw how tools were utilized to create and retrieve information in the notebook.\n\nRequest for Summary:\n\nYou asked for a summary of our entire conversation.\n\n\nIf there‚Äôs anything specific you‚Äôd like to discuss or need further assistance with, feel free to let me know!\n\n\nIf there are certain cells that you don‚Äôt want to include in the summary, you can add the #| exclude parameter to exclude them.\n\ndef multiply_numbers(a, b):\n    return a * b\n\n\nDo we have any multiplication functions in this notebook?\n\nAs of the information from our conversation and the provided notebook context, there don‚Äôt appear to be any specific multiplication functions defined in the notebook cells. If you‚Äôd like, I can help you create a multiplication function. Would you like me to do that?\n\n\nYou can also check the usage of the last prompt.\n\nlast_prompt_result.usage()\n\nUsage(requests=1, request_tokens=4224, response_tokens=51, total_tokens=4275, details={'accepted_prediction_tokens': 0, 'audio_tokens': 0, 'reasoning_tokens': 0, 'rejected_prediction_tokens': 0, 'cached_tokens': 3968})",
    "crumbs": [
      "üçä Jupy-Juice"
    ]
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "Dependencies",
    "section": "",
    "text": "System prompt\n\nsource\n\n\n\n get_current_agent ()\n\nGet the current agent, falling back to default notebook_agent if none set.\n\n\n\n\n\n\nsource\n\n\n\n\n create_cell (ctx:pydantic_ai.tools.RunContext[str], content:str,\n              cell_type:Literal['code','markdown']='code')\n\n*Create a new cell in the notebook with the specified content.\nArgs: content: The content to put in the new cell cell_type: Type of cell to create (‚Äòcode‚Äô or ‚Äòmarkdown‚Äô)\nReturns: A confirmation message*\nAlways set custom agents to inherit base tools\n\nsource\n\n\n\n\n set_agent (agent:pydantic_ai.agent.Agent)\n\n*Set a custom agent for the notebook.\nArgs: agent: PydanticAI agent instance\nReturns: Configured agent with required tools*\nTool testing cell creation tool\n\nresult = notebook_agent.run_sync('can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?')\nMarkdown(result.data)\n\nI have created a new cell with a simple ‚ÄúHello, World!‚Äù function. You can run it to see the output.\n\n\n\ndef hello_world():\n    print(\"Hello, World!\")\n\nhello_world()\n\n\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\nMarkdown(result.data)\n\nI created a function that calculates the factorial of a number with input validation. You can test it in the new cell provided.\n\n\n\ndef factorial(n):\n    \"\"\"\n    Calculate the factorial of a non-negative integer n.\n\n    Parameters:\n    n (int): A non-negative integer whose factorial is to be computed\n\n    Returns:\n    int: Factorial of the input number n\n    \"\"\"\n    # Input validation\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    if n &lt; 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n\n    # Base case: factorial of 0 is 1\n    if n == 0:\n        return 1\n\n    # Recursive case: n! = n * (n-1)!\n    return n * factorial(n - 1)\n\nTesting agent with history\n\nresult = notebook_agent.run_sync('So what you just made for me here?', message_history=result.new_messages())\nMarkdown(result.data)\n\nI created a Python function named factorial that calculates the factorial of a non-negative integer. The function includes input validation to ensure that the input is a non-negative integer. If the input is not an integer or is negative, the function raises a ValueError with an appropriate message.\nHere‚Äôs a summary of the key parts of the code:\n\nInput Validation:\n\nChecks if n is an integer. If not, it raises a ValueError.\nChecks if n is a non-negative integer. If n is negative, it raises a ValueError.\n\nFactorial Calculation:\n\nUses an iterative approach to calculate the factorial.\nReturns 1 if n is 0 (the factorial of 0 is 1).\nUses a for-loop to compute the factorial for positive integers.\n\nExample Usage:\n\nDemonstrates the function by calculating the factorial of 5.\nIncludes a try-except block to catch and print the error message if a ValueError is raised when computing the factorial of a negative number.\n\n\nYou can execute the cell to see how it works or modify it to test with other values.\n\n\n\nresult.all_messages()\n\n[ModelRequest(parts=[SystemPromptPart(content=\"\\nYou are a helpful assistant that operates in a Jupyter notebook.\\nYour regular text responses are rendered as cell output.\\nYou can create new cells, edit existing cells, and run code.\\nYou can also use tools to help you with your tasks.\\nToday's date is 2024-12-31.\\n\", part_kind='system-prompt'), UserPromptPart(content='Create a function that calculates the factorial of a number with input validation', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 43, 700768, tzinfo=datetime.timezone.utc), part_kind='user-prompt')], kind='request'),\n ModelResponse(parts=[ToolCallPart(tool_name='create_cell', args=ArgsJson(args_json='{\"content\":\"def factorial(n):\\\\n    \\\\\"\\\\\"\\\\\"\\\\n    Calculate the factorial of a non-negative integer n.\\\\n    \\\\n    :param n: non-negative integer\\\\n    :return: factorial of n\\\\n    \\\\\"\\\\\"\\\\\"\\\\n    # Input validation\\\\n    if not isinstance(n, int):\\\\n        raise ValueError(\\\\\"Input must be an integer.\\\\\")\\\\n    if n &lt; 0:\\\\n        raise ValueError(\\\\\"Input must be a non-negative integer.\\\\\")\\\\n    \\\\n    # Base case\\\\n    if n == 0:\\\\n        return 1\\\\n    \\\\n    # Recursive case\\\\n    result = 1\\\\n    for i in range(1, n + 1):\\\\n        result *= i\\\\n    return result\\\\n\\\\n# Example usage\\\\ntry:\\\\n    print(factorial(5))  # Should print 120\\\\n    print(factorial(-1)) # Should raise a ValueError\\\\nexcept ValueError as e:\\\\n    print(e)\",\"cell_type\":\"code\"}'), tool_call_id='call_dP852a9HSFo4HgyvUTm6NtHd', part_kind='tool-call')], timestamp=datetime.datetime(2024, 12, 31, 13, 10, 44, tzinfo=datetime.timezone.utc), kind='response'),\n ModelRequest(parts=[ToolReturnPart(tool_name='create_cell', content='Created new code  with content: def factorial(n):\\n    \"\"\"\\n    Calculate the factorial of a non-negative integer n.\\n    \\n    :param n: non-negative integer\\n    :return: factorial of n\\n    \"\"\"\\n    # Input validation\\n    if not isinstance(n, int):\\n        raise ValueError(\"Input must be an integer.\")\\n    if n &lt; 0:\\n        raise ValueError(\"Input must be a non-negative integer.\")\\n    \\n    # Base case\\n    if n == 0:\\n        return 1\\n    \\n    # Recursive case\\n    result = 1\\n    for i in range(1, n + 1):\\n        result *= i\\n    return result\\n\\n# Example usage\\ntry:\\n    print(factorial(5))  # Should print 120\\n    print(factorial(-1)) # Should raise a ValueError\\nexcept ValueError as e:\\n    print(e)', tool_call_id='call_dP852a9HSFo4HgyvUTm6NtHd', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 47, 279330, tzinfo=datetime.timezone.utc), part_kind='tool-return')], kind='request'),\n ModelResponse(parts=[TextPart(content='I created a function that calculates the factorial of a number with input validation. You can test it in the new cell provided.', part_kind='text')], timestamp=datetime.datetime(2024, 12, 31, 13, 10, 48, tzinfo=datetime.timezone.utc), kind='response'),\n ModelRequest(parts=[UserPromptPart(content='So what you just made for me here?', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 48, 46240, tzinfo=datetime.timezone.utc), part_kind='user-prompt')], kind='request'),\n ModelResponse(parts=[TextPart(content=\"I created a Python function named `factorial` that calculates the factorial of a non-negative integer. The function includes input validation to ensure that the input is a non-negative integer. If the input is not an integer or is negative, the function raises a `ValueError` with an appropriate message. \\n\\nHere's a summary of the key parts of the code:\\n\\n- **Input Validation**: \\n  - Checks if `n` is an integer. If not, it raises a `ValueError`.\\n  - Checks if `n` is a non-negative integer. If `n` is negative, it raises a `ValueError`.\\n\\n- **Factorial Calculation**: \\n  - Uses an iterative approach to calculate the factorial.\\n  - Returns `1` if `n` is `0` (the factorial of 0 is 1).\\n  - Uses a for-loop to compute the factorial for positive integers.\\n\\n- **Example Usage**: \\n  - Demonstrates the function by calculating the factorial of 5.\\n  - Includes a try-except block to catch and print the error message if a `ValueError` is raised when computing the factorial of a negative number.\\n\\nYou can execute the cell to see how it works or modify it to test with other values.\", part_kind='text')], timestamp=datetime.datetime(2024, 12, 31, 13, 10, 48, tzinfo=datetime.timezone.utc), kind='response')]\n\n\n\n\n\n\nsource\n\n\n\n\n find_current_notebook ()\n\n*Find and cache the current notebook data.\nReturns: Dict containing notebook data or None if not found*\n\nsource\n\n\n\n\n get_notebook_history (max_cells:int=10)\n\n*Get the content of notebook cells between current and last prompt cell.\nArgs: max_cells: Maximum number of previous cells to include\nReturns: List of previous cell contents*\nTesting notebook history\n\nnb_hist = get_notebook_history(max_cells=20)\nnb_hist\n\n[\"Cell[7]:\\nSource:\\n#| export\\nfrom typing import cast\\nmodel = cast(KnownModelName, os.getenv('PYDANTIC_AI_MODEL', 'openai:gpt-4o'))\\nprint(f'PydanticAI is using model: {model}')\\nnotebook_agent = Agent(model, system_prompt=system_prompt)\\nOutputs:\\n[{'name': 'stdout', 'output_type': 'stream', 'text': ['PydanticAI is using model: openai:gpt-4o\\\\n']}]\",\n 'Cell[8]:\\nSource:\\n#| export\\n_current_agent: Optional[Agent] = None\\n\\ndef get_current_agent() -&gt; Agent:\\n    \"\"\"Get the current agent, falling back to default notebook_agent if none set.\"\"\"\\n    global _current_agent, notebook_agent\\n    return _current_agent or notebook_agent\\n\\nOutputs:\\n[]',\n 'Cell[9]:\\nSource:\\n## Agent tools\\nOutputs:\\nNone',\n 'Cell[10]:\\nSource:\\n### Create cell tool\\nOutputs:\\nNone',\n 'Cell[11]:\\nSource:\\n#| export\\nfrom IPython.display import display, Markdown\\nfrom typing import Literal\\n\\n@notebook_agent.tool\\ndef create_cell(ctx: RunContext[str], content: str, cell_type: Literal[\\'code\\', \\'markdown\\'] = \\'code\\') -&gt; str:\\n    \"\"\"Create a new cell in the notebook with the specified content.\\n    \\n    Args:\\n        content: The content to put in the new cell\\n        cell_type: Type of cell to create (\\'code\\' or \\'markdown\\')\\n    \\n    Returns:\\n        A confirmation message\\n    \"\"\"\\n    try:    \\n        ipython = get_ipython()\\n    except NameError:\\n        return \"Error: Not running in IPython/Jupyter environment\"\\n    \\n    # Display the content immediately\\n    if cell_type == \\'code\\':\\n        # Set up the next cell with the content\\n        ipython.set_next_input(content)\\n    else:\\n        display(Markdown(content))\\n    \\n    return f\"Created new {cell_type}  with content: {content}\"\\nOutputs:\\n[{\\'name\\': \\'stderr\\', \\'output_type\\': \\'stream\\', \\'text\\': [\\'&lt;module&gt;:8: No type or annotation for returned value 1\\\\n\\']}]',\n 'Cell[12]:\\nSource:\\nAlways set custom agents to inherit base tools\\n\\nOutputs:\\nNone',\n 'Cell[13]:\\nSource:\\n#| export\\ndef set_agent(agent: Agent) -&gt; Agent:\\n    \"\"\"Set a custom agent for the notebook.\\n    \\n    Args:\\n        agent: PydanticAI agent instance\\n        \\n    Returns:\\n        Configured agent with required tools\\n    \"\"\"\\n    global _current_agent, notebook_agent\\n        \\n    # Always ensure create_cell tool is available\\n    if \\'create_cell\\' not in agent._function_tools:\\n        # Copy the tool directly from notebook_agent\\n        agent._function_tools = notebook_agent._function_tools\\n    \\n    _current_agent = agent\\n    return agent\\nOutputs:\\n[]',\n 'Cell[14]:\\nSource:\\nTool testing cell creation tool\\nOutputs:\\nNone',\n 'Cell[15]:\\nSource:\\nresult = notebook_agent.run_sync(\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\')\\nMarkdown(result.data)\\nOutputs:\\n[{\\'data\\': {\\'text/markdown\\': [\\'I\\\\\\'ve created a new cell with a simple \"Hello, World!\" function. You can run it to see the output.\\'], \\'text/plain\\': [\\'&lt;IPython.core.display.Markdown object&gt;\\']}, \\'execution_count\\': 10, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]',\n 'Cell[16]:\\nSource:\\ndef hello_world():\\n    print(\"Hello, world!\")\\n\\nhello_world()\\nOutputs:\\n[]',\n 'Cell[17]:\\nSource:\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\nMarkdown(result.data)\\nOutputs:\\n[{\\'data\\': {\\'text/markdown\\': [\\'I have created a function to calculate the factorial of a number with input validation. You can test it by calling the `factorial` function with a non-negative integer as the argument.\\'], \\'text/plain\\': [\\'&lt;IPython.core.display.Markdown object&gt;\\']}, \\'execution_count\\': 12, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]',\n 'Cell[18]:\\nSource:\\ndef factorial(n):\\n    \"\"\"\\n    Calculate the factorial of a non-negative integer n.\\n\\n    Parameters:\\n    n (int): A non-negative integer whose factorial is to be computed\\n\\n    Returns:\\n    int: Factorial of the input number n\\n    \"\"\"\\n    # Input validation\\n    if not isinstance(n, int):\\n        raise TypeError(\"Input must be an integer\")\\n    if n &lt; 0:\\n        raise ValueError(\"Input must be a non-negative integer\")\\n\\n    # Base case: factorial of 0 is 1\\n    if n == 0:\\n        return 1\\n\\n    # Recursive case: n! = n * (n-1)!\\n    return n * factorial(n - 1)\\nOutputs:\\n[]',\n 'Cell[19]:\\nSource:\\nTesting agent with history\\nOutputs:\\nNone',\n 'Cell[20]:\\nSource:\\nresult = notebook_agent.run_sync(\\'So what you just made for me here?\\', message_history=result.new_messages())\\nMarkdown(result.data)\\nOutputs:\\n[{\\'data\\': {\\'text/markdown\\': [\\'I created a Python function named `factorial` that calculates the factorial of a non-negative integer. This function includes input validation to ensure that the input is a non-negative integer. If the input is not valid (i.e., not an integer or a negative integer), it raises a `ValueError`.\\\\n\\', \\'\\\\n\\', \"Here\\'s a summary of what the function does:\\\\n\", \\'- It checks if the input is an integer. If not, it raises a `ValueError`.\\\\n\\', \"- It checks if the input is a non-negative integer. If it\\'s negative, it raises a `ValueError`.\\\\n\", \\'- If the input is 0 or 1, it returns 1 (since 0! = 1! = 1).\\\\n\\', \\'- For other positive integers, it calculates the factorial by multiplying all integers from 2 up to the input number and returns the result.\\'], \\'text/plain\\': [\\'&lt;IPython.core.display.Markdown object&gt;\\']}, \\'execution_count\\': 14, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]',\n 'Cell[21]:\\nSource:\\nresult.all_messages()\\nOutputs:\\n[{\\'data\\': {\\'text/plain\\': [\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\nToday\\\\\\'s date is 2024-12-31.\\\\\\\\n\", part_kind=\\\\\\'system-prompt\\\\\\'), UserPromptPart(content=\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 28, 691513, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'user-prompt\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\'create_cell\\\\\\', args=ArgsJson(args_json=\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n with input validation.\\\\\\\\\\\\\\\\n    :param n: non-negative integer\\\\\\\\\\\\\\\\n    :return: factorial of n\\\\\\\\\\\\\\\\n    :raises ValueError: if n is not a non-negative integer\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\"Input must be an integer\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\"Input must be a non-negative integer\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n    if n == 0 or n == 1:\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\n    result = 1\\\\\\\\\\\\\\\\n    for i in range(2, n + 1):\\\\\\\\\\\\\\\\n        result *= i\\\\\\\\\\\\\\\\n    return result\",\"cell_type\":\"code\"}\\\\\\'), tool_call_id=\\\\\\'call_Iuc8vC4Y2axuMDvDh3TlF9mz\\\\\\', part_kind=\\\\\\'tool-call\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 29, tzinfo=datetime.timezone.utc), kind=\\\\\\'response\\\\\\'),\\\\n\\', \\' ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\'create_cell\\\\\\', content=\\\\\\'Created new code  with content: def factorial(n):\\\\\\\\n    \"\"\"\\\\\\\\n    Calculate the factorial of a non-negative integer n with input validation.\\\\\\\\n    :param n: non-negative integer\\\\\\\\n    :return: factorial of n\\\\\\\\n    :raises ValueError: if n is not a non-negative integer\\\\\\\\n    \"\"\"\\\\\\\\n    if not isinstance(n, int):\\\\\\\\n        raise ValueError(\"Input must be an integer\")\\\\\\\\n    if n &lt; 0:\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\n    if n == 0 or n == 1:\\\\\\\\n        return 1\\\\\\\\n    result = 1\\\\\\\\n    for i in range(2, n + 1):\\\\\\\\n        result *= i\\\\\\\\n    return result\\\\\\', tool_call_id=\\\\\\'call_Iuc8vC4Y2axuMDvDh3TlF9mz\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 32, 646314, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'tool-return\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \" ModelResponse(parts=[TextPart(content=\\'I have created a function to calculate the factorial of a number with input validation. You can test it by calling the `factorial` function with a non-negative integer as the argument.\\', part_kind=\\'text\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 33, tzinfo=datetime.timezone.utc), kind=\\'response\\'),\\\\n\", \" ModelRequest(parts=[UserPromptPart(content=\\'So what you just made for me here?\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 33, 948002, tzinfo=datetime.timezone.utc), part_kind=\\'user-prompt\\')], kind=\\'request\\'),\\\\n\", \\' ModelResponse(parts=[TextPart(content=\"I created a Python function named `factorial` that calculates the factorial of a non-negative integer. This function includes input validation to ensure that the input is a non-negative integer. If the input is not valid (i.e., not an integer or a negative integer), it raises a `ValueError`.\\\\\\\\n\\\\\\\\nHere\\\\\\'s a summary of what the function does:\\\\\\\\n- It checks if the input is an integer. If not, it raises a `ValueError`.\\\\\\\\n- It checks if the input is a non-negative integer. If it\\\\\\'s negative, it raises a `ValueError`.\\\\\\\\n- If the input is 0 or 1, it returns 1 (since 0! = 1! = 1).\\\\\\\\n- For other positive integers, it calculates the factorial by multiplying all integers from 2 up to the input number and returns the result.\", part_kind=\\\\\\'text\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 34, tzinfo=datetime.timezone.utc), kind=\\\\\\'response\\\\\\')]\\']}, \\'execution_count\\': 15, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]',\n 'Cell[22]:\\nSource:\\n\\nOutputs:\\nNone',\n 'Cell[23]:\\nSource:\\n### Adding notebook history\\nOutputs:\\nNone',\n 'Cell[24]:\\nSource:\\n#| export\\nimport os\\nimport json\\nfrom pathlib import Path\\nfrom typing import Optional, Dict, Any\\n\\n# Cache for notebook data\\n_notebook_cache: Dict[str, Any] = {}\\n\\ndef find_current_notebook() -&gt; Optional[dict]:\\n    \"\"\"Find and cache the current notebook data.\\n    \\n    Returns:\\n        Dict containing notebook data or None if not found\\n    \"\"\"\\n    global _notebook_cache\\n    \\n    try:\\n        ipython = get_ipython()\\n        if not ipython:\\n            return None\\n            \\n        # Get current cell content to identify the notebook\\n        current_cell = ipython.get_parent()[\\'content\\'][\\'code\\']\\n        \\n        # Check if we already found the notebook\\n        if \\'notebook\\' in _notebook_cache:\\n            # Verify it\\'s still the correct notebook by checking the current cell\\n            notebook = _notebook_cache[\\'notebook\\']\\n            for cell in notebook[\\'cells\\']:\\n                if (cell[\\'cell_type\\'] == \\'code\\' and \\n                    \\'\\'.join(cell[\\'source\\']) == current_cell):\\n                    return notebook\\n        \\n        # If not in cache or cache is invalid, search for the notebook\\n        current_dir = Path.cwd()\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\n        \\n        for nb_file in notebook_files:\\n            try:\\n                with open(nb_file) as f:\\n                    notebook = json.load(f)\\n                    for cell in notebook[\\'cells\\']:\\n                        if (cell[\\'cell_type\\'] == \\'code\\' and \\n                            \\'\\'.join(cell[\\'source\\']) == current_cell):\\n                            # Found the notebook, cache it\\n                            _notebook_cache[\\'notebook\\'] = notebook\\n                            _notebook_cache[\\'file\\'] = nb_file\\n                            return notebook\\n            except Exception:\\n                continue\\n                \\n        return None\\n        \\n    except Exception as e:\\n        print(f\"Error finding notebook: {e}\")\\n        return None\\n\\nOutputs:\\n[]',\n 'Cell[25]:\\nSource:\\n#| export\\nmax_lookback = 10\\n\\ndef get_notebook_history(max_cells: int = max_lookback) -&gt; list:\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\n    \\n    Args:\\n        max_cells: Maximum number of previous cells to include\\n        \\n    Returns:\\n        List of previous cell contents\\n    \"\"\"\\n    try:\\n        # Get the cached notebook or find it\\n        notebook = find_current_notebook()\\n        if not notebook:\\n            return []\\n            \\n        # Find current cell index\\n        current_cell = get_ipython().get_parent()[\\'content\\'][\\'code\\']\\n        cells = notebook[\\'cells\\']\\n        current_idx = -1\\n        last_prompt_idx = -1\\n        \\n        # Find current cell and last prompt cell\\n        for idx, cell in enumerate(cells):\\n            source = \\'\\'.join(cell[\\'source\\']) if isinstance(cell[\\'source\\'], list) else cell[\\'source\\']\\n            \\n            # Find current cell\\n            if current_idx == -1 and cell[\\'cell_type\\'] == \\'code\\' and source == current_cell:\\n                current_idx = idx\\n                \\n            # Find last prompt cell before current cell\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\n                if cell[\\'cell_type\\'] == \\'code\\' and source.strip().startswith(\\'%%prompt\\'):\\n                    last_prompt_idx = idx\\n                \\n        if current_idx == -1:\\n            return []\\n            \\n        # Get cells between last prompt and current cell\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\n        history = []\\n        \\n        for idx in range(start_idx, current_idx):\\n            cell = cells[idx]            \\n            source = cell[\\'source\\'] if isinstance(cell[\\'source\\'], str) else \\'\\'.join(cell[\\'source\\'])\\n            if \\'outputs\\' in cell:\\n                outputs = cell[\\'outputs\\'] if isinstance(cell[\\'outputs\\'], str) else str(cell[\\'outputs\\'])\\n            else:\\n                outputs = \\'None\\'\\n            if not (source.strip().startswith(\\'%%prompt\\') or outputs.strip().startswith(\\'#|exclude\\') or outputs.strip().startswith(\\'#| exclude\\')):\\n                history.append(f\"Cell[{idx}]:\\\\nSource:\\\\n{source}\\\\nOutputs:\\\\n{outputs}\")\\n        \\n        return history\\n        \\n    except Exception as e:\\n        print(f\"Error getting notebook history: {e}\")\\n        return []\\nOutputs:\\n[]',\n 'Cell[26]:\\nSource:\\nTesting notebook history\\nOutputs:\\nNone']\n\n\n\n\n\n\nsource\n\n\n\n\n create_history_aware_prompt (prompt:str, message_history:list=None,\n                              max_history:int=5)\n\n*Create a prompt with notebook history context and message history.\nArgs: prompt: The user‚Äôs prompt message_history: Previous conversation messages from results.all_messages() max_history: Maximum number of previous cells to include\nReturns: Tuple of (enhanced prompt, combined message history)*\nTesting history-aware prompt\n\ncreate_history_aware_prompt('So what you just made for me here?', result.all_messages(), max_history=20)\n\n('So what you just made for me here?',\n [ModelRequest(parts=[SystemPromptPart(content=\"\\nYou are a helpful assistant that operates in a Jupyter notebook.\\nYour regular text responses are rendered as cell output.\\nYou can create new cells, edit existing cells, and run code.\\nYou can also use tools to help you with your tasks.\\nToday's date is 2024-12-31.\\n\", part_kind='system-prompt'), UserPromptPart(content='Create a function that calculates the factorial of a number with input validation', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 43, 700768, tzinfo=datetime.timezone.utc), part_kind='user-prompt')], kind='request'),\n  ModelResponse(parts=[ToolCallPart(tool_name='create_cell', args=ArgsJson(args_json='{\"content\":\"def factorial(n):\\\\n    \\\\\"\\\\\"\\\\\"\\\\n    Calculate the factorial of a non-negative integer n.\\\\n    \\\\n    :param n: non-negative integer\\\\n    :return: factorial of n\\\\n    \\\\\"\\\\\"\\\\\"\\\\n    # Input validation\\\\n    if not isinstance(n, int):\\\\n        raise ValueError(\\\\\"Input must be an integer.\\\\\")\\\\n    if n &lt; 0:\\\\n        raise ValueError(\\\\\"Input must be a non-negative integer.\\\\\")\\\\n    \\\\n    # Base case\\\\n    if n == 0:\\\\n        return 1\\\\n    \\\\n    # Recursive case\\\\n    result = 1\\\\n    for i in range(1, n + 1):\\\\n        result *= i\\\\n    return result\\\\n\\\\n# Example usage\\\\ntry:\\\\n    print(factorial(5))  # Should print 120\\\\n    print(factorial(-1)) # Should raise a ValueError\\\\nexcept ValueError as e:\\\\n    print(e)\",\"cell_type\":\"code\"}'), tool_call_id='call_dP852a9HSFo4HgyvUTm6NtHd', part_kind='tool-call')], timestamp=datetime.datetime(2024, 12, 31, 13, 10, 44, tzinfo=datetime.timezone.utc), kind='response'),\n  ModelRequest(parts=[ToolReturnPart(tool_name='create_cell', content='Created new code  with content: def factorial(n):\\n    \"\"\"\\n    Calculate the factorial of a non-negative integer n.\\n    \\n    :param n: non-negative integer\\n    :return: factorial of n\\n    \"\"\"\\n    # Input validation\\n    if not isinstance(n, int):\\n        raise ValueError(\"Input must be an integer.\")\\n    if n &lt; 0:\\n        raise ValueError(\"Input must be a non-negative integer.\")\\n    \\n    # Base case\\n    if n == 0:\\n        return 1\\n    \\n    # Recursive case\\n    result = 1\\n    for i in range(1, n + 1):\\n        result *= i\\n    return result\\n\\n# Example usage\\ntry:\\n    print(factorial(5))  # Should print 120\\n    print(factorial(-1)) # Should raise a ValueError\\nexcept ValueError as e:\\n    print(e)', tool_call_id='call_dP852a9HSFo4HgyvUTm6NtHd', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 47, 279330, tzinfo=datetime.timezone.utc), part_kind='tool-return')], kind='request'),\n  ModelResponse(parts=[TextPart(content='I created a function that calculates the factorial of a number with input validation. You can test it in the new cell provided.', part_kind='text')], timestamp=datetime.datetime(2024, 12, 31, 13, 10, 48, tzinfo=datetime.timezone.utc), kind='response'),\n  ModelRequest(parts=[UserPromptPart(content='So what you just made for me here?', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 48, 46240, tzinfo=datetime.timezone.utc), part_kind='user-prompt')], kind='request'),\n  ModelResponse(parts=[TextPart(content=\"I created a Python function named `factorial` that calculates the factorial of a non-negative integer. The function includes input validation to ensure that the input is a non-negative integer. If the input is not an integer or is negative, the function raises a `ValueError` with an appropriate message. \\n\\nHere's a summary of the key parts of the code:\\n\\n- **Input Validation**: \\n  - Checks if `n` is an integer. If not, it raises a `ValueError`.\\n  - Checks if `n` is a non-negative integer. If `n` is negative, it raises a `ValueError`.\\n\\n- **Factorial Calculation**: \\n  - Uses an iterative approach to calculate the factorial.\\n  - Returns `1` if `n` is `0` (the factorial of 0 is 1).\\n  - Uses a for-loop to compute the factorial for positive integers.\\n\\n- **Example Usage**: \\n  - Demonstrates the function by calculating the factorial of 5.\\n  - Includes a try-except block to catch and print the error message if a `ValueError` is raised when computing the factorial of a negative number.\\n\\nYou can execute the cell to see how it works or modify it to test with other values.\", part_kind='text')], timestamp=datetime.datetime(2024, 12, 31, 13, 10, 48, tzinfo=datetime.timezone.utc), kind='response'),\n  ModelRequest(parts=[UserPromptPart(content='Here is the context of new notebook cells that were added:\\nCell[11]:\\nSource:\\n#| export\\nfrom IPython.display import display, Markdown\\nfrom typing import Literal\\n\\n@notebook_agent.tool\\ndef create_cell(ctx: RunContext[str], content: str, cell_type: Literal[\\'code\\', \\'markdown\\'] = \\'code\\') -&gt; str:\\n    \"\"\"Create a new cell in the notebook with the specified content.\\n    \\n    Args:\\n        content: The content to put in the new cell\\n        cell_type: Type of cell to create (\\'code\\' or \\'markdown\\')\\n    \\n    Returns:\\n        A confirmation message\\n    \"\"\"\\n    try:    \\n        ipython = get_ipython()\\n    except NameError:\\n        return \"Error: Not running in IPython/Jupyter environment\"\\n    \\n    # Display the content immediately\\n    if cell_type == \\'code\\':\\n        # Set up the next cell with the content\\n        ipython.set_next_input(content)\\n    else:\\n        display(Markdown(content))\\n    \\n    return f\"Created new {cell_type}  with content: {content}\"\\nOutputs:\\n[{\\'name\\': \\'stderr\\', \\'output_type\\': \\'stream\\', \\'text\\': [\\'&lt;module&gt;:8: No type or annotation for returned value 1\\\\n\\']}]\\n\\nCell[12]:\\nSource:\\nAlways set custom agents to inherit base tools\\n\\nOutputs:\\nNone\\n\\nCell[13]:\\nSource:\\n#| export\\ndef set_agent(agent: Agent) -&gt; Agent:\\n    \"\"\"Set a custom agent for the notebook.\\n    \\n    Args:\\n        agent: PydanticAI agent instance\\n        \\n    Returns:\\n        Configured agent with required tools\\n    \"\"\"\\n    global _current_agent, notebook_agent\\n        \\n    # Always ensure create_cell tool is available\\n    if \\'create_cell\\' not in agent._function_tools:\\n        # Copy the tool directly from notebook_agent\\n        agent._function_tools = notebook_agent._function_tools\\n    \\n    _current_agent = agent\\n    return agent\\nOutputs:\\n[]\\n\\nCell[14]:\\nSource:\\nTool testing cell creation tool\\nOutputs:\\nNone\\n\\nCell[15]:\\nSource:\\nresult = notebook_agent.run_sync(\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\')\\nMarkdown(result.data)\\nOutputs:\\n[{\\'data\\': {\\'text/markdown\\': [\\'I\\\\\\'ve created a new cell with a simple \"Hello, World!\" function. You can run it to see the output.\\'], \\'text/plain\\': [\\'&lt;IPython.core.display.Markdown object&gt;\\']}, \\'execution_count\\': 10, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]\\n\\nCell[16]:\\nSource:\\ndef hello_world():\\n    print(\"Hello, world!\")\\n\\nhello_world()\\nOutputs:\\n[]\\n\\nCell[17]:\\nSource:\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\nMarkdown(result.data)\\nOutputs:\\n[{\\'data\\': {\\'text/markdown\\': [\\'I have created a function to calculate the factorial of a number with input validation. You can test it by calling the `factorial` function with a non-negative integer as the argument.\\'], \\'text/plain\\': [\\'&lt;IPython.core.display.Markdown object&gt;\\']}, \\'execution_count\\': 12, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]\\n\\nCell[18]:\\nSource:\\ndef factorial(n):\\n    \"\"\"\\n    Calculate the factorial of a non-negative integer n.\\n\\n    Parameters:\\n    n (int): A non-negative integer whose factorial is to be computed\\n\\n    Returns:\\n    int: Factorial of the input number n\\n    \"\"\"\\n    # Input validation\\n    if not isinstance(n, int):\\n        raise TypeError(\"Input must be an integer\")\\n    if n &lt; 0:\\n        raise ValueError(\"Input must be a non-negative integer\")\\n\\n    # Base case: factorial of 0 is 1\\n    if n == 0:\\n        return 1\\n\\n    # Recursive case: n! = n * (n-1)!\\n    return n * factorial(n - 1)\\nOutputs:\\n[]\\n\\nCell[19]:\\nSource:\\nTesting agent with history\\nOutputs:\\nNone\\n\\nCell[20]:\\nSource:\\nresult = notebook_agent.run_sync(\\'So what you just made for me here?\\', message_history=result.new_messages())\\nMarkdown(result.data)\\nOutputs:\\n[{\\'data\\': {\\'text/markdown\\': [\\'I created a Python function named `factorial` that calculates the factorial of a non-negative integer. This function includes input validation to ensure that the input is a non-negative integer. If the input is not valid (i.e., not an integer or a negative integer), it raises a `ValueError`.\\\\n\\', \\'\\\\n\\', \"Here\\'s a summary of what the function does:\\\\n\", \\'- It checks if the input is an integer. If not, it raises a `ValueError`.\\\\n\\', \"- It checks if the input is a non-negative integer. If it\\'s negative, it raises a `ValueError`.\\\\n\", \\'- If the input is 0 or 1, it returns 1 (since 0! = 1! = 1).\\\\n\\', \\'- For other positive integers, it calculates the factorial by multiplying all integers from 2 up to the input number and returns the result.\\'], \\'text/plain\\': [\\'&lt;IPython.core.display.Markdown object&gt;\\']}, \\'execution_count\\': 14, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]\\n\\nCell[21]:\\nSource:\\nresult.all_messages()\\nOutputs:\\n[{\\'data\\': {\\'text/plain\\': [\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\nToday\\\\\\'s date is 2024-12-31.\\\\\\\\n\", part_kind=\\\\\\'system-prompt\\\\\\'), UserPromptPart(content=\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 28, 691513, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'user-prompt\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\'create_cell\\\\\\', args=ArgsJson(args_json=\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n with input validation.\\\\\\\\\\\\\\\\n    :param n: non-negative integer\\\\\\\\\\\\\\\\n    :return: factorial of n\\\\\\\\\\\\\\\\n    :raises ValueError: if n is not a non-negative integer\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\"Input must be an integer\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\"Input must be a non-negative integer\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n    if n == 0 or n == 1:\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\n    result = 1\\\\\\\\\\\\\\\\n    for i in range(2, n + 1):\\\\\\\\\\\\\\\\n        result *= i\\\\\\\\\\\\\\\\n    return result\",\"cell_type\":\"code\"}\\\\\\'), tool_call_id=\\\\\\'call_Iuc8vC4Y2axuMDvDh3TlF9mz\\\\\\', part_kind=\\\\\\'tool-call\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 29, tzinfo=datetime.timezone.utc), kind=\\\\\\'response\\\\\\'),\\\\n\\', \\' ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\'create_cell\\\\\\', content=\\\\\\'Created new code  with content: def factorial(n):\\\\\\\\n    \"\"\"\\\\\\\\n    Calculate the factorial of a non-negative integer n with input validation.\\\\\\\\n    :param n: non-negative integer\\\\\\\\n    :return: factorial of n\\\\\\\\n    :raises ValueError: if n is not a non-negative integer\\\\\\\\n    \"\"\"\\\\\\\\n    if not isinstance(n, int):\\\\\\\\n        raise ValueError(\"Input must be an integer\")\\\\\\\\n    if n &lt; 0:\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\n    if n == 0 or n == 1:\\\\\\\\n        return 1\\\\\\\\n    result = 1\\\\\\\\n    for i in range(2, n + 1):\\\\\\\\n        result *= i\\\\\\\\n    return result\\\\\\', tool_call_id=\\\\\\'call_Iuc8vC4Y2axuMDvDh3TlF9mz\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 32, 646314, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'tool-return\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \" ModelResponse(parts=[TextPart(content=\\'I have created a function to calculate the factorial of a number with input validation. You can test it by calling the `factorial` function with a non-negative integer as the argument.\\', part_kind=\\'text\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 33, tzinfo=datetime.timezone.utc), kind=\\'response\\'),\\\\n\", \" ModelRequest(parts=[UserPromptPart(content=\\'So what you just made for me here?\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 33, 948002, tzinfo=datetime.timezone.utc), part_kind=\\'user-prompt\\')], kind=\\'request\\'),\\\\n\", \\' ModelResponse(parts=[TextPart(content=\"I created a Python function named `factorial` that calculates the factorial of a non-negative integer. This function includes input validation to ensure that the input is a non-negative integer. If the input is not valid (i.e., not an integer or a negative integer), it raises a `ValueError`.\\\\\\\\n\\\\\\\\nHere\\\\\\'s a summary of what the function does:\\\\\\\\n- It checks if the input is an integer. If not, it raises a `ValueError`.\\\\\\\\n- It checks if the input is a non-negative integer. If it\\\\\\'s negative, it raises a `ValueError`.\\\\\\\\n- If the input is 0 or 1, it returns 1 (since 0! = 1! = 1).\\\\\\\\n- For other positive integers, it calculates the factorial by multiplying all integers from 2 up to the input number and returns the result.\", part_kind=\\\\\\'text\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 34, tzinfo=datetime.timezone.utc), kind=\\\\\\'response\\\\\\')]\\']}, \\'execution_count\\': 15, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]\\n\\nCell[22]:\\nSource:\\n\\nOutputs:\\nNone\\n\\nCell[23]:\\nSource:\\n### Adding notebook history\\nOutputs:\\nNone\\n\\nCell[24]:\\nSource:\\n#| export\\nimport os\\nimport json\\nfrom pathlib import Path\\nfrom typing import Optional, Dict, Any\\n\\n# Cache for notebook data\\n_notebook_cache: Dict[str, Any] = {}\\n\\ndef find_current_notebook() -&gt; Optional[dict]:\\n    \"\"\"Find and cache the current notebook data.\\n    \\n    Returns:\\n        Dict containing notebook data or None if not found\\n    \"\"\"\\n    global _notebook_cache\\n    \\n    try:\\n        ipython = get_ipython()\\n        if not ipython:\\n            return None\\n            \\n        # Get current cell content to identify the notebook\\n        current_cell = ipython.get_parent()[\\'content\\'][\\'code\\']\\n        \\n        # Check if we already found the notebook\\n        if \\'notebook\\' in _notebook_cache:\\n            # Verify it\\'s still the correct notebook by checking the current cell\\n            notebook = _notebook_cache[\\'notebook\\']\\n            for cell in notebook[\\'cells\\']:\\n                if (cell[\\'cell_type\\'] == \\'code\\' and \\n                    \\'\\'.join(cell[\\'source\\']) == current_cell):\\n                    return notebook\\n        \\n        # If not in cache or cache is invalid, search for the notebook\\n        current_dir = Path.cwd()\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\n        \\n        for nb_file in notebook_files:\\n            try:\\n                with open(nb_file) as f:\\n                    notebook = json.load(f)\\n                    for cell in notebook[\\'cells\\']:\\n                        if (cell[\\'cell_type\\'] == \\'code\\' and \\n                            \\'\\'.join(cell[\\'source\\']) == current_cell):\\n                            # Found the notebook, cache it\\n                            _notebook_cache[\\'notebook\\'] = notebook\\n                            _notebook_cache[\\'file\\'] = nb_file\\n                            return notebook\\n            except Exception:\\n                continue\\n                \\n        return None\\n        \\n    except Exception as e:\\n        print(f\"Error finding notebook: {e}\")\\n        return None\\n\\nOutputs:\\n[]\\n\\nCell[25]:\\nSource:\\n#| export\\nmax_lookback = 10\\n\\ndef get_notebook_history(max_cells: int = max_lookback) -&gt; list:\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\n    \\n    Args:\\n        max_cells: Maximum number of previous cells to include\\n        \\n    Returns:\\n        List of previous cell contents\\n    \"\"\"\\n    try:\\n        # Get the cached notebook or find it\\n        notebook = find_current_notebook()\\n        if not notebook:\\n            return []\\n            \\n        # Find current cell index\\n        current_cell = get_ipython().get_parent()[\\'content\\'][\\'code\\']\\n        cells = notebook[\\'cells\\']\\n        current_idx = -1\\n        last_prompt_idx = -1\\n        \\n        # Find current cell and last prompt cell\\n        for idx, cell in enumerate(cells):\\n            source = \\'\\'.join(cell[\\'source\\']) if isinstance(cell[\\'source\\'], list) else cell[\\'source\\']\\n            \\n            # Find current cell\\n            if current_idx == -1 and cell[\\'cell_type\\'] == \\'code\\' and source == current_cell:\\n                current_idx = idx\\n                \\n            # Find last prompt cell before current cell\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\n                if cell[\\'cell_type\\'] == \\'code\\' and source.strip().startswith(\\'%%prompt\\'):\\n                    last_prompt_idx = idx\\n                \\n        if current_idx == -1:\\n            return []\\n            \\n        # Get cells between last prompt and current cell\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\n        history = []\\n        \\n        for idx in range(start_idx, current_idx):\\n            cell = cells[idx]            \\n            source = cell[\\'source\\'] if isinstance(cell[\\'source\\'], str) else \\'\\'.join(cell[\\'source\\'])\\n            if \\'outputs\\' in cell:\\n                outputs = cell[\\'outputs\\'] if isinstance(cell[\\'outputs\\'], str) else str(cell[\\'outputs\\'])\\n            else:\\n                outputs = \\'None\\'\\n            if not (source.strip().startswith(\\'%%prompt\\') or outputs.strip().startswith(\\'#|exclude\\') or outputs.strip().startswith(\\'#| exclude\\')):\\n                history.append(f\"Cell[{idx}]:\\\\nSource:\\\\n{source}\\\\nOutputs:\\\\n{outputs}\")\\n        \\n        return history\\n        \\n    except Exception as e:\\n        print(f\"Error getting notebook history: {e}\")\\n        return []\\nOutputs:\\n[]\\n\\nCell[26]:\\nSource:\\nTesting notebook history\\nOutputs:\\nNone\\n\\nCell[27]:\\nSource:\\nnb_hist = get_notebook_history(max_cells=20)\\nnb_hist\\nOutputs:\\n[{\\'data\\': {\\'text/plain\\': [\"[\\'Cell[5]:\\\\\\\\nSource:\\\\\\\\nSystem prompt\\\\\\\\n\\\\\\\\nOutputs:\\\\\\\\nNone\\',\\\\n\", \\' \\\\\\'Cell[6]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nfrom datetime import date\\\\\\\\nsystem_prompt = f\"\"\"\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\nToday\\\\\\\\\\\\\\'s date is {date.today().strftime(\\\\\\\\\\\\\\'%Y-%m-%d\\\\\\\\\\\\\\')}.\\\\\\\\n\"\"\"\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\',\\\\n\\', \\' \"Cell[7]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nfrom typing import cast\\\\\\\\nmodel = cast(KnownModelName, os.getenv(\\\\\\'PYDANTIC_AI_MODEL\\\\\\', \\\\\\'openai:gpt-4o\\\\\\'))\\\\\\\\nprint(f\\\\\\'PydanticAI is using model: {model}\\\\\\')\\\\\\\\nnotebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\'name\\\\\\': \\\\\\'stdout\\\\\\', \\\\\\'output_type\\\\\\': \\\\\\'stream\\\\\\', \\\\\\'text\\\\\\': [\\\\\\'PydanticAI is using model: openai:gpt-4o\\\\\\\\\\\\\\\\n\\\\\\']}]\",\\\\n\\', \\' \\\\\\'Cell[8]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\n_current_agent: Optional[Agent] = None\\\\\\\\n\\\\\\\\ndef get_current_agent() -&gt; Agent:\\\\\\\\n    \"\"\"Get the current agent, falling back to default notebook_agent if none set.\"\"\"\\\\\\\\n    global _current_agent, notebook_agent\\\\\\\\n    return _current_agent or notebook_agent\\\\\\\\n\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\',\\\\n\\', \" \\'Cell[9]:\\\\\\\\nSource:\\\\\\\\n### Adding cell creation tool\\\\\\\\nOutputs:\\\\\\\\nNone\\',\\\\n\", \\' \\\\\\'Cell[10]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nfrom IPython.display import display, Markdown\\\\\\\\nfrom typing import Literal\\\\\\\\n\\\\\\\\n@notebook_agent.tool\\\\\\\\ndef create_cell(ctx: RunContext[str], content: str, cell_type: Literal[\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\'] = \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\') -&gt; str:\\\\\\\\n    \"\"\"Create a new cell in the notebook with the specified content.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        content: The content to put in the new cell\\\\\\\\n        cell_type: Type of cell to create (\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' or \\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\')\\\\\\\\n    \\\\\\\\n    Returns:\\\\\\\\n        A confirmation message\\\\\\\\n    \"\"\"\\\\\\\\n    try:    \\\\\\\\n        ipython = get_ipython()\\\\\\\\n    except NameError:\\\\\\\\n        return \"Error: Not running in IPython/Jupyter environment\"\\\\\\\\n    \\\\\\\\n    # Display the content immediately\\\\\\\\n    if cell_type == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\':\\\\\\\\n        # Set up the next cell with the content\\\\\\\\n        ipython.set_next_input(content)\\\\\\\\n    else:\\\\\\\\n        display(Markdown(content))\\\\\\\\n    \\\\\\\\n    return f\"Created new {cell_type}  with content: {content}\"\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\',\\\\n\\', \" \\'Cell[11]:\\\\\\\\nSource:\\\\\\\\nAlways set custom agents to have create_cell tool\\\\\\\\nOutputs:\\\\\\\\nNone\\',\\\\n\", \\' \\\\\\'Cell[12]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\ndef set_agent(agent: Agent) -&gt; Agent:\\\\\\\\n    \"\"\"Set a custom agent for the notebook.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        agent: PydanticAI agent instance\\\\\\\\n        \\\\\\\\n    Returns:\\\\\\\\n        Configured agent with required tools\\\\\\\\n    \"\"\"\\\\\\\\n    global _current_agent, notebook_agent\\\\\\\\n        \\\\\\\\n    # Always ensure create_cell tool is available\\\\\\\\n    if \\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\' not in agent._function_tools:\\\\\\\\n        # Copy the tool directly from notebook_agent\\\\\\\\n        agent._function_tools[\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\'] = notebook_agent._function_tools[\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\']\\\\\\\\n    \\\\\\\\n    _current_agent = agent\\\\\\\\n    return agent\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\',\\\\n\\', \" \\'Cell[13]:\\\\\\\\nSource:\\\\\\\\nTool testing\\\\\\\\nOutputs:\\\\\\\\nNone\\',\\\\n\", \\' \\\\\\'Cell[14]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\\\\\\\\\\\\\')\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a new code cell with a simple \"Hello, World!\" function. You can run the cell to see the output.\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 7, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\',\\\\n\\', \\' \"Cell[15]:\\\\\\\\nSource:\\\\\\\\ndef hello_world():\\\\\\\\n    print(\\\\\\'Hello, World!\\\\\\')\\\\\\\\n\\\\\\\\n# Call the function to display the output\\\\\\\\nhello_world()\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\'name\\\\\\': \\\\\\'stdout\\\\\\', \\\\\\'output_type\\\\\\': \\\\\\'stream\\\\\\', \\\\\\'text\\\\\\': [\\\\\\'Hello, World!\\\\\\\\\\\\\\\\n\\\\\\']}]\",\\\\n\\', \\' \\\\\\'Cell[16]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\'s environment.\"], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 9, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\',\\\\n\\', \\' \\\\\\'Cell[17]:\\\\\\\\nSource:\\\\\\\\ndef factorial(n):\\\\\\\\n    \"\"\"\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\n\\\\\\\\n    Parameters:\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\n\\\\\\\\n    Returns:\\\\\\\\n    int: Factorial of the input number n\\\\\\\\n    \"\"\"\\\\\\\\n    # Input validation\\\\\\\\n    if not isinstance(n, int):\\\\\\\\n        raise TypeError(\"Input must be an integer\")\\\\\\\\n    if n &lt; 0:\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\n\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\n    if n == 0:\\\\\\\\n        return 1\\\\\\\\n\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\n    return n * factorial(n - 1)\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\',\\\\n\\', \" \\'Cell[18]:\\\\\\\\nSource:\\\\\\\\nTesting agent with history\\\\\\\\nOutputs:\\\\\\\\nNone\\',\\\\n\", \\' \\\\\\'Cell[19]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', message_history=result.new_messages())\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\"I\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'To make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'```python\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'factorial(5)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'```\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'This would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 11, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\',\\\\n\\', \\' \\\\\\'Cell[20]:\\\\\\\\nSource:\\\\\\\\nresult.all_messages()\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is 2024-12-31.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 34, 458473, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', args=ArgsJson(args_json=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be an integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be a non-negative integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\",\"cell_type\":\"code\"}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-call\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 35, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\', content=\\\\\\\\\\\\\\'Created new code cell\\\\\\\\\\\\\\', tool_call_id=\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, 114822, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'tool-return\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 58, 747643, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTo make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfactorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nThis would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 59, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')]\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 12, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\',\\\\n\\', \" \\'Cell[21]:\\\\\\\\nSource:\\\\\\\\n### Adding notebook history\\\\\\\\nOutputs:\\\\\\\\nNone\\',\\\\n\", \\' \\\\\\'Cell[22]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nimport os\\\\\\\\nimport json\\\\\\\\nfrom pathlib import Path\\\\\\\\nfrom typing import Optional, Dict, Any\\\\\\\\n\\\\\\\\n# Cache for notebook data\\\\\\\\n_notebook_cache: Dict[str, Any] = {}\\\\\\\\n\\\\\\\\ndef find_current_notebook() -&gt; Optional[dict]:\\\\\\\\n    \"\"\"Find and cache the current notebook data.\\\\\\\\n    \\\\\\\\n    Returns:\\\\\\\\n        Dict containing notebook data or None if not found\\\\\\\\n    \"\"\"\\\\\\\\n    global _notebook_cache\\\\\\\\n    \\\\\\\\n    try:\\\\\\\\n        ipython = get_ipython()\\\\\\\\n        if not ipython:\\\\\\\\n            return None\\\\\\\\n            \\\\\\\\n        # Get current cell content to identify the notebook\\\\\\\\n        current_cell = ipython.get_parent()[\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\']\\\\\\\\n        \\\\\\\\n        # Check if we already found the notebook\\\\\\\\n        if \\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\' in _notebook_cache:\\\\\\\\n            # Verify it\\\\\\\\\\\\\\'s still the correct notebook by checking the current cell\\\\\\\\n            notebook = _notebook_cache[\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\']\\\\\\\\n            for cell in notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']:\\\\\\\\n                if (cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and \\\\\\\\n                    \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\n                    return notebook\\\\\\\\n        \\\\\\\\n        # If not in cache or cache is invalid, search for the notebook\\\\\\\\n        current_dir = Path.cwd()\\\\\\\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\\\\\\\n        \\\\\\\\n        for nb_file in notebook_files:\\\\\\\\n            try:\\\\\\\\n                with open(nb_file) as f:\\\\\\\\n                    notebook = json.load(f)\\\\\\\\n                    for cell in notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']:\\\\\\\\n                        if (cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and \\\\\\\\n                            \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\n                            # Found the notebook, cache it\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\'] = notebook\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\'file\\\\\\\\\\\\\\'] = nb_file\\\\\\\\n                            return notebook\\\\\\\\n            except Exception:\\\\\\\\n                continue\\\\\\\\n                \\\\\\\\n        return None\\\\\\\\n        \\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error finding notebook: {e}\")\\\\\\\\n        return None\\\\\\\\n\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\',\\\\n\\', \\' \\\\\\'Cell[23]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nmax_lookback = 10\\\\\\\\n\\\\\\\\ndef get_notebook_history(max_cells: int = max_lookback) -&gt; list:\\\\\\\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        max_cells: Maximum number of previous cells to include\\\\\\\\n        \\\\\\\\n    Returns:\\\\\\\\n        List of previous cell contents\\\\\\\\n    \"\"\"\\\\\\\\n    try:\\\\\\\\n        # Get the cached notebook or find it\\\\\\\\n        notebook = find_current_notebook()\\\\\\\\n        if not notebook:\\\\\\\\n            return []\\\\\\\\n            \\\\\\\\n        # Find current cell index\\\\\\\\n        current_cell = get_ipython().get_parent()[\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\']\\\\\\\\n        cells = notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']\\\\\\\\n        current_idx = -1\\\\\\\\n        last_prompt_idx = -1\\\\\\\\n        \\\\\\\\n        # Find current cell and last prompt cell\\\\\\\\n        for idx, cell in enumerate(cells):\\\\\\\\n            source = \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) if isinstance(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'], list) else cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']\\\\\\\\n            \\\\\\\\n            # Find current cell\\\\\\\\n            if current_idx == -1 and cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and source == current_cell:\\\\\\\\n                current_idx = idx\\\\\\\\n                \\\\\\\\n            # Find last prompt cell before current cell\\\\\\\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\\\\\\\n                if cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and source.strip().startswith(\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\'):\\\\\\\\n                    last_prompt_idx = idx\\\\\\\\n                \\\\\\\\n        if current_idx == -1:\\\\\\\\n            return []\\\\\\\\n            \\\\\\\\n        # Get cells between last prompt and current cell\\\\\\\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\\\\\\\n        history = []\\\\\\\\n        \\\\\\\\n        for idx in range(start_idx, current_idx):\\\\\\\\n            cell = cells[idx]            \\\\\\\\n            source = cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'])\\\\\\\\n            if \\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\' in cell:\\\\\\\\n                outputs = cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'], str) else str(cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'])\\\\\\\\n            else:\\\\\\\\n                outputs = \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\'\\\\\\\\n            if not (source.strip().startswith(\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\'#|exclude\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\'#| exclude\\\\\\\\\\\\\\')):\\\\\\\\n                history.append(f\"Cell[{idx}]:\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\n{source}\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\n{outputs}\")\\\\\\\\n        \\\\\\\\n        return history\\\\\\\\n        \\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error getting notebook history: {e}\")\\\\\\\\n        return []\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\',\\\\n\\', \" \\'Cell[24]:\\\\\\\\nSource:\\\\\\\\nTesting notebook history\\\\\\\\nOutputs:\\\\\\\\nNone\\']\"]}, \\'execution_count\\': 18, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]\\n\\nCell[28]:\\nSource:\\n### Creating history-aware prompt\\nOutputs:\\nNone\\n\\nCell[29]:\\nSource:\\n#| export\\ndef create_history_aware_prompt(prompt: str, message_history: list = None, max_history: int = 5) -&gt; tuple:\\n    \"\"\"Create a prompt with notebook history context and message history.\\n    \\n    Args:\\n        prompt: The user\\'s prompt\\n        message_history: Previous conversation messages from results.all_messages()\\n        max_history: Maximum number of previous cells to include\\n        \\n    Returns:\\n        Tuple of (enhanced prompt, combined message history)\\n    \"\"\"\\n    try:\\n        ipython = get_ipython()\\n        if not ipython:\\n            return prompt, message_history\\n        \\n        # Get new cells using our optimized get_notebook_history\\n        new_cells = get_notebook_history(max_cells=max_history)\\n        \\n        if not new_cells and not message_history:\\n            return prompt, None\\n            \\n        # Create message history if none exists\\n        from pydantic_ai.messages import (\\n            ModelRequest, ModelResponse, \\n            UserPromptPart, TextPart\\n        )\\n        \\n        messages = []\\n        \\n        # Add existing message history if provided\\n        if message_history:\\n            messages.extend(message_history)\\n        \\n        # Only add context message if we have new cells\\n        if new_cells:\\n            # Create context message with new cells\\n            history_content = \"\\\\n\\\\n\".join(new_cells)\\n\\n            context_msg = ModelRequest(parts=[\\n                UserPromptPart(\\n                    content=\"Here is the context of new notebook cells that were added:\\\\n\" + history_content\\n                )\\n            ])\\n            \\n            # Create response acknowledging new context\\n            context_response = ModelResponse(parts=[\\n                TextPart(\\n                    content=\"I understand the new notebook context. How can I help?\"\\n                )\\n            ])\\n            \\n            messages.extend([context_msg, context_response])\\n                \\n        return prompt, messages\\n        \\n    except Exception as e:\\n        print(f\"Error creating history-aware prompt: {e}\")\\n        return prompt, message_history\\nOutputs:\\n[]\\n\\nCell[30]:\\nSource:\\nTesting history-aware prompt\\nOutputs:\\nNone', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 52, 367833, tzinfo=datetime.timezone.utc), part_kind='user-prompt')], kind='request'),\n  ModelResponse(parts=[TextPart(content='I understand the new notebook context. How can I help?', part_kind='text')], timestamp=datetime.datetime(2024, 12, 31, 13, 10, 52, 367852, tzinfo=datetime.timezone.utc), kind='response')])\n\n\n\n\n\n\nsource\n\n\n\n\n run_with_history (agent:pydantic_ai.agent.Agent, prompt:str,\n                   message_history:list=None, max_history:int=5)\n\n*Run the agent with notebook and conversation history context.\nArgs: agent: The PydanticAI agent prompt: The user‚Äôs prompt message_history: Previous conversation messages max_history: Maximum number of previous cells to include\nReturns: Agent run result*\nTesting run_with_history\n\nresult = run_with_history(notebook_agent, 'So what is going on in this notebook?',result.all_messages(), max_history=20)\nMarkdown(result.data)\n\nThis notebook appears to involve creating, running, and testing an AI-powered assistant, possibly using a tool like Pydantic AI for Jupyter notebooks. Here‚Äôs a breakdown of the key components and activities happening in this notebook:\n\nSetup and Imports:\n\nThe notebook is set up with various imports from libraries and definitions of system prompts to prepare the AI agent to assist within a Jupyter environment.\n\nAgent Configuration:\n\nAn AI agent (likely PydanticAI or a similar framework) is configured with a model and system prompts to guide its behavior within the notebook.\n\nTool and Function Definitions:\n\nSeveral functions and tools are defined, including create_cell, which allows new cells to be programmatically added to the notebook.\n\nNotebook Agent Execution:\n\nThe AI agent is used to execute commands. Examples include requests to create a ‚ÄúHello, World!‚Äù function and a factorial function with input validation.\n\nFunction Implementation:\n\nFunctions like hello_world() and factorial() are defined as part of this process. The factorial function includes input validation and uses recursion to calculate factorials.\n\nNotebook History and Prompt Management:\n\nThere are methods for capturing the history of cell executions and creating context-aware prompts that consider both the current notebook state and any previous interactions or commands.\n\nExecution Testing:\n\nVarious cells are used to test the system, ensure that functionality is operating correctly, and demonstrate the capabilities of the conversational agent in a Jupyter context.\n\nError Handling and Validation:\n\nThe notebook handles potential errors (e.g., invalid inputs for the factorial function) and various elements of cell execution and output display.\n\nHistory Creation and Contextual Responses:\n\nAn advanced feature is the creation of context-aware prompts that adapt based on the content and history of the notebook, indicating a sophisticated interaction system between user inputs and the agent‚Äôs responses.\n\n\nIn summary, the notebook combines Jupyter‚Äôs interactive capabilities with an AI-driven agent to assist with tasks, automatically manage notebook content, and potentially perform more complex logical operations based on the commands or tasks provided by the user.\n\n\n\nresult.all_messages()\n\n[ModelRequest(parts=[SystemPromptPart(content=\"\\nYou are a helpful assistant that operates in a Jupyter notebook.\\nYour regular text responses are rendered as cell output.\\nYou can create new cells, edit existing cells, and run code.\\nYou can also use tools to help you with your tasks.\\nToday's date is 2024-12-31.\\n\", part_kind='system-prompt'), UserPromptPart(content='Create a function that calculates the factorial of a number with input validation', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 43, 700768, tzinfo=datetime.timezone.utc), part_kind='user-prompt')], kind='request'),\n ModelResponse(parts=[ToolCallPart(tool_name='create_cell', args=ArgsJson(args_json='{\"content\":\"def factorial(n):\\\\n    \\\\\"\\\\\"\\\\\"\\\\n    Calculate the factorial of a non-negative integer n.\\\\n    \\\\n    :param n: non-negative integer\\\\n    :return: factorial of n\\\\n    \\\\\"\\\\\"\\\\\"\\\\n    # Input validation\\\\n    if not isinstance(n, int):\\\\n        raise ValueError(\\\\\"Input must be an integer.\\\\\")\\\\n    if n &lt; 0:\\\\n        raise ValueError(\\\\\"Input must be a non-negative integer.\\\\\")\\\\n    \\\\n    # Base case\\\\n    if n == 0:\\\\n        return 1\\\\n    \\\\n    # Recursive case\\\\n    result = 1\\\\n    for i in range(1, n + 1):\\\\n        result *= i\\\\n    return result\\\\n\\\\n# Example usage\\\\ntry:\\\\n    print(factorial(5))  # Should print 120\\\\n    print(factorial(-1)) # Should raise a ValueError\\\\nexcept ValueError as e:\\\\n    print(e)\",\"cell_type\":\"code\"}'), tool_call_id='call_dP852a9HSFo4HgyvUTm6NtHd', part_kind='tool-call')], timestamp=datetime.datetime(2024, 12, 31, 13, 10, 44, tzinfo=datetime.timezone.utc), kind='response'),\n ModelRequest(parts=[ToolReturnPart(tool_name='create_cell', content='Created new code  with content: def factorial(n):\\n    \"\"\"\\n    Calculate the factorial of a non-negative integer n.\\n    \\n    :param n: non-negative integer\\n    :return: factorial of n\\n    \"\"\"\\n    # Input validation\\n    if not isinstance(n, int):\\n        raise ValueError(\"Input must be an integer.\")\\n    if n &lt; 0:\\n        raise ValueError(\"Input must be a non-negative integer.\")\\n    \\n    # Base case\\n    if n == 0:\\n        return 1\\n    \\n    # Recursive case\\n    result = 1\\n    for i in range(1, n + 1):\\n        result *= i\\n    return result\\n\\n# Example usage\\ntry:\\n    print(factorial(5))  # Should print 120\\n    print(factorial(-1)) # Should raise a ValueError\\nexcept ValueError as e:\\n    print(e)', tool_call_id='call_dP852a9HSFo4HgyvUTm6NtHd', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 47, 279330, tzinfo=datetime.timezone.utc), part_kind='tool-return')], kind='request'),\n ModelResponse(parts=[TextPart(content='I created a function that calculates the factorial of a number with input validation. You can test it in the new cell provided.', part_kind='text')], timestamp=datetime.datetime(2024, 12, 31, 13, 10, 48, tzinfo=datetime.timezone.utc), kind='response'),\n ModelRequest(parts=[UserPromptPart(content='So what you just made for me here?', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 48, 46240, tzinfo=datetime.timezone.utc), part_kind='user-prompt')], kind='request'),\n ModelResponse(parts=[TextPart(content=\"I created a Python function named `factorial` that calculates the factorial of a non-negative integer. The function includes input validation to ensure that the input is a non-negative integer. If the input is not an integer or is negative, the function raises a `ValueError` with an appropriate message. \\n\\nHere's a summary of the key parts of the code:\\n\\n- **Input Validation**: \\n  - Checks if `n` is an integer. If not, it raises a `ValueError`.\\n  - Checks if `n` is a non-negative integer. If `n` is negative, it raises a `ValueError`.\\n\\n- **Factorial Calculation**: \\n  - Uses an iterative approach to calculate the factorial.\\n  - Returns `1` if `n` is `0` (the factorial of 0 is 1).\\n  - Uses a for-loop to compute the factorial for positive integers.\\n\\n- **Example Usage**: \\n  - Demonstrates the function by calculating the factorial of 5.\\n  - Includes a try-except block to catch and print the error message if a `ValueError` is raised when computing the factorial of a negative number.\\n\\nYou can execute the cell to see how it works or modify it to test with other values.\", part_kind='text')], timestamp=datetime.datetime(2024, 12, 31, 13, 10, 48, tzinfo=datetime.timezone.utc), kind='response'),\n ModelRequest(parts=[UserPromptPart(content='Here is the context of new notebook cells that were added:\\nCell[15]:\\nSource:\\nresult = notebook_agent.run_sync(\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\')\\nMarkdown(result.data)\\nOutputs:\\n[{\\'data\\': {\\'text/markdown\\': [\\'I\\\\\\'ve created a new cell with a simple \"Hello, World!\" function. You can run it to see the output.\\'], \\'text/plain\\': [\\'&lt;IPython.core.display.Markdown object&gt;\\']}, \\'execution_count\\': 10, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]\\n\\nCell[16]:\\nSource:\\ndef hello_world():\\n    print(\"Hello, world!\")\\n\\nhello_world()\\nOutputs:\\n[]\\n\\nCell[17]:\\nSource:\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\nMarkdown(result.data)\\nOutputs:\\n[{\\'data\\': {\\'text/markdown\\': [\\'I have created a function to calculate the factorial of a number with input validation. You can test it by calling the `factorial` function with a non-negative integer as the argument.\\'], \\'text/plain\\': [\\'&lt;IPython.core.display.Markdown object&gt;\\']}, \\'execution_count\\': 12, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]\\n\\nCell[18]:\\nSource:\\ndef factorial(n):\\n    \"\"\"\\n    Calculate the factorial of a non-negative integer n.\\n\\n    Parameters:\\n    n (int): A non-negative integer whose factorial is to be computed\\n\\n    Returns:\\n    int: Factorial of the input number n\\n    \"\"\"\\n    # Input validation\\n    if not isinstance(n, int):\\n        raise TypeError(\"Input must be an integer\")\\n    if n &lt; 0:\\n        raise ValueError(\"Input must be a non-negative integer\")\\n\\n    # Base case: factorial of 0 is 1\\n    if n == 0:\\n        return 1\\n\\n    # Recursive case: n! = n * (n-1)!\\n    return n * factorial(n - 1)\\nOutputs:\\n[]\\n\\nCell[19]:\\nSource:\\nTesting agent with history\\nOutputs:\\nNone\\n\\nCell[20]:\\nSource:\\nresult = notebook_agent.run_sync(\\'So what you just made for me here?\\', message_history=result.new_messages())\\nMarkdown(result.data)\\nOutputs:\\n[{\\'data\\': {\\'text/markdown\\': [\\'I created a Python function named `factorial` that calculates the factorial of a non-negative integer. This function includes input validation to ensure that the input is a non-negative integer. If the input is not valid (i.e., not an integer or a negative integer), it raises a `ValueError`.\\\\n\\', \\'\\\\n\\', \"Here\\'s a summary of what the function does:\\\\n\", \\'- It checks if the input is an integer. If not, it raises a `ValueError`.\\\\n\\', \"- It checks if the input is a non-negative integer. If it\\'s negative, it raises a `ValueError`.\\\\n\", \\'- If the input is 0 or 1, it returns 1 (since 0! = 1! = 1).\\\\n\\', \\'- For other positive integers, it calculates the factorial by multiplying all integers from 2 up to the input number and returns the result.\\'], \\'text/plain\\': [\\'&lt;IPython.core.display.Markdown object&gt;\\']}, \\'execution_count\\': 14, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]\\n\\nCell[21]:\\nSource:\\nresult.all_messages()\\nOutputs:\\n[{\\'data\\': {\\'text/plain\\': [\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\nToday\\\\\\'s date is 2024-12-31.\\\\\\\\n\", part_kind=\\\\\\'system-prompt\\\\\\'), UserPromptPart(content=\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 28, 691513, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'user-prompt\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\'create_cell\\\\\\', args=ArgsJson(args_json=\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n with input validation.\\\\\\\\\\\\\\\\n    :param n: non-negative integer\\\\\\\\\\\\\\\\n    :return: factorial of n\\\\\\\\\\\\\\\\n    :raises ValueError: if n is not a non-negative integer\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\"Input must be an integer\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\"Input must be a non-negative integer\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n    if n == 0 or n == 1:\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\n    result = 1\\\\\\\\\\\\\\\\n    for i in range(2, n + 1):\\\\\\\\\\\\\\\\n        result *= i\\\\\\\\\\\\\\\\n    return result\",\"cell_type\":\"code\"}\\\\\\'), tool_call_id=\\\\\\'call_Iuc8vC4Y2axuMDvDh3TlF9mz\\\\\\', part_kind=\\\\\\'tool-call\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 29, tzinfo=datetime.timezone.utc), kind=\\\\\\'response\\\\\\'),\\\\n\\', \\' ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\'create_cell\\\\\\', content=\\\\\\'Created new code  with content: def factorial(n):\\\\\\\\n    \"\"\"\\\\\\\\n    Calculate the factorial of a non-negative integer n with input validation.\\\\\\\\n    :param n: non-negative integer\\\\\\\\n    :return: factorial of n\\\\\\\\n    :raises ValueError: if n is not a non-negative integer\\\\\\\\n    \"\"\"\\\\\\\\n    if not isinstance(n, int):\\\\\\\\n        raise ValueError(\"Input must be an integer\")\\\\\\\\n    if n &lt; 0:\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\n    if n == 0 or n == 1:\\\\\\\\n        return 1\\\\\\\\n    result = 1\\\\\\\\n    for i in range(2, n + 1):\\\\\\\\n        result *= i\\\\\\\\n    return result\\\\\\', tool_call_id=\\\\\\'call_Iuc8vC4Y2axuMDvDh3TlF9mz\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 32, 646314, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'tool-return\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \" ModelResponse(parts=[TextPart(content=\\'I have created a function to calculate the factorial of a number with input validation. You can test it by calling the `factorial` function with a non-negative integer as the argument.\\', part_kind=\\'text\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 33, tzinfo=datetime.timezone.utc), kind=\\'response\\'),\\\\n\", \" ModelRequest(parts=[UserPromptPart(content=\\'So what you just made for me here?\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 33, 948002, tzinfo=datetime.timezone.utc), part_kind=\\'user-prompt\\')], kind=\\'request\\'),\\\\n\", \\' ModelResponse(parts=[TextPart(content=\"I created a Python function named `factorial` that calculates the factorial of a non-negative integer. This function includes input validation to ensure that the input is a non-negative integer. If the input is not valid (i.e., not an integer or a negative integer), it raises a `ValueError`.\\\\\\\\n\\\\\\\\nHere\\\\\\'s a summary of what the function does:\\\\\\\\n- It checks if the input is an integer. If not, it raises a `ValueError`.\\\\\\\\n- It checks if the input is a non-negative integer. If it\\\\\\'s negative, it raises a `ValueError`.\\\\\\\\n- If the input is 0 or 1, it returns 1 (since 0! = 1! = 1).\\\\\\\\n- For other positive integers, it calculates the factorial by multiplying all integers from 2 up to the input number and returns the result.\", part_kind=\\\\\\'text\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 34, tzinfo=datetime.timezone.utc), kind=\\\\\\'response\\\\\\')]\\']}, \\'execution_count\\': 15, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]\\n\\nCell[22]:\\nSource:\\n\\nOutputs:\\nNone\\n\\nCell[23]:\\nSource:\\n### Adding notebook history\\nOutputs:\\nNone\\n\\nCell[24]:\\nSource:\\n#| export\\nimport os\\nimport json\\nfrom pathlib import Path\\nfrom typing import Optional, Dict, Any\\n\\n# Cache for notebook data\\n_notebook_cache: Dict[str, Any] = {}\\n\\ndef find_current_notebook() -&gt; Optional[dict]:\\n    \"\"\"Find and cache the current notebook data.\\n    \\n    Returns:\\n        Dict containing notebook data or None if not found\\n    \"\"\"\\n    global _notebook_cache\\n    \\n    try:\\n        ipython = get_ipython()\\n        if not ipython:\\n            return None\\n            \\n        # Get current cell content to identify the notebook\\n        current_cell = ipython.get_parent()[\\'content\\'][\\'code\\']\\n        \\n        # Check if we already found the notebook\\n        if \\'notebook\\' in _notebook_cache:\\n            # Verify it\\'s still the correct notebook by checking the current cell\\n            notebook = _notebook_cache[\\'notebook\\']\\n            for cell in notebook[\\'cells\\']:\\n                if (cell[\\'cell_type\\'] == \\'code\\' and \\n                    \\'\\'.join(cell[\\'source\\']) == current_cell):\\n                    return notebook\\n        \\n        # If not in cache or cache is invalid, search for the notebook\\n        current_dir = Path.cwd()\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\n        \\n        for nb_file in notebook_files:\\n            try:\\n                with open(nb_file) as f:\\n                    notebook = json.load(f)\\n                    for cell in notebook[\\'cells\\']:\\n                        if (cell[\\'cell_type\\'] == \\'code\\' and \\n                            \\'\\'.join(cell[\\'source\\']) == current_cell):\\n                            # Found the notebook, cache it\\n                            _notebook_cache[\\'notebook\\'] = notebook\\n                            _notebook_cache[\\'file\\'] = nb_file\\n                            return notebook\\n            except Exception:\\n                continue\\n                \\n        return None\\n        \\n    except Exception as e:\\n        print(f\"Error finding notebook: {e}\")\\n        return None\\n\\nOutputs:\\n[]\\n\\nCell[25]:\\nSource:\\n#| export\\nmax_lookback = 10\\n\\ndef get_notebook_history(max_cells: int = max_lookback) -&gt; list:\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\n    \\n    Args:\\n        max_cells: Maximum number of previous cells to include\\n        \\n    Returns:\\n        List of previous cell contents\\n    \"\"\"\\n    try:\\n        # Get the cached notebook or find it\\n        notebook = find_current_notebook()\\n        if not notebook:\\n            return []\\n            \\n        # Find current cell index\\n        current_cell = get_ipython().get_parent()[\\'content\\'][\\'code\\']\\n        cells = notebook[\\'cells\\']\\n        current_idx = -1\\n        last_prompt_idx = -1\\n        \\n        # Find current cell and last prompt cell\\n        for idx, cell in enumerate(cells):\\n            source = \\'\\'.join(cell[\\'source\\']) if isinstance(cell[\\'source\\'], list) else cell[\\'source\\']\\n            \\n            # Find current cell\\n            if current_idx == -1 and cell[\\'cell_type\\'] == \\'code\\' and source == current_cell:\\n                current_idx = idx\\n                \\n            # Find last prompt cell before current cell\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\n                if cell[\\'cell_type\\'] == \\'code\\' and source.strip().startswith(\\'%%prompt\\'):\\n                    last_prompt_idx = idx\\n                \\n        if current_idx == -1:\\n            return []\\n            \\n        # Get cells between last prompt and current cell\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\n        history = []\\n        \\n        for idx in range(start_idx, current_idx):\\n            cell = cells[idx]            \\n            source = cell[\\'source\\'] if isinstance(cell[\\'source\\'], str) else \\'\\'.join(cell[\\'source\\'])\\n            if \\'outputs\\' in cell:\\n                outputs = cell[\\'outputs\\'] if isinstance(cell[\\'outputs\\'], str) else str(cell[\\'outputs\\'])\\n            else:\\n                outputs = \\'None\\'\\n            if not (source.strip().startswith(\\'%%prompt\\') or outputs.strip().startswith(\\'#|exclude\\') or outputs.strip().startswith(\\'#| exclude\\')):\\n                history.append(f\"Cell[{idx}]:\\\\nSource:\\\\n{source}\\\\nOutputs:\\\\n{outputs}\")\\n        \\n        return history\\n        \\n    except Exception as e:\\n        print(f\"Error getting notebook history: {e}\")\\n        return []\\nOutputs:\\n[]\\n\\nCell[26]:\\nSource:\\nTesting notebook history\\nOutputs:\\nNone\\n\\nCell[27]:\\nSource:\\nnb_hist = get_notebook_history(max_cells=20)\\nnb_hist\\nOutputs:\\n[{\\'data\\': {\\'text/plain\\': [\"[\\'Cell[5]:\\\\\\\\nSource:\\\\\\\\nSystem prompt\\\\\\\\n\\\\\\\\nOutputs:\\\\\\\\nNone\\',\\\\n\", \\' \\\\\\'Cell[6]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nfrom datetime import date\\\\\\\\nsystem_prompt = f\"\"\"\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\nToday\\\\\\\\\\\\\\'s date is {date.today().strftime(\\\\\\\\\\\\\\'%Y-%m-%d\\\\\\\\\\\\\\')}.\\\\\\\\n\"\"\"\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\',\\\\n\\', \\' \"Cell[7]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nfrom typing import cast\\\\\\\\nmodel = cast(KnownModelName, os.getenv(\\\\\\'PYDANTIC_AI_MODEL\\\\\\', \\\\\\'openai:gpt-4o\\\\\\'))\\\\\\\\nprint(f\\\\\\'PydanticAI is using model: {model}\\\\\\')\\\\\\\\nnotebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\'name\\\\\\': \\\\\\'stdout\\\\\\', \\\\\\'output_type\\\\\\': \\\\\\'stream\\\\\\', \\\\\\'text\\\\\\': [\\\\\\'PydanticAI is using model: openai:gpt-4o\\\\\\\\\\\\\\\\n\\\\\\']}]\",\\\\n\\', \\' \\\\\\'Cell[8]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\n_current_agent: Optional[Agent] = None\\\\\\\\n\\\\\\\\ndef get_current_agent() -&gt; Agent:\\\\\\\\n    \"\"\"Get the current agent, falling back to default notebook_agent if none set.\"\"\"\\\\\\\\n    global _current_agent, notebook_agent\\\\\\\\n    return _current_agent or notebook_agent\\\\\\\\n\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\',\\\\n\\', \" \\'Cell[9]:\\\\\\\\nSource:\\\\\\\\n### Adding cell creation tool\\\\\\\\nOutputs:\\\\\\\\nNone\\',\\\\n\", \\' \\\\\\'Cell[10]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nfrom IPython.display import display, Markdown\\\\\\\\nfrom typing import Literal\\\\\\\\n\\\\\\\\n@notebook_agent.tool\\\\\\\\ndef create_cell(ctx: RunContext[str], content: str, cell_type: Literal[\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\'] = \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\') -&gt; str:\\\\\\\\n    \"\"\"Create a new cell in the notebook with the specified content.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        content: The content to put in the new cell\\\\\\\\n        cell_type: Type of cell to create (\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' or \\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\')\\\\\\\\n    \\\\\\\\n    Returns:\\\\\\\\n        A confirmation message\\\\\\\\n    \"\"\"\\\\\\\\n    try:    \\\\\\\\n        ipython = get_ipython()\\\\\\\\n    except NameError:\\\\\\\\n        return \"Error: Not running in IPython/Jupyter environment\"\\\\\\\\n    \\\\\\\\n    # Display the content immediately\\\\\\\\n    if cell_type == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\':\\\\\\\\n        # Set up the next cell with the content\\\\\\\\n        ipython.set_next_input(content)\\\\\\\\n    else:\\\\\\\\n        display(Markdown(content))\\\\\\\\n    \\\\\\\\n    return f\"Created new {cell_type}  with content: {content}\"\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\',\\\\n\\', \" \\'Cell[11]:\\\\\\\\nSource:\\\\\\\\nAlways set custom agents to have create_cell tool\\\\\\\\nOutputs:\\\\\\\\nNone\\',\\\\n\", \\' \\\\\\'Cell[12]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\ndef set_agent(agent: Agent) -&gt; Agent:\\\\\\\\n    \"\"\"Set a custom agent for the notebook.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        agent: PydanticAI agent instance\\\\\\\\n        \\\\\\\\n    Returns:\\\\\\\\n        Configured agent with required tools\\\\\\\\n    \"\"\"\\\\\\\\n    global _current_agent, notebook_agent\\\\\\\\n        \\\\\\\\n    # Always ensure create_cell tool is available\\\\\\\\n    if \\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\' not in agent._function_tools:\\\\\\\\n        # Copy the tool directly from notebook_agent\\\\\\\\n        agent._function_tools[\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\'] = notebook_agent._function_tools[\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\']\\\\\\\\n    \\\\\\\\n    _current_agent = agent\\\\\\\\n    return agent\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\',\\\\n\\', \" \\'Cell[13]:\\\\\\\\nSource:\\\\\\\\nTool testing\\\\\\\\nOutputs:\\\\\\\\nNone\\',\\\\n\", \\' \\\\\\'Cell[14]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\\\\\\\\\\\\\')\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a new code cell with a simple \"Hello, World!\" function. You can run the cell to see the output.\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 7, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\',\\\\n\\', \\' \"Cell[15]:\\\\\\\\nSource:\\\\\\\\ndef hello_world():\\\\\\\\n    print(\\\\\\'Hello, World!\\\\\\')\\\\\\\\n\\\\\\\\n# Call the function to display the output\\\\\\\\nhello_world()\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\'name\\\\\\': \\\\\\'stdout\\\\\\', \\\\\\'output_type\\\\\\': \\\\\\'stream\\\\\\', \\\\\\'text\\\\\\': [\\\\\\'Hello, World!\\\\\\\\\\\\\\\\n\\\\\\']}]\",\\\\n\\', \\' \\\\\\'Cell[16]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\'s environment.\"], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 9, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\',\\\\n\\', \\' \\\\\\'Cell[17]:\\\\\\\\nSource:\\\\\\\\ndef factorial(n):\\\\\\\\n    \"\"\"\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\n\\\\\\\\n    Parameters:\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\n\\\\\\\\n    Returns:\\\\\\\\n    int: Factorial of the input number n\\\\\\\\n    \"\"\"\\\\\\\\n    # Input validation\\\\\\\\n    if not isinstance(n, int):\\\\\\\\n        raise TypeError(\"Input must be an integer\")\\\\\\\\n    if n &lt; 0:\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\n\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\n    if n == 0:\\\\\\\\n        return 1\\\\\\\\n\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\n    return n * factorial(n - 1)\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\',\\\\n\\', \" \\'Cell[18]:\\\\\\\\nSource:\\\\\\\\nTesting agent with history\\\\\\\\nOutputs:\\\\\\\\nNone\\',\\\\n\", \\' \\\\\\'Cell[19]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', message_history=result.new_messages())\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\"I\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'To make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'```python\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'factorial(5)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'```\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'This would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 11, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\',\\\\n\\', \\' \\\\\\'Cell[20]:\\\\\\\\nSource:\\\\\\\\nresult.all_messages()\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is 2024-12-31.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 34, 458473, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', args=ArgsJson(args_json=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be an integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be a non-negative integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\",\"cell_type\":\"code\"}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-call\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 35, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\', content=\\\\\\\\\\\\\\'Created new code cell\\\\\\\\\\\\\\', tool_call_id=\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, 114822, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'tool-return\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 58, 747643, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTo make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfactorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nThis would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 59, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')]\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 12, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\',\\\\n\\', \" \\'Cell[21]:\\\\\\\\nSource:\\\\\\\\n### Adding notebook history\\\\\\\\nOutputs:\\\\\\\\nNone\\',\\\\n\", \\' \\\\\\'Cell[22]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nimport os\\\\\\\\nimport json\\\\\\\\nfrom pathlib import Path\\\\\\\\nfrom typing import Optional, Dict, Any\\\\\\\\n\\\\\\\\n# Cache for notebook data\\\\\\\\n_notebook_cache: Dict[str, Any] = {}\\\\\\\\n\\\\\\\\ndef find_current_notebook() -&gt; Optional[dict]:\\\\\\\\n    \"\"\"Find and cache the current notebook data.\\\\\\\\n    \\\\\\\\n    Returns:\\\\\\\\n        Dict containing notebook data or None if not found\\\\\\\\n    \"\"\"\\\\\\\\n    global _notebook_cache\\\\\\\\n    \\\\\\\\n    try:\\\\\\\\n        ipython = get_ipython()\\\\\\\\n        if not ipython:\\\\\\\\n            return None\\\\\\\\n            \\\\\\\\n        # Get current cell content to identify the notebook\\\\\\\\n        current_cell = ipython.get_parent()[\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\']\\\\\\\\n        \\\\\\\\n        # Check if we already found the notebook\\\\\\\\n        if \\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\' in _notebook_cache:\\\\\\\\n            # Verify it\\\\\\\\\\\\\\'s still the correct notebook by checking the current cell\\\\\\\\n            notebook = _notebook_cache[\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\']\\\\\\\\n            for cell in notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']:\\\\\\\\n                if (cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and \\\\\\\\n                    \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\n                    return notebook\\\\\\\\n        \\\\\\\\n        # If not in cache or cache is invalid, search for the notebook\\\\\\\\n        current_dir = Path.cwd()\\\\\\\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\\\\\\\n        \\\\\\\\n        for nb_file in notebook_files:\\\\\\\\n            try:\\\\\\\\n                with open(nb_file) as f:\\\\\\\\n                    notebook = json.load(f)\\\\\\\\n                    for cell in notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']:\\\\\\\\n                        if (cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and \\\\\\\\n                            \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\n                            # Found the notebook, cache it\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\'] = notebook\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\'file\\\\\\\\\\\\\\'] = nb_file\\\\\\\\n                            return notebook\\\\\\\\n            except Exception:\\\\\\\\n                continue\\\\\\\\n                \\\\\\\\n        return None\\\\\\\\n        \\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error finding notebook: {e}\")\\\\\\\\n        return None\\\\\\\\n\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\',\\\\n\\', \\' \\\\\\'Cell[23]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nmax_lookback = 10\\\\\\\\n\\\\\\\\ndef get_notebook_history(max_cells: int = max_lookback) -&gt; list:\\\\\\\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        max_cells: Maximum number of previous cells to include\\\\\\\\n        \\\\\\\\n    Returns:\\\\\\\\n        List of previous cell contents\\\\\\\\n    \"\"\"\\\\\\\\n    try:\\\\\\\\n        # Get the cached notebook or find it\\\\\\\\n        notebook = find_current_notebook()\\\\\\\\n        if not notebook:\\\\\\\\n            return []\\\\\\\\n            \\\\\\\\n        # Find current cell index\\\\\\\\n        current_cell = get_ipython().get_parent()[\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\']\\\\\\\\n        cells = notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']\\\\\\\\n        current_idx = -1\\\\\\\\n        last_prompt_idx = -1\\\\\\\\n        \\\\\\\\n        # Find current cell and last prompt cell\\\\\\\\n        for idx, cell in enumerate(cells):\\\\\\\\n            source = \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) if isinstance(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'], list) else cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']\\\\\\\\n            \\\\\\\\n            # Find current cell\\\\\\\\n            if current_idx == -1 and cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and source == current_cell:\\\\\\\\n                current_idx = idx\\\\\\\\n                \\\\\\\\n            # Find last prompt cell before current cell\\\\\\\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\\\\\\\n                if cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and source.strip().startswith(\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\'):\\\\\\\\n                    last_prompt_idx = idx\\\\\\\\n                \\\\\\\\n        if current_idx == -1:\\\\\\\\n            return []\\\\\\\\n            \\\\\\\\n        # Get cells between last prompt and current cell\\\\\\\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\\\\\\\n        history = []\\\\\\\\n        \\\\\\\\n        for idx in range(start_idx, current_idx):\\\\\\\\n            cell = cells[idx]            \\\\\\\\n            source = cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'])\\\\\\\\n            if \\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\' in cell:\\\\\\\\n                outputs = cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'], str) else str(cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'])\\\\\\\\n            else:\\\\\\\\n                outputs = \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\'\\\\\\\\n            if not (source.strip().startswith(\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\'#|exclude\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\'#| exclude\\\\\\\\\\\\\\')):\\\\\\\\n                history.append(f\"Cell[{idx}]:\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\n{source}\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\n{outputs}\")\\\\\\\\n        \\\\\\\\n        return history\\\\\\\\n        \\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error getting notebook history: {e}\")\\\\\\\\n        return []\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\',\\\\n\\', \" \\'Cell[24]:\\\\\\\\nSource:\\\\\\\\nTesting notebook history\\\\\\\\nOutputs:\\\\\\\\nNone\\']\"]}, \\'execution_count\\': 18, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]\\n\\nCell[28]:\\nSource:\\n### Creating history-aware prompt\\nOutputs:\\nNone\\n\\nCell[29]:\\nSource:\\n#| export\\ndef create_history_aware_prompt(prompt: str, message_history: list = None, max_history: int = 5) -&gt; tuple:\\n    \"\"\"Create a prompt with notebook history context and message history.\\n    \\n    Args:\\n        prompt: The user\\'s prompt\\n        message_history: Previous conversation messages from results.all_messages()\\n        max_history: Maximum number of previous cells to include\\n        \\n    Returns:\\n        Tuple of (enhanced prompt, combined message history)\\n    \"\"\"\\n    try:\\n        ipython = get_ipython()\\n        if not ipython:\\n            return prompt, message_history\\n        \\n        # Get new cells using our optimized get_notebook_history\\n        new_cells = get_notebook_history(max_cells=max_history)\\n        \\n        if not new_cells and not message_history:\\n            return prompt, None\\n            \\n        # Create message history if none exists\\n        from pydantic_ai.messages import (\\n            ModelRequest, ModelResponse, \\n            UserPromptPart, TextPart\\n        )\\n        \\n        messages = []\\n        \\n        # Add existing message history if provided\\n        if message_history:\\n            messages.extend(message_history)\\n        \\n        # Only add context message if we have new cells\\n        if new_cells:\\n            # Create context message with new cells\\n            history_content = \"\\\\n\\\\n\".join(new_cells)\\n\\n            context_msg = ModelRequest(parts=[\\n                UserPromptPart(\\n                    content=\"Here is the context of new notebook cells that were added:\\\\n\" + history_content\\n                )\\n            ])\\n            \\n            # Create response acknowledging new context\\n            context_response = ModelResponse(parts=[\\n                TextPart(\\n                    content=\"I understand the new notebook context. How can I help?\"\\n                )\\n            ])\\n            \\n            messages.extend([context_msg, context_response])\\n                \\n        return prompt, messages\\n        \\n    except Exception as e:\\n        print(f\"Error creating history-aware prompt: {e}\")\\n        return prompt, message_history\\nOutputs:\\n[]\\n\\nCell[30]:\\nSource:\\nTesting history-aware prompt\\nOutputs:\\nNone\\n\\nCell[31]:\\nSource:\\ncreate_history_aware_prompt(\\'So what you just made for me here?\\', result.all_messages(), max_history=20)\\nOutputs:\\n[{\\'data\\': {\\'text/plain\\': [\"(\\'So what you just made for me here?\\',\\\\n\", \\' [ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\nToday\\\\\\'s date is 2024-12-31.\\\\\\\\n\", part_kind=\\\\\\'system-prompt\\\\\\'), UserPromptPart(content=\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 28, 691513, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'user-prompt\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \\'  ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\'create_cell\\\\\\', args=ArgsJson(args_json=\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n with input validation.\\\\\\\\\\\\\\\\n    :param n: non-negative integer\\\\\\\\\\\\\\\\n    :return: factorial of n\\\\\\\\\\\\\\\\n    :raises ValueError: if n is not a non-negative integer\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\"Input must be an integer\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\"Input must be a non-negative integer\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n    if n == 0 or n == 1:\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\n    result = 1\\\\\\\\\\\\\\\\n    for i in range(2, n + 1):\\\\\\\\\\\\\\\\n        result *= i\\\\\\\\\\\\\\\\n    return result\",\"cell_type\":\"code\"}\\\\\\'), tool_call_id=\\\\\\'call_Iuc8vC4Y2axuMDvDh3TlF9mz\\\\\\', part_kind=\\\\\\'tool-call\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 29, tzinfo=datetime.timezone.utc), kind=\\\\\\'response\\\\\\'),\\\\n\\', \\'  ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\'create_cell\\\\\\', content=\\\\\\'Created new code  with content: def factorial(n):\\\\\\\\n    \"\"\"\\\\\\\\n    Calculate the factorial of a non-negative integer n with input validation.\\\\\\\\n    :param n: non-negative integer\\\\\\\\n    :return: factorial of n\\\\\\\\n    :raises ValueError: if n is not a non-negative integer\\\\\\\\n    \"\"\"\\\\\\\\n    if not isinstance(n, int):\\\\\\\\n        raise ValueError(\"Input must be an integer\")\\\\\\\\n    if n &lt; 0:\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\n    if n == 0 or n == 1:\\\\\\\\n        return 1\\\\\\\\n    result = 1\\\\\\\\n    for i in range(2, n + 1):\\\\\\\\n        result *= i\\\\\\\\n    return result\\\\\\', tool_call_id=\\\\\\'call_Iuc8vC4Y2axuMDvDh3TlF9mz\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 32, 646314, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'tool-return\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \"  ModelResponse(parts=[TextPart(content=\\'I have created a function to calculate the factorial of a number with input validation. You can test it by calling the `factorial` function with a non-negative integer as the argument.\\', part_kind=\\'text\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 33, tzinfo=datetime.timezone.utc), kind=\\'response\\'),\\\\n\", \"  ModelRequest(parts=[UserPromptPart(content=\\'So what you just made for me here?\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 33, 948002, tzinfo=datetime.timezone.utc), part_kind=\\'user-prompt\\')], kind=\\'request\\'),\\\\n\", \\'  ModelResponse(parts=[TextPart(content=\"I created a Python function named `factorial` that calculates the factorial of a non-negative integer. This function includes input validation to ensure that the input is a non-negative integer. If the input is not valid (i.e., not an integer or a negative integer), it raises a `ValueError`.\\\\\\\\n\\\\\\\\nHere\\\\\\'s a summary of what the function does:\\\\\\\\n- It checks if the input is an integer. If not, it raises a `ValueError`.\\\\\\\\n- It checks if the input is a non-negative integer. If it\\\\\\'s negative, it raises a `ValueError`.\\\\\\\\n- If the input is 0 or 1, it returns 1 (since 0! = 1! = 1).\\\\\\\\n- For other positive integers, it calculates the factorial by multiplying all integers from 2 up to the input number and returns the result.\", part_kind=\\\\\\'text\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 34, tzinfo=datetime.timezone.utc), kind=\\\\\\'response\\\\\\'),\\\\n\\', \\'  ModelRequest(parts=[UserPromptPart(content=\\\\\\'Here is the context of new notebook cells that were added:\\\\\\\\nCell[9]:\\\\\\\\nSource:\\\\\\\\n### Adding cell creation tool\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[10]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nfrom IPython.display import display, Markdown\\\\\\\\nfrom typing import Literal\\\\\\\\n\\\\\\\\n@notebook_agent.tool\\\\\\\\ndef create_cell(ctx: RunContext[str], content: str, cell_type: Literal[\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\'] = \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\') -&gt; str:\\\\\\\\n    \"\"\"Create a new cell in the notebook with the specified content.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        content: The content to put in the new cell\\\\\\\\n        cell_type: Type of cell to create (\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' or \\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\')\\\\\\\\n    \\\\\\\\n    Returns:\\\\\\\\n        A confirmation message\\\\\\\\n    \"\"\"\\\\\\\\n    try:    \\\\\\\\n        ipython = get_ipython()\\\\\\\\n    except NameError:\\\\\\\\n        return \"Error: Not running in IPython/Jupyter environment\"\\\\\\\\n    \\\\\\\\n    # Display the content immediately\\\\\\\\n    if cell_type == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\':\\\\\\\\n        # Set up the next cell with the content\\\\\\\\n        ipython.set_next_input(content)\\\\\\\\n    else:\\\\\\\\n        display(Markdown(content))\\\\\\\\n    \\\\\\\\n    return f\"Created new {cell_type}  with content: {content}\"\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[11]:\\\\\\\\nSource:\\\\\\\\nAlways set custom agents to have create_cell tool\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[12]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\ndef set_agent(agent: Agent) -&gt; Agent:\\\\\\\\n    \"\"\"Set a custom agent for the notebook.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        agent: PydanticAI agent instance\\\\\\\\n        \\\\\\\\n    Returns:\\\\\\\\n        Configured agent with required tools\\\\\\\\n    \"\"\"\\\\\\\\n    global _current_agent, notebook_agent\\\\\\\\n        \\\\\\\\n    # Always ensure create_cell tool is available\\\\\\\\n    if \\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\' not in agent._function_tools:\\\\\\\\n        # Copy the tool directly from notebook_agent\\\\\\\\n        agent._function_tools[\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\'] = notebook_agent._function_tools[\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\']\\\\\\\\n    \\\\\\\\n    _current_agent = agent\\\\\\\\n    return agent\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[13]:\\\\\\\\nSource:\\\\\\\\nTool testing\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[14]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\\\\\\\\\\\\\')\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a new code cell with a simple \"Hello, World!\" function. You can run the cell to see the output.\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 7, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[15]:\\\\\\\\nSource:\\\\\\\\ndef hello_world():\\\\\\\\n    print(\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\')\\\\\\\\n\\\\\\\\n# Call the function to display the output\\\\\\\\nhello_world()\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'text\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\']}]\\\\\\\\n\\\\\\\\nCell[16]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\'s environment.\"], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 9, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[17]:\\\\\\\\nSource:\\\\\\\\ndef factorial(n):\\\\\\\\n    \"\"\"\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\n\\\\\\\\n    Parameters:\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\n\\\\\\\\n    Returns:\\\\\\\\n    int: Factorial of the input number n\\\\\\\\n    \"\"\"\\\\\\\\n    # Input validation\\\\\\\\n    if not isinstance(n, int):\\\\\\\\n        raise TypeError(\"Input must be an integer\")\\\\\\\\n    if n &lt; 0:\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\n\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\n    if n == 0:\\\\\\\\n        return 1\\\\\\\\n\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\n    return n * factorial(n - 1)\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[18]:\\\\\\\\nSource:\\\\\\\\nTesting agent with history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[19]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', message_history=result.new_messages())\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\"I\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'To make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'```python\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'factorial(5)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'```\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'This would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 11, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[20]:\\\\\\\\nSource:\\\\\\\\nresult.all_messages()\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is 2024-12-31.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 34, 458473, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', args=ArgsJson(args_json=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be an integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be a non-negative integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\",\"cell_type\":\"code\"}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-call\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 35, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\', content=\\\\\\\\\\\\\\'Created new code cell\\\\\\\\\\\\\\', tool_call_id=\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, 114822, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'tool-return\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 58, 747643, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTo make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfactorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nThis would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 59, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')]\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 12, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[21]:\\\\\\\\nSource:\\\\\\\\n### Adding notebook history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[22]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nimport os\\\\\\\\nimport json\\\\\\\\nfrom pathlib import Path\\\\\\\\nfrom typing import Optional, Dict, Any\\\\\\\\n\\\\\\\\n# Cache for notebook data\\\\\\\\n_notebook_cache: Dict[str, Any] = {}\\\\\\\\n\\\\\\\\ndef find_current_notebook() -&gt; Optional[dict]:\\\\\\\\n    \"\"\"Find and cache the current notebook data.\\\\\\\\n    \\\\\\\\n    Returns:\\\\\\\\n        Dict containing notebook data or None if not found\\\\\\\\n    \"\"\"\\\\\\\\n    global _notebook_cache\\\\\\\\n    \\\\\\\\n    try:\\\\\\\\n        ipython = get_ipython()\\\\\\\\n        if not ipython:\\\\\\\\n            return None\\\\\\\\n            \\\\\\\\n        # Get current cell content to identify the notebook\\\\\\\\n        current_cell = ipython.get_parent()[\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\']\\\\\\\\n        \\\\\\\\n        # Check if we already found the notebook\\\\\\\\n        if \\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\' in _notebook_cache:\\\\\\\\n            # Verify it\\\\\\\\\\\\\\'s still the correct notebook by checking the current cell\\\\\\\\n            notebook = _notebook_cache[\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\']\\\\\\\\n            for cell in notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']:\\\\\\\\n                if (cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and \\\\\\\\n                    \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\n                    return notebook\\\\\\\\n        \\\\\\\\n        # If not in cache or cache is invalid, search for the notebook\\\\\\\\n        current_dir = Path.cwd()\\\\\\\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\\\\\\\n        \\\\\\\\n        for nb_file in notebook_files:\\\\\\\\n            try:\\\\\\\\n                with open(nb_file) as f:\\\\\\\\n                    notebook = json.load(f)\\\\\\\\n                    for cell in notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']:\\\\\\\\n                        if (cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and \\\\\\\\n                            \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\n                            # Found the notebook, cache it\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\'] = notebook\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\'file\\\\\\\\\\\\\\'] = nb_file\\\\\\\\n                            return notebook\\\\\\\\n            except Exception:\\\\\\\\n                continue\\\\\\\\n                \\\\\\\\n        return None\\\\\\\\n        \\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error finding notebook: {e}\")\\\\\\\\n        return None\\\\\\\\n\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[23]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nmax_lookback = 10\\\\\\\\n\\\\\\\\ndef get_notebook_history(max_cells: int = max_lookback) -&gt; list:\\\\\\\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        max_cells: Maximum number of previous cells to include\\\\\\\\n        \\\\\\\\n    Returns:\\\\\\\\n        List of previous cell contents\\\\\\\\n    \"\"\"\\\\\\\\n    try:\\\\\\\\n        # Get the cached notebook or find it\\\\\\\\n        notebook = find_current_notebook()\\\\\\\\n        if not notebook:\\\\\\\\n            return []\\\\\\\\n            \\\\\\\\n        # Find current cell index\\\\\\\\n        current_cell = get_ipython().get_parent()[\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\']\\\\\\\\n        cells = notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']\\\\\\\\n        current_idx = -1\\\\\\\\n        last_prompt_idx = -1\\\\\\\\n        \\\\\\\\n        # Find current cell and last prompt cell\\\\\\\\n        for idx, cell in enumerate(cells):\\\\\\\\n            source = \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) if isinstance(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'], list) else cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']\\\\\\\\n            \\\\\\\\n            # Find current cell\\\\\\\\n            if current_idx == -1 and cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and source == current_cell:\\\\\\\\n                current_idx = idx\\\\\\\\n                \\\\\\\\n            # Find last prompt cell before current cell\\\\\\\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\\\\\\\n                if cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and source.strip().startswith(\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\'):\\\\\\\\n                    last_prompt_idx = idx\\\\\\\\n                \\\\\\\\n        if current_idx == -1:\\\\\\\\n            return []\\\\\\\\n            \\\\\\\\n        # Get cells between last prompt and current cell\\\\\\\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\\\\\\\n        history = []\\\\\\\\n        \\\\\\\\n        for idx in range(start_idx, current_idx):\\\\\\\\n            cell = cells[idx]            \\\\\\\\n            source = cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'])\\\\\\\\n            if \\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\' in cell:\\\\\\\\n                outputs = cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'], str) else str(cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'])\\\\\\\\n            else:\\\\\\\\n                outputs = \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\'\\\\\\\\n            if not (source.strip().startswith(\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\'#|exclude\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\'#| exclude\\\\\\\\\\\\\\')):\\\\\\\\n                history.append(f\"Cell[{idx}]:\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\n{source}\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\n{outputs}\")\\\\\\\\n        \\\\\\\\n        return history\\\\\\\\n        \\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error getting notebook history: {e}\")\\\\\\\\n        return []\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[24]:\\\\\\\\nSource:\\\\\\\\nTesting notebook history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[25]:\\\\\\\\nSource:\\\\\\\\nnb_hist = get_notebook_history(max_cells=20)\\\\\\\\nnb_hist\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\"[\\\\\\\\\\\\\\'Cell[3]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom dotenv import load_dotenv\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic import BaseModel, Field\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic_ai import Agent, ModelRetry, RunContext\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic_ai.models import KnownModelName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nload_dotenv()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Enable async/await in Jupyter\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport nest_asyncio\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnest_asyncio.apply()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\'Cell[4]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Agent setup\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\'Cell[5]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSystem prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[6]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom datetime import date\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nsystem_prompt = f\"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is {date.today().strftime(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%Y-%m-%d\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')}.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \"Cell[7]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import cast\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nmodel = cast(KnownModelName, os.getenv(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PYDANTIC_AI_MODEL\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'openai:gpt-4o\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nprint(f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PydanticAI is using model: {model}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnotebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PydanticAI is using model: openai:gpt-4o\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\",\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[8]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef refresh_agent():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    notebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\'Cell[9]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n### Adding cell creation tool\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[10]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom IPython.display import display, Markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Literal\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n@notebook_agent.tool\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef create_cell(ctx: RunContext[str], content: str, cell_type: Literal[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') -&gt; str:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Create a new cell in the notebook with the specified content.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        content: The content to put in the new cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cell_type: Type of cell to create (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' or \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        A confirmation message\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except NameError:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return \"Error: Not running in IPython/Jupyter environment\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Display the content immediately\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if cell_type == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\':\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # display(Markdown(f\"```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{content}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Set up the next cell with the content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython.set_next_input(content)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    else:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        display(Markdown(content))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return f\"Created new {cell_type} cell\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stderr\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;module&gt;:8: No type or annotation for returned value 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[11]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTool testing\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[12]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a new code cell with a simple \"Hello, World!\" function. You can run the cell to see the output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 7, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \"Cell[13]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef hello_world():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Call the function to display the output\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nhello_world()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\",\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[14]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\"], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 9, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[15]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\"Input must be an integer\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[16]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTesting agent with history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[17]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', message_history=result.new_messages())\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'To make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'factorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'This would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 11, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[18]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult.all_messages()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is 2024-12-31.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 34, 458473, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', args=ArgsJson(args_json=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nn    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nn    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be an integern    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be a non-negative integern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\",\"cell_type\":\"code\"}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-call\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 35, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Created new code cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, 114822, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-return\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 58, 747643, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTo make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfactorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nThis would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 59, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 12, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[19]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n### Adding notebook history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[20]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pathlib import Path\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Optional, Dict, Any\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Cache for notebook data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n_notebook_cache: Dict[str, Any] = {}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef find_current_notebook() -&gt; Optional[dict]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Find and cache the current notebook data.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        Dict containing notebook data or None if not found\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global _notebook_cache\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not ipython:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get current cell content to identify the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = ipython.get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Check if we already found the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' in _notebook_cache:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Verify it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s still the correct notebook by checking the current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            notebook = _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # If not in cache or cache is invalid, search for the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_dir = Path.cwd()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for nb_file in notebook_files:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                with open(nb_file) as f:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    notebook = json.load(f)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                        if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            # Found the notebook, cache it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = nb_file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            except Exception:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                continue\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error finding notebook: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[21]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef get_notebook_history(max_cells: int = 5) -&gt; list:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        max_cells: Maximum number of previous cells to include\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        List of previous cell contents\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get the cached notebook or find it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook = find_current_notebook()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not notebook:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell index\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = get_ipython().get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cells = notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        last_prompt_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell and last prompt cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx, cell in enumerate(cells):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            source = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], list) else cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if current_idx == -1 and cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source == current_cell:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                current_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find last prompt cell before current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    last_prompt_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if current_idx == -1:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get cells between last prompt and current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        history = []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx in range(start_idx, current_idx):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            cell = cells[idx]            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            source = cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            outputs = cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if not (source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'#|exclude\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                history.append(f\"Cell[{idx}]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{source}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{outputs}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error getting notebook history: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[22]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTesting notebook history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\']\"]}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 28, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[26]:\\\\\\\\nSource:\\\\\\\\n### Creating history-aware prompt\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[27]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\ndef create_history_aware_prompt(prompt: str, message_history: list = None, max_history: int = 5) -&gt; tuple:\\\\\\\\n    \"\"\"Create a prompt with notebook history context and message history.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        prompt: The user\\\\\\\\\\\\\\'s prompt\\\\\\\\n        message_history: Previous conversation messages from results.all_messages()\\\\\\\\n        max_history: Maximum number of previous cells to include\\\\\\\\n        \\\\\\\\n    Returns:\\\\\\\\n        Tuple of (enhanced prompt, combined message history)\\\\\\\\n    \"\"\"\\\\\\\\n    try:\\\\\\\\n        ipython = get_ipython()\\\\\\\\n        if not ipython:\\\\\\\\n            return prompt, message_history\\\\\\\\n        \\\\\\\\n        # Get new cells using our optimized get_notebook_history\\\\\\\\n        new_cells = get_notebook_history(max_cells=max_history)\\\\\\\\n        \\\\\\\\n        if not new_cells and not message_history:\\\\\\\\n            return prompt, None\\\\\\\\n            \\\\\\\\n        # Create message history if none exists\\\\\\\\n        from pydantic_ai.messages import (\\\\\\\\n            ModelRequest, ModelResponse, \\\\\\\\n            UserPromptPart, TextPart\\\\\\\\n        )\\\\\\\\n        \\\\\\\\n        messages = []\\\\\\\\n        \\\\\\\\n        # Add existing message history if provided\\\\\\\\n        if message_history:\\\\\\\\n            messages.extend(message_history)\\\\\\\\n        \\\\\\\\n        # Only add context message if we have new cells\\\\\\\\n        if new_cells:\\\\\\\\n            # Create context message with new cells\\\\\\\\n            history_content = \"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\".join(new_cells)\\\\\\\\n\\\\\\\\n            context_msg = ModelRequest(parts=[\\\\\\\\n                UserPromptPart(\\\\\\\\n                    content=\"Here is the context of new notebook cells that were added:\\\\\\\\\\\\\\\\n\" + history_content\\\\\\\\n                )\\\\\\\\n            ])\\\\\\\\n            \\\\\\\\n            # Create response acknowledging new context\\\\\\\\n            context_response = ModelResponse(parts=[\\\\\\\\n                TextPart(\\\\\\\\n                    content=\"I understand the new notebook context. How can I help?\"\\\\\\\\n                )\\\\\\\\n            ])\\\\\\\\n            \\\\\\\\n            messages.extend([context_msg, context_response])\\\\\\\\n                \\\\\\\\n        return prompt, messages\\\\\\\\n        \\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error creating history-aware prompt: {e}\")\\\\\\\\n        return prompt, message_history\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[28]:\\\\\\\\nSource:\\\\\\\\nTesting history-aware prompt\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 37, 899389, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'user-prompt\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \"  ModelResponse(parts=[TextPart(content=\\'I understand the new notebook context. How can I help?\\', part_kind=\\'text\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 37, 899406, tzinfo=datetime.timezone.utc), kind=\\'response\\')])\"]}, \\'execution_count\\': 20, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]\\n\\nCell[32]:\\nSource:\\n### Running agent with notebook history\\nOutputs:\\nNone\\n\\nCell[33]:\\nSource:\\n#| export\\nfrom typing import Any\\ndef run_with_history(agent: Agent, prompt: str, message_history: list = None, max_history: int = 5) -&gt; Any:\\n    \"\"\"Run the agent with notebook and conversation history context.\\n    \\n    Args:\\n        agent: The PydanticAI agent\\n        prompt: The user\\'s prompt\\n        message_history: Previous conversation messages\\n        max_history: Maximum number of previous cells to include\\n        \\n    Returns:\\n        Agent run result\\n    \"\"\"\\n    prompt, combined_history = create_history_aware_prompt(\\n        prompt, \\n        message_history=message_history, \\n        max_history=max_history\\n    )\\n    return agent.run_sync(prompt, message_history=combined_history)\\nOutputs:\\n[]\\n\\nCell[34]:\\nSource:\\nTesting run_with_history\\nOutputs:\\nNone', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 52, 423920, tzinfo=datetime.timezone.utc), part_kind='user-prompt')], kind='request'),\n ModelResponse(parts=[TextPart(content='I understand the new notebook context. How can I help?', part_kind='text')], timestamp=datetime.datetime(2024, 12, 31, 13, 10, 52, 423939, tzinfo=datetime.timezone.utc), kind='response'),\n ModelRequest(parts=[UserPromptPart(content='So what is going on in this notebook?', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 52, 424177, tzinfo=datetime.timezone.utc), part_kind='user-prompt')], kind='request'),\n ModelResponse(parts=[TextPart(content='This notebook appears to involve creating, running, and testing an AI-powered assistant, possibly using a tool like Pydantic AI for Jupyter notebooks. Here\\'s a breakdown of the key components and activities happening in this notebook:\\n\\n1. **Setup and Imports**: \\n   - The notebook is set up with various imports from libraries and definitions of system prompts to prepare the AI agent to assist within a Jupyter environment.\\n\\n2. **Agent Configuration**: \\n   - An AI agent (likely PydanticAI or a similar framework) is configured with a model and system prompts to guide its behavior within the notebook.\\n\\n3. **Tool and Function Definitions**: \\n   - Several functions and tools are defined, including `create_cell`, which allows new cells to be programmatically added to the notebook.\\n\\n4. **Notebook Agent Execution**:\\n   - The AI agent is used to execute commands. Examples include requests to create a \"Hello, World!\" function and a factorial function with input validation.\\n\\n5. **Function Implementation**:\\n   - Functions like `hello_world()` and `factorial()` are defined as part of this process. The `factorial` function includes input validation and uses recursion to calculate factorials.\\n\\n6. **Notebook History and Prompt Management**:\\n   - There are methods for capturing the history of cell executions and creating context-aware prompts that consider both the current notebook state and any previous interactions or commands.\\n\\n7. **Execution Testing**:\\n   - Various cells are used to test the system, ensure that functionality is operating correctly, and demonstrate the capabilities of the conversational agent in a Jupyter context.\\n\\n8. **Error Handling and Validation**:\\n   - The notebook handles potential errors (e.g., invalid inputs for the factorial function) and various elements of cell execution and output display.\\n\\n9. **History Creation and Contextual Responses**:\\n   - An advanced feature is the creation of context-aware prompts that adapt based on the content and history of the notebook, indicating a sophisticated interaction system between user inputs and the agent‚Äôs responses.\\n\\nIn summary, the notebook combines Jupyter\\'s interactive capabilities with an AI-driven agent to assist with tasks, automatically manage notebook content, and potentially perform more complex logical operations based on the commands or tasks provided by the user.', part_kind='text')], timestamp=datetime.datetime(2024, 12, 31, 13, 10, 53, tzinfo=datetime.timezone.utc), kind='response')]\n\n\n\n\n\n\nsource\n\n\n\n\n prompt (line, cell)\n\nCell magic to create prompt cells that interact with the AI agent.\n\nwhat this notebook is all about?\n\nThis notebook appears to be part of a system that uses an AI agent to automate tasks within a Jupyter notebook. Here are some key points:\n\nAI Agent Integration: The notebook is integrating a Pydantic AI model, specifically an agent that seems to respond to prompts and perform tasks within the notebook environment.\nFunction Definitions: Several Python functions have been defined:\n\nfactorial(): This function calculates the factorial of a number with input validation.\nhello_world(): A simple function that prints ‚ÄúHello, World!‚Äù.\n\nCell Creation and Management: There are functions and tools implemented to create and manage notebook cells programmatically. For example, the create_cell function uses the IPython‚Äôs API to insert new cells.\nNotebook History Management: The notebook implements functionality to keep track of the history of executed notebook cells, which can be used to provide context to the AI agent.\nHistory-Aware Prompts: Functions like create_history_aware_prompt are used to create prompts that include historical context from the notebook. This allows the AI to make more informed decisions by understanding previous interactions and code.\nTesting and Execution: The notebook includes cells dedicated to testing these features, like running the agent with notebook history and testing the factorial function.\n\nOverall, it seems to be an experimental setup aiming to enhance interaction with a Jupyter notebook using AI for improved productivity and dynamic task execution.\n\n\n\nlast_prompt_result.all_messages()\n\n[ModelRequest(parts=[UserPromptPart(content='Here is the context of new notebook cells that were added:\\nCell[36]:\\nSource:\\nresult.all_messages()\\nOutputs:\\n[{\\'data\\': {\\'text/plain\\': [\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\nToday\\\\\\'s date is 2024-12-31.\\\\\\\\n\", part_kind=\\\\\\'system-prompt\\\\\\'), UserPromptPart(content=\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 28, 691513, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'user-prompt\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\'create_cell\\\\\\', args=ArgsJson(args_json=\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n with input validation.\\\\\\\\\\\\\\\\n    :param n: non-negative integer\\\\\\\\\\\\\\\\n    :return: factorial of n\\\\\\\\\\\\\\\\n    :raises ValueError: if n is not a non-negative integer\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\"Input must be an integer\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\"Input must be a non-negative integer\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n    if n == 0 or n == 1:\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\n    result = 1\\\\\\\\\\\\\\\\n    for i in range(2, n + 1):\\\\\\\\\\\\\\\\n        result *= i\\\\\\\\\\\\\\\\n    return result\",\"cell_type\":\"code\"}\\\\\\'), tool_call_id=\\\\\\'call_Iuc8vC4Y2axuMDvDh3TlF9mz\\\\\\', part_kind=\\\\\\'tool-call\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 29, tzinfo=datetime.timezone.utc), kind=\\\\\\'response\\\\\\'),\\\\n\\', \\' ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\'create_cell\\\\\\', content=\\\\\\'Created new code  with content: def factorial(n):\\\\\\\\n    \"\"\"\\\\\\\\n    Calculate the factorial of a non-negative integer n with input validation.\\\\\\\\n    :param n: non-negative integer\\\\\\\\n    :return: factorial of n\\\\\\\\n    :raises ValueError: if n is not a non-negative integer\\\\\\\\n    \"\"\"\\\\\\\\n    if not isinstance(n, int):\\\\\\\\n        raise ValueError(\"Input must be an integer\")\\\\\\\\n    if n &lt; 0:\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\n    if n == 0 or n == 1:\\\\\\\\n        return 1\\\\\\\\n    result = 1\\\\\\\\n    for i in range(2, n + 1):\\\\\\\\n        result *= i\\\\\\\\n    return result\\\\\\', tool_call_id=\\\\\\'call_Iuc8vC4Y2axuMDvDh3TlF9mz\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 32, 646314, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'tool-return\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \" ModelResponse(parts=[TextPart(content=\\'I have created a function to calculate the factorial of a number with input validation. You can test it by calling the `factorial` function with a non-negative integer as the argument.\\', part_kind=\\'text\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 33, tzinfo=datetime.timezone.utc), kind=\\'response\\'),\\\\n\", \" ModelRequest(parts=[UserPromptPart(content=\\'So what you just made for me here?\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 33, 948002, tzinfo=datetime.timezone.utc), part_kind=\\'user-prompt\\')], kind=\\'request\\'),\\\\n\", \\' ModelResponse(parts=[TextPart(content=\"I created a Python function named `factorial` that calculates the factorial of a non-negative integer. This function includes input validation to ensure that the input is a non-negative integer. If the input is not valid (i.e., not an integer or a negative integer), it raises a `ValueError`.\\\\\\\\n\\\\\\\\nHere\\\\\\'s a summary of what the function does:\\\\\\\\n- It checks if the input is an integer. If not, it raises a `ValueError`.\\\\\\\\n- It checks if the input is a non-negative integer. If it\\\\\\'s negative, it raises a `ValueError`.\\\\\\\\n- If the input is 0 or 1, it returns 1 (since 0! = 1! = 1).\\\\\\\\n- For other positive integers, it calculates the factorial by multiplying all integers from 2 up to the input number and returns the result.\", part_kind=\\\\\\'text\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 34, tzinfo=datetime.timezone.utc), kind=\\\\\\'response\\\\\\'),\\\\n\\', \\' ModelRequest(parts=[UserPromptPart(content=\\\\\\'Here is the context of new notebook cells that were added:\\\\\\\\nCell[13]:\\\\\\\\nSource:\\\\\\\\nTool testing\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[14]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\\\\\\\\\\\\\')\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a new code cell with a simple \"Hello, World!\" function. You can run the cell to see the output.\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 7, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[15]:\\\\\\\\nSource:\\\\\\\\ndef hello_world():\\\\\\\\n    print(\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\')\\\\\\\\n\\\\\\\\n# Call the function to display the output\\\\\\\\nhello_world()\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'text\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\']}]\\\\\\\\n\\\\\\\\nCell[16]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\'s environment.\"], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 9, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[17]:\\\\\\\\nSource:\\\\\\\\ndef factorial(n):\\\\\\\\n    \"\"\"\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\n\\\\\\\\n    Parameters:\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\n\\\\\\\\n    Returns:\\\\\\\\n    int: Factorial of the input number n\\\\\\\\n    \"\"\"\\\\\\\\n    # Input validation\\\\\\\\n    if not isinstance(n, int):\\\\\\\\n        raise TypeError(\"Input must be an integer\")\\\\\\\\n    if n &lt; 0:\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\n\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\n    if n == 0:\\\\\\\\n        return 1\\\\\\\\n\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\n    return n * factorial(n - 1)\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[18]:\\\\\\\\nSource:\\\\\\\\nTesting agent with history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[19]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', message_history=result.new_messages())\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\"I\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'To make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'```python\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'factorial(5)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'```\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'This would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 11, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[20]:\\\\\\\\nSource:\\\\\\\\nresult.all_messages()\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is 2024-12-31.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 34, 458473, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', args=ArgsJson(args_json=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be an integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be a non-negative integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\",\"cell_type\":\"code\"}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-call\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 35, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\', content=\\\\\\\\\\\\\\'Created new code cell\\\\\\\\\\\\\\', tool_call_id=\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, 114822, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'tool-return\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 58, 747643, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTo make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfactorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nThis would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 59, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')]\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 12, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[21]:\\\\\\\\nSource:\\\\\\\\n### Adding notebook history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[22]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nimport os\\\\\\\\nimport json\\\\\\\\nfrom pathlib import Path\\\\\\\\nfrom typing import Optional, Dict, Any\\\\\\\\n\\\\\\\\n# Cache for notebook data\\\\\\\\n_notebook_cache: Dict[str, Any] = {}\\\\\\\\n\\\\\\\\ndef find_current_notebook() -&gt; Optional[dict]:\\\\\\\\n    \"\"\"Find and cache the current notebook data.\\\\\\\\n    \\\\\\\\n    Returns:\\\\\\\\n        Dict containing notebook data or None if not found\\\\\\\\n    \"\"\"\\\\\\\\n    global _notebook_cache\\\\\\\\n    \\\\\\\\n    try:\\\\\\\\n        ipython = get_ipython()\\\\\\\\n        if not ipython:\\\\\\\\n            return None\\\\\\\\n            \\\\\\\\n        # Get current cell content to identify the notebook\\\\\\\\n        current_cell = ipython.get_parent()[\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\']\\\\\\\\n        \\\\\\\\n        # Check if we already found the notebook\\\\\\\\n        if \\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\' in _notebook_cache:\\\\\\\\n            # Verify it\\\\\\\\\\\\\\'s still the correct notebook by checking the current cell\\\\\\\\n            notebook = _notebook_cache[\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\']\\\\\\\\n            for cell in notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']:\\\\\\\\n                if (cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and \\\\\\\\n                    \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\n                    return notebook\\\\\\\\n        \\\\\\\\n        # If not in cache or cache is invalid, search for the notebook\\\\\\\\n        current_dir = Path.cwd()\\\\\\\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\\\\\\\n        \\\\\\\\n        for nb_file in notebook_files:\\\\\\\\n            try:\\\\\\\\n                with open(nb_file) as f:\\\\\\\\n                    notebook = json.load(f)\\\\\\\\n                    for cell in notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']:\\\\\\\\n                        if (cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and \\\\\\\\n                            \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\n                            # Found the notebook, cache it\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\'] = notebook\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\'file\\\\\\\\\\\\\\'] = nb_file\\\\\\\\n                            return notebook\\\\\\\\n            except Exception:\\\\\\\\n                continue\\\\\\\\n                \\\\\\\\n        return None\\\\\\\\n        \\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error finding notebook: {e}\")\\\\\\\\n        return None\\\\\\\\n\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[23]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nmax_lookback = 10\\\\\\\\n\\\\\\\\ndef get_notebook_history(max_cells: int = max_lookback) -&gt; list:\\\\\\\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        max_cells: Maximum number of previous cells to include\\\\\\\\n        \\\\\\\\n    Returns:\\\\\\\\n        List of previous cell contents\\\\\\\\n    \"\"\"\\\\\\\\n    try:\\\\\\\\n        # Get the cached notebook or find it\\\\\\\\n        notebook = find_current_notebook()\\\\\\\\n        if not notebook:\\\\\\\\n            return []\\\\\\\\n            \\\\\\\\n        # Find current cell index\\\\\\\\n        current_cell = get_ipython().get_parent()[\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\']\\\\\\\\n        cells = notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']\\\\\\\\n        current_idx = -1\\\\\\\\n        last_prompt_idx = -1\\\\\\\\n        \\\\\\\\n        # Find current cell and last prompt cell\\\\\\\\n        for idx, cell in enumerate(cells):\\\\\\\\n            source = \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) if isinstance(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'], list) else cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']\\\\\\\\n            \\\\\\\\n            # Find current cell\\\\\\\\n            if current_idx == -1 and cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and source == current_cell:\\\\\\\\n                current_idx = idx\\\\\\\\n                \\\\\\\\n            # Find last prompt cell before current cell\\\\\\\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\\\\\\\n                if cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and source.strip().startswith(\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\'):\\\\\\\\n                    last_prompt_idx = idx\\\\\\\\n                \\\\\\\\n        if current_idx == -1:\\\\\\\\n            return []\\\\\\\\n            \\\\\\\\n        # Get cells between last prompt and current cell\\\\\\\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\\\\\\\n        history = []\\\\\\\\n        \\\\\\\\n        for idx in range(start_idx, current_idx):\\\\\\\\n            cell = cells[idx]            \\\\\\\\n            source = cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'])\\\\\\\\n            if \\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\' in cell:\\\\\\\\n                outputs = cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'], str) else str(cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'])\\\\\\\\n            else:\\\\\\\\n                outputs = \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\'\\\\\\\\n            if not (source.strip().startswith(\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\'#|exclude\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\'#| exclude\\\\\\\\\\\\\\')):\\\\\\\\n                history.append(f\"Cell[{idx}]:\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\n{source}\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\n{outputs}\")\\\\\\\\n        \\\\\\\\n        return history\\\\\\\\n        \\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error getting notebook history: {e}\")\\\\\\\\n        return []\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[24]:\\\\\\\\nSource:\\\\\\\\nTesting notebook history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[25]:\\\\\\\\nSource:\\\\\\\\nnb_hist = get_notebook_history(max_cells=20)\\\\\\\\nnb_hist\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\"[\\\\\\\\\\\\\\'Cell[3]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom dotenv import load_dotenv\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic import BaseModel, Field\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic_ai import Agent, ModelRetry, RunContext\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic_ai.models import KnownModelName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nload_dotenv()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Enable async/await in Jupyter\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport nest_asyncio\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnest_asyncio.apply()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\'Cell[4]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Agent setup\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\'Cell[5]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSystem prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[6]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom datetime import date\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nsystem_prompt = f\"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is {date.today().strftime(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%Y-%m-%d\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')}.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \"Cell[7]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import cast\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nmodel = cast(KnownModelName, os.getenv(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PYDANTIC_AI_MODEL\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'openai:gpt-4o\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nprint(f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PydanticAI is using model: {model}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnotebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PydanticAI is using model: openai:gpt-4o\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\",\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[8]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef refresh_agent():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    notebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\'Cell[9]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n### Adding cell creation tool\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[10]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom IPython.display import display, Markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Literal\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n@notebook_agent.tool\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef create_cell(ctx: RunContext[str], content: str, cell_type: Literal[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') -&gt; str:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Create a new cell in the notebook with the specified content.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        content: The content to put in the new cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cell_type: Type of cell to create (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' or \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        A confirmation message\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except NameError:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return \"Error: Not running in IPython/Jupyter environment\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Display the content immediately\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if cell_type == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\':\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # display(Markdown(f\"```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{content}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Set up the next cell with the content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython.set_next_input(content)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    else:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        display(Markdown(content))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return f\"Created new {cell_type} cell\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stderr\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;module&gt;:8: No type or annotation for returned value 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[11]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTool testing\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[12]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a new code cell with a simple \"Hello, World!\" function. You can run the cell to see the output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 7, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \"Cell[13]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef hello_world():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Call the function to display the output\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nhello_world()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\",\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[14]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\"], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 9, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[15]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\"Input must be an integer\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[16]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTesting agent with history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[17]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', message_history=result.new_messages())\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'To make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'factorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'This would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 11, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[18]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult.all_messages()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is 2024-12-31.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 34, 458473, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', args=ArgsJson(args_json=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nn    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nn    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be an integern    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be a non-negative integern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\",\"cell_type\":\"code\"}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-call\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 35, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Created new code cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, 114822, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-return\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 58, 747643, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTo make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfactorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nThis would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 59, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 12, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[19]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n### Adding notebook history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[20]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pathlib import Path\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Optional, Dict, Any\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Cache for notebook data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n_notebook_cache: Dict[str, Any] = {}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef find_current_notebook() -&gt; Optional[dict]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Find and cache the current notebook data.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        Dict containing notebook data or None if not found\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global _notebook_cache\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not ipython:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get current cell content to identify the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = ipython.get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Check if we already found the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' in _notebook_cache:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Verify it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s still the correct notebook by checking the current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            notebook = _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # If not in cache or cache is invalid, search for the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_dir = Path.cwd()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for nb_file in notebook_files:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                with open(nb_file) as f:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    notebook = json.load(f)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                        if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            # Found the notebook, cache it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = nb_file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            except Exception:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                continue\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error finding notebook: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[21]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef get_notebook_history(max_cells: int = 5) -&gt; list:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        max_cells: Maximum number of previous cells to include\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        List of previous cell contents\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get the cached notebook or find it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook = find_current_notebook()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not notebook:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell index\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = get_ipython().get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cells = notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        last_prompt_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell and last prompt cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx, cell in enumerate(cells):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            source = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], list) else cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if current_idx == -1 and cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source == current_cell:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                current_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find last prompt cell before current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    last_prompt_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if current_idx == -1:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get cells between last prompt and current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        history = []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx in range(start_idx, current_idx):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            cell = cells[idx]            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            source = cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            outputs = cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if not (source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'#|exclude\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                history.append(f\"Cell[{idx}]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{source}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{outputs}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error getting notebook history: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[22]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTesting notebook history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\']\"]}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 28, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[26]:\\\\\\\\nSource:\\\\\\\\n### Creating history-aware prompt\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[27]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\ndef create_history_aware_prompt(prompt: str, message_history: list = None, max_history: int = 5) -&gt; tuple:\\\\\\\\n    \"\"\"Create a prompt with notebook history context and message history.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        prompt: The user\\\\\\\\\\\\\\'s prompt\\\\\\\\n        message_history: Previous conversation messages from results.all_messages()\\\\\\\\n        max_history: Maximum number of previous cells to include\\\\\\\\n        \\\\\\\\n    Returns:\\\\\\\\n        Tuple of (enhanced prompt, combined message history)\\\\\\\\n    \"\"\"\\\\\\\\n    try:\\\\\\\\n        ipython = get_ipython()\\\\\\\\n        if not ipython:\\\\\\\\n            return prompt, message_history\\\\\\\\n        \\\\\\\\n        # Get new cells using our optimized get_notebook_history\\\\\\\\n        new_cells = get_notebook_history(max_cells=max_history)\\\\\\\\n        \\\\\\\\n        if not new_cells and not message_history:\\\\\\\\n            return prompt, None\\\\\\\\n            \\\\\\\\n        # Create message history if none exists\\\\\\\\n        from pydantic_ai.messages import (\\\\\\\\n            ModelRequest, ModelResponse, \\\\\\\\n            UserPromptPart, TextPart\\\\\\\\n        )\\\\\\\\n        \\\\\\\\n        messages = []\\\\\\\\n        \\\\\\\\n        # Add existing message history if provided\\\\\\\\n        if message_history:\\\\\\\\n            messages.extend(message_history)\\\\\\\\n        \\\\\\\\n        # Only add context message if we have new cells\\\\\\\\n        if new_cells:\\\\\\\\n            # Create context message with new cells\\\\\\\\n            history_content = \"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\".join(new_cells)\\\\\\\\n\\\\\\\\n            context_msg = ModelRequest(parts=[\\\\\\\\n                UserPromptPart(\\\\\\\\n                    content=\"Here is the context of new notebook cells that were added:\\\\\\\\\\\\\\\\n\" + history_content\\\\\\\\n                )\\\\\\\\n            ])\\\\\\\\n            \\\\\\\\n            # Create response acknowledging new context\\\\\\\\n            context_response = ModelResponse(parts=[\\\\\\\\n                TextPart(\\\\\\\\n                    content=\"I understand the new notebook context. How can I help?\"\\\\\\\\n                )\\\\\\\\n            ])\\\\\\\\n            \\\\\\\\n            messages.extend([context_msg, context_response])\\\\\\\\n                \\\\\\\\n        return prompt, messages\\\\\\\\n        \\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error creating history-aware prompt: {e}\")\\\\\\\\n        return prompt, message_history\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[28]:\\\\\\\\nSource:\\\\\\\\nTesting history-aware prompt\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[29]:\\\\\\\\nSource:\\\\\\\\ncreate_history_aware_prompt(\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', result.all_messages(), max_history=20)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\"(\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' [ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is 2024-12-31.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 34, 458473, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'  ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', args=ArgsJson(args_json=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be an integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be a non-negative integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\",\"cell_type\":\"code\"}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-call\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 35, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \"  ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\', content=\\\\\\\\\\\\\\'Created new code cell\\\\\\\\\\\\\\', tool_call_id=\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, 114822, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'tool-return\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'  ModelResponse(parts=[TextPart(content=\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \"  ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 58, 747643, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'  ModelResponse(parts=[TextPart(content=\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTo make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfactorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nThis would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 59, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'  ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Here is the context of new notebook cells that were added:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[7]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import cast\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nmodel = cast(KnownModelName, os.getenv(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PYDANTIC_AI_MODEL\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'openai:gpt-4o\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nprint(f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PydanticAI is using model: {model}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnotebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PydanticAI is using model: openai:gpt-4o\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[8]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef refresh_agent():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    notebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[9]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n### Adding cell creation tool\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[10]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom IPython.display import display, Markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Literal\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n@notebook_agent.tool\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef create_cell(ctx: RunContext[str], content: str, cell_type: Literal[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') -&gt; str:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Create a new cell in the notebook with the specified content.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        content: The content to put in the new cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cell_type: Type of cell to create (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' or \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        A confirmation message\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except NameError:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return \"Error: Not running in IPython/Jupyter environment\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Display the content immediately\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if cell_type == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\':\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # display(Markdown(f\"```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{content}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Set up the next cell with the content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython.set_next_input(content)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    else:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        display(Markdown(content))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return f\"Created new {cell_type} cell\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stderr\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;module&gt;:8: No type or annotation for returned value 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[11]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTool testing\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[12]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a new code cell with a simple \"Hello, World!\" function. You can run the cell to see the output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 7, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[13]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef hello_world():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Call the function to display the output\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nhello_world()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[14]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\"], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 9, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[15]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\"Input must be an integer\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[16]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTesting agent with history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[17]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', message_history=result.new_messages())\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'To make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'factorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'This would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 11, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[18]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult.all_messages()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is 2024-12-31.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 34, 458473, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', args=ArgsJson(args_json=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nn    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be an integern    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be a non-negative integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\",\"cell_type\":\"code\"}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-call\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 35, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Created new code cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, 114822, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-return\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 58, 747643, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTo make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfactorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nThis would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 59, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 12, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[19]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n### Adding notebook history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[20]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pathlib import Path\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Optional, Dict, Any\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Cache for notebook data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n_notebook_cache: Dict[str, Any] = {}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef find_current_notebook() -&gt; Optional[dict]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Find and cache the current notebook data.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        Dict containing notebook data or None if not found\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global _notebook_cache\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not ipython:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get current cell content to identify the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = ipython.get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Check if we already found the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' in _notebook_cache:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Verify it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s still the correct notebook by checking the current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            notebook = _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # If not in cache or cache is invalid, search for the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_dir = Path.cwd()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for nb_file in notebook_files:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                with open(nb_file) as f:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    notebook = json.load(f)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                        if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            # Found the notebook, cache it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = nb_file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            except Exception:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                continue\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error finding notebook: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[21]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef get_notebook_history(max_cells: int = 5) -&gt; list:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        max_cells: Maximum number of previous cells to include\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        List of previous cell contents\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get the cached notebook or find it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook = find_current_notebook()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not notebook:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell index\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = get_ipython().get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cells = notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        last_prompt_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell and last prompt cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx, cell in enumerate(cells):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            source = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], list) else cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if current_idx == -1 and cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source == current_cell:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                current_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find last prompt cell before current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    last_prompt_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if current_idx == -1:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get cells between last prompt and current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        history = []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx in range(start_idx, current_idx):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            cell = cells[idx]            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            source = cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            outputs = cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if not (source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'#|exclude\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                history.append(f\"Cell[{idx}]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{source}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{outputs}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error getting notebook history: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[22]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTesting notebook history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[23]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnb_hist = get_notebook_history(max_cells=20)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnb_hist\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\"[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[0]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| default_exp core\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[1]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| hide\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom nbdev.showdoc import *\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[2]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom dotenv import load_dotenv\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic import BaseModel, Field\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic_ai import Agent, ModelRetry, RunContext\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic_ai.models import KnownModelName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nload_dotenv()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Enable async/await in Jupyter\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport nest_asyncio\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnest_asyncio.apply()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[3]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom datetime import date\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nsystem_prompt = f\"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is {date.today().strftime(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%Y-%m-%d\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')}.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \"Cell[4]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import cast\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nmodel = cast(KnownModelName, os.getenv(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PYDANTIC_AI_MODEL\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'openai:gpt-4o\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nprint(f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PydanticAI is using model: {model}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnotebook_agent = Agent(model, system_prompt=system_prompt)\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[5]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef refresh_agent():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    notebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[6]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom IPython.display import display, Markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Literal\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n@notebook_agent.tool\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef create_cell(ctx: RunContext[str], content: str, cell_type: Literal[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'codemarkdowncode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') -&gt; str:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Create a new cell in the notebook with the specified content.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        content: The content to put in the new cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cell_type: Type of cell to create (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' or \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        A confirmation message\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except NameError:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return \"Error: Not running in IPython/Jupyter environment\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Display the content immediately\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if cell_type == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\':\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # display(Markdown(f\"```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{content}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Set up the next cell with the content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython.set_next_input(content)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    else:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        display(Markdown(content))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return f\"Created new {cell_type} cell\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \"Cell[7]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \"Cell[8]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef hello_world():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Call the function to display the output\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nhello_world()\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[9]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[10]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef factorial(number):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation to check if the number is a non-negative integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(number, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\"Input must be an integer.\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if number &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer.\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 or 1 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if number == 0 or number == 1:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    else:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return number * factorial(number - 1)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Example usage\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nprint(factorial(5))  # Output: 120\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nprint(factorial(0))  # Output: 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Uncomment the following lines to test input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# print(factorial(-1))  # Should raise ValueError\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# print(factorial(3.5))  # Should raise ValueError\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \"Cell[11]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', message_history=result.new_messages())\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[12]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult.all_messages()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[13]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pathlib import Path\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Optional, Dict, Any\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Cache for notebook data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n_notebook_cache: Dict[str, Any] = {}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef find_current_notebook() -&gt; Optional[dict]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Find and cache the current notebook data.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        Dict containing notebook data or None if not found\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global _notebook_cache\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not ipython:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get current cell content to identify the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = ipython.get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'contentcode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Check if we already found the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' in _notebook_cache:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Verify it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s still the correct notebook by checking the current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            notebook = _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_typecode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # If not in cache or cache is invalid, search for the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_dir = Path.cwd()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for nb_file in notebook_files:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                with open(nb_file) as f:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    notebook = json.load(f)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                        if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_typecode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\njoin(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            # Found the notebook, cache it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = nb_file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            except Exception:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                continue\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error finding notebook: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[14]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef get_notebook_history(max_cells: int = 5) -&gt; list:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        max_cells: Maximum number of previous cells to include\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        List of previous cell contents\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get the cached notebook or find it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook = find_current_notebook()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not notebook:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell index\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = get_ipython().get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'contentcode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cells = notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        last_prompt_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell and last prompt cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx, cell in enumerate(cells):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            sourcejoin(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], list) else cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if current_idx == -1 and cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_typecode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source == current_cell:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                current_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find last prompt cell before current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_typecode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    last_prompt_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if current_idx == -1:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get cells between last prompt and current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        history = []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx in range(start_idx, current_idx):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            cell = cells[idx]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_typecode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\':  # Only include code cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                # Skip cells that are prompt cells and nbdev directives\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                source = cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], str) elsejoin(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if not source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    history.append(f\"Cell[{idx}]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{source}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error getting notebook history: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 58, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[24]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n### Creating history-aware prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[25]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef create_history_aware_prompt(prompt: str, message_history: list = None, max_history: int = 5) -&gt; tuple:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Create a prompt with notebook history context and message history.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        prompt: The user\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        message_history: Previous conversation messages from results.all_messages()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        max_history: Maximum number of previous cells to include\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        Tuple of (enhanced prompt, combined message history)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not ipython:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return prompt, message_history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get new cells using our optimized get_notebook_history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        new_cells = get_notebook_history(max_cells=max_history)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not new_cells and not message_history:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return prompt, None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Create message history if none exists\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        from pydantic_ai.messages import (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            ModelRequest, ModelResponse, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            UserPromptPart, TextPart\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        messages = []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Add existing message history if provided\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if message_history:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            messages.extend(message_history)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Only add context message if we have new cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if new_cells:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Create context message with new cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            history_content = \"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\".join(new_cells)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            context_msg = ModelRequest(parts=[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                UserPromptPart(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    content=\"Here is the context of new notebook cells that were added:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\" + history_content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            ])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Create response acknowledging new context\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            context_response = ModelResponse(parts=[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                TextPart(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    content=\"I understand the new notebook context. How can I help?\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            ])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            messages.extend([context_msg, context_response])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return prompt, messages\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error creating history-aware prompt: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return prompt, message_history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[26]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTesting history-aware prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 26, 5, 737496, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \"  ModelResponse(parts=[TextPart(content=\\\\\\\\\\\\\\'I understand the new notebook context. How can I help?\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 26, 5, 737510, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\')])\"]}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 30, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[30]:\\\\\\\\nSource:\\\\\\\\n### Running agent with notebook history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[31]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nfrom typing import Any\\\\\\\\ndef run_with_history(agent: Agent, prompt: str, message_history: list = None, max_history: int = 5) -&gt; Any:\\\\\\\\n    \"\"\"Run the agent with notebook and conversation history context.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        agent: The PydanticAI agent\\\\\\\\n        prompt: The user\\\\\\\\\\\\\\'s prompt\\\\\\\\n        message_history: Previous conversation messages\\\\\\\\n        max_history: Maximum number of previous cells to include\\\\\\\\n        \\\\\\\\n    Returns:\\\\\\\\n        Agent run result\\\\\\\\n    \"\"\"\\\\\\\\n    prompt, combined_history = create_history_aware_prompt(\\\\\\\\n        prompt, \\\\\\\\n        message_history=message_history, \\\\\\\\n        max_history=max_history\\\\\\\\n    )\\\\\\\\n    return agent.run_sync(prompt, message_history=combined_history)\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[32]:\\\\\\\\nSource:\\\\\\\\nTesting run_with_history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 37, 976699, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'user-prompt\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \" ModelResponse(parts=[TextPart(content=\\'I understand the new notebook context. How can I help?\\', part_kind=\\'text\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 37, 976722, tzinfo=datetime.timezone.utc), kind=\\'response\\'),\\\\n\", \" ModelRequest(parts=[UserPromptPart(content=\\'So what is going on in this notebook?\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 37, 976975, tzinfo=datetime.timezone.utc), part_kind=\\'user-prompt\\')], kind=\\'request\\'),\\\\n\", \\' ModelResponse(parts=[TextPart(content=\\\\\\'This notebook appears to be part of a system that uses an AI agent to automate tasks within a Jupyter notebook. Here are some key points:\\\\\\\\n\\\\\\\\n1. **AI Agent Integration**: The notebook is integrating a Pydantic AI model, specifically an agent that seems to respond to prompts and perform tasks within the notebook environment.\\\\\\\\n\\\\\\\\n2. **Function Definitions**: Several Python functions have been defined:\\\\\\\\n   - `factorial()`: This function calculates the factorial of a number with input validation.\\\\\\\\n   - `hello_world()`: A simple function that prints \"Hello, World!\".\\\\\\\\n   \\\\\\\\n3. **Cell Creation and Management**: There are functions and tools implemented to create and manage notebook cells programmatically. For example, the `create_cell` function uses the IPython\\\\\\\\\\\\\\'s API to insert new cells.\\\\\\\\n\\\\\\\\n4. **Notebook History Management**: The notebook implements functionality to keep track of the history of executed notebook cells, which can be used to provide context to the AI agent.\\\\\\\\n\\\\\\\\n5. **History-Aware Prompts**: Functions like `create_history_aware_prompt` are used to create prompts that include historical context from the notebook. This allows the AI to make more informed decisions by understanding previous interactions and code.\\\\\\\\n\\\\\\\\n6. **Testing and Execution**: The notebook includes cells dedicated to testing these features, like running the agent with notebook history and testing the factorial function.\\\\\\\\n\\\\\\\\nOverall, it seems to be an experimental setup aiming to enhance interaction with a Jupyter notebook using AI for improved productivity and dynamic task execution.\\\\\\', part_kind=\\\\\\'text\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 39, tzinfo=datetime.timezone.utc), kind=\\\\\\'response\\\\\\')]\\']}, \\'execution_count\\': 23, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]\\n\\nCell[37]:\\nSource:\\n#| export\\n@notebook_agent.tool\\ndef modify_cell(ctx: RunContext[str], cell_index: int, content: str) -&gt; str:\\n    \"\"\"Modify an existing cell in the notebook.\\n    \\n    Args:\\n        cell_index: The index of the cell to modify\\n        content: The new content for the cell\\n        \\n    Returns:\\n        A confirmation message\\n    \"\"\"\\n    try:\\n        notebook = find_current_notebook()\\n        if not notebook:\\n            return \"Error: Could not find current notebook\"\\n            \\n        cells = notebook[\\'cells\\']\\n        if cell_index &lt; 0 or cell_index &gt;= len(cells):\\n            return f\"Error: Cell index {cell_index} is out of range\"\\n            \\n        # Get the cell\\n        cell = cells[cell_index]\\n        \\n        # Update the cell content in IPython\\n        ipython = get_ipython()\\n        if not ipython:\\n            return \"Error: Not running in IPython environment\"\\n            \\n        # Set the content of the specified cell\\n        ipython.set_next_input(content, replace=True)\\n        \\n        return f\"Modified cell {cell_index} with new content\"\\n        \\n    except Exception as e:\\n        return f\"Error modifying cell: {str(e)}\"\\nOutputs:\\n[{\\'name\\': \\'stderr\\', \\'output_type\\': \\'stream\\', \\'text\\': [\\'&lt;module&gt;:8: No type or annotation for returned value 1\\\\n\\']}, {\\'ename\\': \\'UserError\\', \\'evalue\\': \"Tool name conflicts with existing tool: \\'modify_cell\\'\", \\'output_type\\': \\'error\\', \\'traceback\\': [\\'\\\\x1b[0;31m---------------------------------------------------------------------------\\\\x1b[0m\\', \\'\\\\x1b[0;31mUserError\\\\x1b[0m                                 Traceback (most recent call last)\\', \\'Cell \\\\x1b[0;32mIn[42], line 2\\\\x1b[0m\\\\n\\\\x1b[1;32m      1\\\\x1b[0m \\\\x1b[38;5;66;03m#| export\\\\x1b[39;00m\\\\n\\\\x1b[0;32m----&gt; 2\\\\x1b[0m \\\\x1b[38;5;129;43m@notebook_agent\\\\x1b[39;49m\\\\x1b[38;5;241;43m.\\\\x1b[39;49m\\\\x1b[43mtool\\\\x1b[49m\\\\n\\\\x1b[1;32m      3\\\\x1b[0m \\\\x1b[38;5;28;43;01mdef\\\\x1b[39;49;00m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;21;43mmodify_cell\\\\x1b[39;49m\\\\x1b[43m(\\\\x1b[49m\\\\x1b[43mctx\\\\x1b[49m\\\\x1b[43m:\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[43mRunContext\\\\x1b[49m\\\\x1b[43m[\\\\x1b[49m\\\\x1b[38;5;28;43mstr\\\\x1b[39;49m\\\\x1b[43m]\\\\x1b[49m\\\\x1b[43m,\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[43mcell_index\\\\x1b[49m\\\\x1b[43m:\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;28;43mint\\\\x1b[39;49m\\\\x1b[43m,\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[43mcontent\\\\x1b[49m\\\\x1b[43m:\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;28;43mstr\\\\x1b[39;49m\\\\x1b[43m)\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;241;43m-\\\\x1b[39;49m\\\\x1b[38;5;241;43m&gt;\\\\x1b[39;49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;28;43mstr\\\\x1b[39;49m\\\\x1b[43m:\\\\x1b[49m\\\\n\\\\x1b[1;32m      4\\\\x1b[0m \\\\x1b[38;5;250;43m    \\\\x1b[39;49m\\\\x1b[38;5;124;43;03m\"\"\"Modify an existing cell in the notebook.\\\\x1b[39;49;00m\\\\n\\\\x1b[1;32m      5\\\\x1b[0m \\\\x1b[38;5;124;43;03m    \\\\x1b[39;49;00m\\\\n\\\\x1b[1;32m      6\\\\x1b[0m \\\\x1b[38;5;124;43;03m    Args:\\\\x1b[39;49;00m\\\\n\\\\x1b[0;32m   (...)\\\\x1b[0m\\\\n\\\\x1b[1;32m     11\\\\x1b[0m \\\\x1b[38;5;124;43;03m        A confirmation message\\\\x1b[39;49;00m\\\\n\\\\x1b[1;32m     12\\\\x1b[0m \\\\x1b[38;5;124;43;03m    \"\"\"\\\\x1b[39;49;00m\\\\n\\\\x1b[1;32m     13\\\\x1b[0m \\\\x1b[43m    \\\\x1b[49m\\\\x1b[38;5;28;43;01mtry\\\\x1b[39;49;00m\\\\x1b[43m:\\\\x1b[49m\\\\n\\', \\'File \\\\x1b[0;32m~/WebDev/FH_SQLModel/.venv/lib/python3.12/site-packages/pydantic_ai/agent.py:683\\\\x1b[0m, in \\\\x1b[0;36mAgent.tool\\\\x1b[0;34m(self, func, retries, prepare)\\\\x1b[0m\\\\n\\\\x1b[1;32m    680\\\\x1b[0m     \\\\x1b[38;5;28;01mreturn\\\\x1b[39;00m tool_decorator\\\\n\\\\x1b[1;32m    681\\\\x1b[0m \\\\x1b[38;5;28;01melse\\\\x1b[39;00m:\\\\n\\\\x1b[1;32m    682\\\\x1b[0m     \\\\x1b[38;5;66;03m# noinspection PyTypeChecker\\\\x1b[39;00m\\\\n\\\\x1b[0;32m--&gt; 683\\\\x1b[0m     \\\\x1b[38;5;28;43mself\\\\x1b[39;49m\\\\x1b[38;5;241;43m.\\\\x1b[39;49m\\\\x1b[43m_register_function\\\\x1b[49m\\\\x1b[43m(\\\\x1b[49m\\\\x1b[43mfunc\\\\x1b[49m\\\\x1b[43m,\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;28;43;01mTrue\\\\x1b[39;49;00m\\\\x1b[43m,\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[43mretries\\\\x1b[49m\\\\x1b[43m,\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[43mprepare\\\\x1b[49m\\\\x1b[43m)\\\\x1b[49m\\\\n\\\\x1b[1;32m    684\\\\x1b[0m     \\\\x1b[38;5;28;01mreturn\\\\x1b[39;00m func\\\\n\\', \\'File \\\\x1b[0;32m~/WebDev/FH_SQLModel/.venv/lib/python3.12/site-packages/pydantic_ai/agent.py:765\\\\x1b[0m, in \\\\x1b[0;36mAgent._register_function\\\\x1b[0;34m(self, func, takes_ctx, retries, prepare)\\\\x1b[0m\\\\n\\\\x1b[1;32m    763\\\\x1b[0m retries_ \\\\x1b[38;5;241m=\\\\x1b[39m retries \\\\x1b[38;5;28;01mif\\\\x1b[39;00m retries \\\\x1b[38;5;129;01mis\\\\x1b[39;00m \\\\x1b[38;5;129;01mnot\\\\x1b[39;00m \\\\x1b[38;5;28;01mNone\\\\x1b[39;00m \\\\x1b[38;5;28;01melse\\\\x1b[39;00m \\\\x1b[38;5;28mself\\\\x1b[39m\\\\x1b[38;5;241m.\\\\x1b[39m_default_retries\\\\n\\\\x1b[1;32m    764\\\\x1b[0m tool \\\\x1b[38;5;241m=\\\\x1b[39m Tool(func, takes_ctx\\\\x1b[38;5;241m=\\\\x1b[39mtakes_ctx, max_retries\\\\x1b[38;5;241m=\\\\x1b[39mretries_, prepare\\\\x1b[38;5;241m=\\\\x1b[39mprepare)\\\\n\\\\x1b[0;32m--&gt; 765\\\\x1b[0m \\\\x1b[38;5;28;43mself\\\\x1b[39;49m\\\\x1b[38;5;241;43m.\\\\x1b[39;49m\\\\x1b[43m_register_tool\\\\x1b[49m\\\\x1b[43m(\\\\x1b[49m\\\\x1b[43mtool\\\\x1b[49m\\\\x1b[43m)\\\\x1b[49m\\\\n\\', \"File \\\\x1b[0;32m~/WebDev/FH_SQLModel/.venv/lib/python3.12/site-packages/pydantic_ai/agent.py:774\\\\x1b[0m, in \\\\x1b[0;36mAgent._register_tool\\\\x1b[0;34m(self, tool)\\\\x1b[0m\\\\n\\\\x1b[1;32m    771\\\\x1b[0m     tool \\\\x1b[38;5;241m=\\\\x1b[39m dataclasses\\\\x1b[38;5;241m.\\\\x1b[39mreplace(tool, max_retries\\\\x1b[38;5;241m=\\\\x1b[39m\\\\x1b[38;5;28mself\\\\x1b[39m\\\\x1b[38;5;241m.\\\\x1b[39m_default_retries)\\\\n\\\\x1b[1;32m    773\\\\x1b[0m \\\\x1b[38;5;28;01mif\\\\x1b[39;00m tool\\\\x1b[38;5;241m.\\\\x1b[39mname \\\\x1b[38;5;129;01min\\\\x1b[39;00m \\\\x1b[38;5;28mself\\\\x1b[39m\\\\x1b[38;5;241m.\\\\x1b[39m_function_tools:\\\\n\\\\x1b[0;32m--&gt; 774\\\\x1b[0m     \\\\x1b[38;5;28;01mraise\\\\x1b[39;00m exceptions\\\\x1b[38;5;241m.\\\\x1b[39mUserError(\\\\x1b[38;5;124mf\\\\x1b[39m\\\\x1b[38;5;124m\\'\\\\x1b[39m\\\\x1b[38;5;124mTool name conflicts with existing tool: \\\\x1b[39m\\\\x1b[38;5;132;01m{\\\\x1b[39;00mtool\\\\x1b[38;5;241m.\\\\x1b[39mname\\\\x1b[38;5;132;01m!r}\\\\x1b[39;00m\\\\x1b[38;5;124m\\'\\\\x1b[39m)\\\\n\\\\x1b[1;32m    776\\\\x1b[0m \\\\x1b[38;5;28;01mif\\\\x1b[39;00m \\\\x1b[38;5;28mself\\\\x1b[39m\\\\x1b[38;5;241m.\\\\x1b[39m_result_schema \\\\x1b[38;5;129;01mand\\\\x1b[39;00m tool\\\\x1b[38;5;241m.\\\\x1b[39mname \\\\x1b[38;5;129;01min\\\\x1b[39;00m \\\\x1b[38;5;28mself\\\\x1b[39m\\\\x1b[38;5;241m.\\\\x1b[39m_result_schema\\\\x1b[38;5;241m.\\\\x1b[39mtools:\\\\n\\\\x1b[1;32m    777\\\\x1b[0m     \\\\x1b[38;5;28;01mraise\\\\x1b[39;00m exceptions\\\\x1b[38;5;241m.\\\\x1b[39mUserError(\\\\x1b[38;5;124mf\\\\x1b[39m\\\\x1b[38;5;124m\\'\\\\x1b[39m\\\\x1b[38;5;124mTool name conflicts with result schema name: \\\\x1b[39m\\\\x1b[38;5;132;01m{\\\\x1b[39;00mtool\\\\x1b[38;5;241m.\\\\x1b[39mname\\\\x1b[38;5;132;01m!r}\\\\x1b[39;00m\\\\x1b[38;5;124m\\'\\\\x1b[39m)\\\\n\", \"\\\\x1b[0;31mUserError\\\\x1b[0m: Tool name conflicts with existing tool: \\'modify_cell\\'\"]}]\\n\\nCell[38]:\\nSource:\\n\\nOutputs:\\n[]\\n\\nCell[39]:\\nSource:\\n### Creating prompt cell magic\\nOutputs:\\nNone\\n\\nCell[40]:\\nSource:\\n#| export\\nfrom IPython.core.magic import register_cell_magic\\n\\n#| export\\n@register_cell_magic\\ndef prompt(line, cell):\\n    \"\"\"Cell magic to create prompt cells that interact with the AI agent.\"\"\"\\n    try:\\n        # Get the last result\\'s message history if it exists\\n        message_history = None\\n        if \\'last_prompt_result\\' in get_ipython().user_ns:\\n            last_result = get_ipython().user_ns[\\'last_prompt_result\\']\\n            if hasattr(last_result, \\'all_messages\\'):\\n                message_history = last_result.all_messages()\\n        \\n        # Use get_current_agent() instead of notebook_agent directly\\n        agent = get_current_agent()\\n        \\n        # Run the prompt through our agent with history context\\n        result = run_with_history(\\n            agent, \\n            cell.strip(), \\n            message_history=message_history\\n        )\\n        \\n        # Store the result for next time\\n        get_ipython().user_ns[\\'last_prompt_result\\'] = result\\n        \\n        return Markdown(result.data)\\n    except Exception as e:\\n        return f\"Error processing prompt: {str(e)}\"\\nOutputs:\\n[]', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 59, 436565, tzinfo=datetime.timezone.utc), part_kind='user-prompt')], kind='request'),\n ModelResponse(parts=[TextPart(content='I understand the new notebook context. How can I help?', part_kind='text')], timestamp=datetime.datetime(2024, 12, 31, 13, 10, 59, 436588, tzinfo=datetime.timezone.utc), kind='response'),\n ModelRequest(parts=[UserPromptPart(content='what this notebook is all about?', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 59, 436914, tzinfo=datetime.timezone.utc), part_kind='user-prompt')], kind='request'),\n ModelResponse(parts=[TextPart(content='This notebook appears to be part of a system that uses an AI agent to automate tasks within a Jupyter notebook. Here are some key points:\\n\\n1. **AI Agent Integration**: The notebook is integrating a Pydantic AI model, specifically an agent that seems to respond to prompts and perform tasks within the notebook environment.\\n\\n2. **Function Definitions**: Several Python functions have been defined:\\n   - `factorial()`: This function calculates the factorial of a number with input validation.\\n   - `hello_world()`: A simple function that prints \"Hello, World!\".\\n\\n3. **Cell Creation and Management**: There are functions and tools implemented to create and manage notebook cells programmatically. For example, the `create_cell` function uses the IPython\\'s API to insert new cells.\\n\\n4. **Notebook History Management**: The notebook implements functionality to keep track of the history of executed notebook cells, which can be used to provide context to the AI agent.\\n\\n5. **History-Aware Prompts**: Functions like `create_history_aware_prompt` are used to create prompts that include historical context from the notebook. This allows the AI to make more informed decisions by understanding previous interactions and code.\\n\\n6. **Testing and Execution**: The notebook includes cells dedicated to testing these features, like running the agent with notebook history and testing the factorial function.\\n\\nOverall, it seems to be an experimental setup aiming to enhance interaction with a Jupyter notebook using AI for improved productivity and dynamic task execution.', part_kind='text')], timestamp=datetime.datetime(2024, 12, 31, 13, 11, 33, tzinfo=datetime.timezone.utc), kind='response')]\n\n\n\ndef last_prompt_result_data():\n    return last_prompt_result.data\nlast_prompt_result_data()\n\n'This notebook appears to be part of a system that uses an AI agent to automate tasks within a Jupyter notebook. Here are some key points:\\n\\n1. **AI Agent Integration**: The notebook is integrating a Pydantic AI model, specifically an agent that seems to respond to prompts and perform tasks within the notebook environment.\\n\\n2. **Function Definitions**: Several Python functions have been defined:\\n   - `factorial()`: This function calculates the factorial of a number with input validation.\\n   - `hello_world()`: A simple function that prints \"Hello, World!\".\\n\\n3. **Cell Creation and Management**: There are functions and tools implemented to create and manage notebook cells programmatically. For example, the `create_cell` function uses the IPython\\'s API to insert new cells.\\n\\n4. **Notebook History Management**: The notebook implements functionality to keep track of the history of executed notebook cells, which can be used to provide context to the AI agent.\\n\\n5. **History-Aware Prompts**: Functions like `create_history_aware_prompt` are used to create prompts that include historical context from the notebook. This allows the AI to make more informed decisions by understanding previous interactions and code.\\n\\n6. **Testing and Execution**: The notebook includes cells dedicated to testing these features, like running the agent with notebook history and testing the factorial function.\\n\\nOverall, it seems to be an experimental setup aiming to enhance interaction with a Jupyter notebook using AI for improved productivity and dynamic task execution.'\n\n\n\ndef all_messages():\n    return last_prompt_result.all_messages()\nall_messages()\n\n[ModelRequest(parts=[UserPromptPart(content='Here is the context of new notebook cells that were added:\\nCell[36]:\\nSource:\\nresult.all_messages()\\nOutputs:\\n[{\\'data\\': {\\'text/plain\\': [\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\nToday\\\\\\'s date is 2024-12-31.\\\\\\\\n\", part_kind=\\\\\\'system-prompt\\\\\\'), UserPromptPart(content=\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 28, 691513, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'user-prompt\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\'create_cell\\\\\\', args=ArgsJson(args_json=\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n with input validation.\\\\\\\\\\\\\\\\n    :param n: non-negative integer\\\\\\\\\\\\\\\\n    :return: factorial of n\\\\\\\\\\\\\\\\n    :raises ValueError: if n is not a non-negative integer\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\"Input must be an integer\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\"Input must be a non-negative integer\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n    if n == 0 or n == 1:\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\n    result = 1\\\\\\\\\\\\\\\\n    for i in range(2, n + 1):\\\\\\\\\\\\\\\\n        result *= i\\\\\\\\\\\\\\\\n    return result\",\"cell_type\":\"code\"}\\\\\\'), tool_call_id=\\\\\\'call_Iuc8vC4Y2axuMDvDh3TlF9mz\\\\\\', part_kind=\\\\\\'tool-call\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 29, tzinfo=datetime.timezone.utc), kind=\\\\\\'response\\\\\\'),\\\\n\\', \\' ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\'create_cell\\\\\\', content=\\\\\\'Created new code  with content: def factorial(n):\\\\\\\\n    \"\"\"\\\\\\\\n    Calculate the factorial of a non-negative integer n with input validation.\\\\\\\\n    :param n: non-negative integer\\\\\\\\n    :return: factorial of n\\\\\\\\n    :raises ValueError: if n is not a non-negative integer\\\\\\\\n    \"\"\"\\\\\\\\n    if not isinstance(n, int):\\\\\\\\n        raise ValueError(\"Input must be an integer\")\\\\\\\\n    if n &lt; 0:\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\n    if n == 0 or n == 1:\\\\\\\\n        return 1\\\\\\\\n    result = 1\\\\\\\\n    for i in range(2, n + 1):\\\\\\\\n        result *= i\\\\\\\\n    return result\\\\\\', tool_call_id=\\\\\\'call_Iuc8vC4Y2axuMDvDh3TlF9mz\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 32, 646314, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'tool-return\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \" ModelResponse(parts=[TextPart(content=\\'I have created a function to calculate the factorial of a number with input validation. You can test it by calling the `factorial` function with a non-negative integer as the argument.\\', part_kind=\\'text\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 33, tzinfo=datetime.timezone.utc), kind=\\'response\\'),\\\\n\", \" ModelRequest(parts=[UserPromptPart(content=\\'So what you just made for me here?\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 33, 948002, tzinfo=datetime.timezone.utc), part_kind=\\'user-prompt\\')], kind=\\'request\\'),\\\\n\", \\' ModelResponse(parts=[TextPart(content=\"I created a Python function named `factorial` that calculates the factorial of a non-negative integer. This function includes input validation to ensure that the input is a non-negative integer. If the input is not valid (i.e., not an integer or a negative integer), it raises a `ValueError`.\\\\\\\\n\\\\\\\\nHere\\\\\\'s a summary of what the function does:\\\\\\\\n- It checks if the input is an integer. If not, it raises a `ValueError`.\\\\\\\\n- It checks if the input is a non-negative integer. If it\\\\\\'s negative, it raises a `ValueError`.\\\\\\\\n- If the input is 0 or 1, it returns 1 (since 0! = 1! = 1).\\\\\\\\n- For other positive integers, it calculates the factorial by multiplying all integers from 2 up to the input number and returns the result.\", part_kind=\\\\\\'text\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 34, tzinfo=datetime.timezone.utc), kind=\\\\\\'response\\\\\\'),\\\\n\\', \\' ModelRequest(parts=[UserPromptPart(content=\\\\\\'Here is the context of new notebook cells that were added:\\\\\\\\nCell[13]:\\\\\\\\nSource:\\\\\\\\nTool testing\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[14]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\\\\\\\\\\\\\')\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a new code cell with a simple \"Hello, World!\" function. You can run the cell to see the output.\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 7, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[15]:\\\\\\\\nSource:\\\\\\\\ndef hello_world():\\\\\\\\n    print(\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\')\\\\\\\\n\\\\\\\\n# Call the function to display the output\\\\\\\\nhello_world()\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'text\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\']}]\\\\\\\\n\\\\\\\\nCell[16]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\'s environment.\"], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 9, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[17]:\\\\\\\\nSource:\\\\\\\\ndef factorial(n):\\\\\\\\n    \"\"\"\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\n\\\\\\\\n    Parameters:\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\n\\\\\\\\n    Returns:\\\\\\\\n    int: Factorial of the input number n\\\\\\\\n    \"\"\"\\\\\\\\n    # Input validation\\\\\\\\n    if not isinstance(n, int):\\\\\\\\n        raise TypeError(\"Input must be an integer\")\\\\\\\\n    if n &lt; 0:\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\n\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\n    if n == 0:\\\\\\\\n        return 1\\\\\\\\n\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\n    return n * factorial(n - 1)\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[18]:\\\\\\\\nSource:\\\\\\\\nTesting agent with history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[19]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', message_history=result.new_messages())\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\"I\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'To make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'```python\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'factorial(5)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'```\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'This would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 11, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[20]:\\\\\\\\nSource:\\\\\\\\nresult.all_messages()\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is 2024-12-31.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 34, 458473, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', args=ArgsJson(args_json=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be an integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be a non-negative integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\",\"cell_type\":\"code\"}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-call\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 35, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\', content=\\\\\\\\\\\\\\'Created new code cell\\\\\\\\\\\\\\', tool_call_id=\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, 114822, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'tool-return\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 58, 747643, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTo make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfactorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nThis would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 59, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')]\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 12, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[21]:\\\\\\\\nSource:\\\\\\\\n### Adding notebook history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[22]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nimport os\\\\\\\\nimport json\\\\\\\\nfrom pathlib import Path\\\\\\\\nfrom typing import Optional, Dict, Any\\\\\\\\n\\\\\\\\n# Cache for notebook data\\\\\\\\n_notebook_cache: Dict[str, Any] = {}\\\\\\\\n\\\\\\\\ndef find_current_notebook() -&gt; Optional[dict]:\\\\\\\\n    \"\"\"Find and cache the current notebook data.\\\\\\\\n    \\\\\\\\n    Returns:\\\\\\\\n        Dict containing notebook data or None if not found\\\\\\\\n    \"\"\"\\\\\\\\n    global _notebook_cache\\\\\\\\n    \\\\\\\\n    try:\\\\\\\\n        ipython = get_ipython()\\\\\\\\n        if not ipython:\\\\\\\\n            return None\\\\\\\\n            \\\\\\\\n        # Get current cell content to identify the notebook\\\\\\\\n        current_cell = ipython.get_parent()[\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\']\\\\\\\\n        \\\\\\\\n        # Check if we already found the notebook\\\\\\\\n        if \\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\' in _notebook_cache:\\\\\\\\n            # Verify it\\\\\\\\\\\\\\'s still the correct notebook by checking the current cell\\\\\\\\n            notebook = _notebook_cache[\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\']\\\\\\\\n            for cell in notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']:\\\\\\\\n                if (cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and \\\\\\\\n                    \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\n                    return notebook\\\\\\\\n        \\\\\\\\n        # If not in cache or cache is invalid, search for the notebook\\\\\\\\n        current_dir = Path.cwd()\\\\\\\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\\\\\\\n        \\\\\\\\n        for nb_file in notebook_files:\\\\\\\\n            try:\\\\\\\\n                with open(nb_file) as f:\\\\\\\\n                    notebook = json.load(f)\\\\\\\\n                    for cell in notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']:\\\\\\\\n                        if (cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and \\\\\\\\n                            \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\n                            # Found the notebook, cache it\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\'] = notebook\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\'file\\\\\\\\\\\\\\'] = nb_file\\\\\\\\n                            return notebook\\\\\\\\n            except Exception:\\\\\\\\n                continue\\\\\\\\n                \\\\\\\\n        return None\\\\\\\\n        \\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error finding notebook: {e}\")\\\\\\\\n        return None\\\\\\\\n\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[23]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nmax_lookback = 10\\\\\\\\n\\\\\\\\ndef get_notebook_history(max_cells: int = max_lookback) -&gt; list:\\\\\\\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        max_cells: Maximum number of previous cells to include\\\\\\\\n        \\\\\\\\n    Returns:\\\\\\\\n        List of previous cell contents\\\\\\\\n    \"\"\"\\\\\\\\n    try:\\\\\\\\n        # Get the cached notebook or find it\\\\\\\\n        notebook = find_current_notebook()\\\\\\\\n        if not notebook:\\\\\\\\n            return []\\\\\\\\n            \\\\\\\\n        # Find current cell index\\\\\\\\n        current_cell = get_ipython().get_parent()[\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\']\\\\\\\\n        cells = notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']\\\\\\\\n        current_idx = -1\\\\\\\\n        last_prompt_idx = -1\\\\\\\\n        \\\\\\\\n        # Find current cell and last prompt cell\\\\\\\\n        for idx, cell in enumerate(cells):\\\\\\\\n            source = \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) if isinstance(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'], list) else cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']\\\\\\\\n            \\\\\\\\n            # Find current cell\\\\\\\\n            if current_idx == -1 and cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and source == current_cell:\\\\\\\\n                current_idx = idx\\\\\\\\n                \\\\\\\\n            # Find last prompt cell before current cell\\\\\\\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\\\\\\\n                if cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and source.strip().startswith(\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\'):\\\\\\\\n                    last_prompt_idx = idx\\\\\\\\n                \\\\\\\\n        if current_idx == -1:\\\\\\\\n            return []\\\\\\\\n            \\\\\\\\n        # Get cells between last prompt and current cell\\\\\\\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\\\\\\\n        history = []\\\\\\\\n        \\\\\\\\n        for idx in range(start_idx, current_idx):\\\\\\\\n            cell = cells[idx]            \\\\\\\\n            source = cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'])\\\\\\\\n            if \\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\' in cell:\\\\\\\\n                outputs = cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'], str) else str(cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'])\\\\\\\\n            else:\\\\\\\\n                outputs = \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\'\\\\\\\\n            if not (source.strip().startswith(\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\'#|exclude\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\'#| exclude\\\\\\\\\\\\\\')):\\\\\\\\n                history.append(f\"Cell[{idx}]:\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\n{source}\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\n{outputs}\")\\\\\\\\n        \\\\\\\\n        return history\\\\\\\\n        \\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error getting notebook history: {e}\")\\\\\\\\n        return []\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[24]:\\\\\\\\nSource:\\\\\\\\nTesting notebook history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[25]:\\\\\\\\nSource:\\\\\\\\nnb_hist = get_notebook_history(max_cells=20)\\\\\\\\nnb_hist\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\"[\\\\\\\\\\\\\\'Cell[3]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom dotenv import load_dotenv\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic import BaseModel, Field\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic_ai import Agent, ModelRetry, RunContext\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic_ai.models import KnownModelName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nload_dotenv()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Enable async/await in Jupyter\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport nest_asyncio\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnest_asyncio.apply()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\'Cell[4]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Agent setup\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\'Cell[5]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSystem prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[6]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom datetime import date\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nsystem_prompt = f\"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is {date.today().strftime(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%Y-%m-%d\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')}.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \"Cell[7]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import cast\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nmodel = cast(KnownModelName, os.getenv(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PYDANTIC_AI_MODEL\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'openai:gpt-4o\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nprint(f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PydanticAI is using model: {model}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnotebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PydanticAI is using model: openai:gpt-4o\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\",\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[8]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef refresh_agent():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    notebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\'Cell[9]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n### Adding cell creation tool\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[10]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom IPython.display import display, Markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Literal\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n@notebook_agent.tool\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef create_cell(ctx: RunContext[str], content: str, cell_type: Literal[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') -&gt; str:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Create a new cell in the notebook with the specified content.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        content: The content to put in the new cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cell_type: Type of cell to create (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' or \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        A confirmation message\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except NameError:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return \"Error: Not running in IPython/Jupyter environment\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Display the content immediately\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if cell_type == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\':\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # display(Markdown(f\"```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{content}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Set up the next cell with the content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython.set_next_input(content)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    else:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        display(Markdown(content))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return f\"Created new {cell_type} cell\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stderr\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;module&gt;:8: No type or annotation for returned value 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[11]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTool testing\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[12]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a new code cell with a simple \"Hello, World!\" function. You can run the cell to see the output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 7, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \"Cell[13]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef hello_world():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Call the function to display the output\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nhello_world()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\",\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[14]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\"], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 9, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[15]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\"Input must be an integer\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[16]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTesting agent with history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[17]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', message_history=result.new_messages())\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'To make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'factorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'This would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 11, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[18]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult.all_messages()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is 2024-12-31.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 34, 458473, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', args=ArgsJson(args_json=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nn    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nn    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be an integern    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be a non-negative integern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\",\"cell_type\":\"code\"}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-call\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 35, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Created new code cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, 114822, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-return\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 58, 747643, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTo make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfactorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nThis would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 59, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 12, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[19]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n### Adding notebook history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[20]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pathlib import Path\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Optional, Dict, Any\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Cache for notebook data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n_notebook_cache: Dict[str, Any] = {}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef find_current_notebook() -&gt; Optional[dict]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Find and cache the current notebook data.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        Dict containing notebook data or None if not found\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global _notebook_cache\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not ipython:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get current cell content to identify the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = ipython.get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Check if we already found the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' in _notebook_cache:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Verify it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s still the correct notebook by checking the current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            notebook = _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # If not in cache or cache is invalid, search for the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_dir = Path.cwd()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for nb_file in notebook_files:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                with open(nb_file) as f:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    notebook = json.load(f)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                        if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            # Found the notebook, cache it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = nb_file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            except Exception:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                continue\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error finding notebook: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[21]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef get_notebook_history(max_cells: int = 5) -&gt; list:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        max_cells: Maximum number of previous cells to include\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        List of previous cell contents\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get the cached notebook or find it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook = find_current_notebook()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not notebook:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell index\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = get_ipython().get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cells = notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        last_prompt_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell and last prompt cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx, cell in enumerate(cells):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            source = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], list) else cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if current_idx == -1 and cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source == current_cell:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                current_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find last prompt cell before current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    last_prompt_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if current_idx == -1:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get cells between last prompt and current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        history = []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx in range(start_idx, current_idx):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            cell = cells[idx]            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            source = cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            outputs = cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if not (source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'#|exclude\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                history.append(f\"Cell[{idx}]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{source}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{outputs}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error getting notebook history: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[22]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTesting notebook history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\']\"]}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 28, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[26]:\\\\\\\\nSource:\\\\\\\\n### Creating history-aware prompt\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[27]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\ndef create_history_aware_prompt(prompt: str, message_history: list = None, max_history: int = 5) -&gt; tuple:\\\\\\\\n    \"\"\"Create a prompt with notebook history context and message history.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        prompt: The user\\\\\\\\\\\\\\'s prompt\\\\\\\\n        message_history: Previous conversation messages from results.all_messages()\\\\\\\\n        max_history: Maximum number of previous cells to include\\\\\\\\n        \\\\\\\\n    Returns:\\\\\\\\n        Tuple of (enhanced prompt, combined message history)\\\\\\\\n    \"\"\"\\\\\\\\n    try:\\\\\\\\n        ipython = get_ipython()\\\\\\\\n        if not ipython:\\\\\\\\n            return prompt, message_history\\\\\\\\n        \\\\\\\\n        # Get new cells using our optimized get_notebook_history\\\\\\\\n        new_cells = get_notebook_history(max_cells=max_history)\\\\\\\\n        \\\\\\\\n        if not new_cells and not message_history:\\\\\\\\n            return prompt, None\\\\\\\\n            \\\\\\\\n        # Create message history if none exists\\\\\\\\n        from pydantic_ai.messages import (\\\\\\\\n            ModelRequest, ModelResponse, \\\\\\\\n            UserPromptPart, TextPart\\\\\\\\n        )\\\\\\\\n        \\\\\\\\n        messages = []\\\\\\\\n        \\\\\\\\n        # Add existing message history if provided\\\\\\\\n        if message_history:\\\\\\\\n            messages.extend(message_history)\\\\\\\\n        \\\\\\\\n        # Only add context message if we have new cells\\\\\\\\n        if new_cells:\\\\\\\\n            # Create context message with new cells\\\\\\\\n            history_content = \"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\".join(new_cells)\\\\\\\\n\\\\\\\\n            context_msg = ModelRequest(parts=[\\\\\\\\n                UserPromptPart(\\\\\\\\n                    content=\"Here is the context of new notebook cells that were added:\\\\\\\\\\\\\\\\n\" + history_content\\\\\\\\n                )\\\\\\\\n            ])\\\\\\\\n            \\\\\\\\n            # Create response acknowledging new context\\\\\\\\n            context_response = ModelResponse(parts=[\\\\\\\\n                TextPart(\\\\\\\\n                    content=\"I understand the new notebook context. How can I help?\"\\\\\\\\n                )\\\\\\\\n            ])\\\\\\\\n            \\\\\\\\n            messages.extend([context_msg, context_response])\\\\\\\\n                \\\\\\\\n        return prompt, messages\\\\\\\\n        \\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error creating history-aware prompt: {e}\")\\\\\\\\n        return prompt, message_history\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[28]:\\\\\\\\nSource:\\\\\\\\nTesting history-aware prompt\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[29]:\\\\\\\\nSource:\\\\\\\\ncreate_history_aware_prompt(\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', result.all_messages(), max_history=20)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\"(\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' [ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is 2024-12-31.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 34, 458473, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'  ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', args=ArgsJson(args_json=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be an integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be a non-negative integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\",\"cell_type\":\"code\"}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-call\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 35, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \"  ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\', content=\\\\\\\\\\\\\\'Created new code cell\\\\\\\\\\\\\\', tool_call_id=\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, 114822, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'tool-return\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'  ModelResponse(parts=[TextPart(content=\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \"  ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 58, 747643, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'  ModelResponse(parts=[TextPart(content=\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTo make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfactorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nThis would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 59, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'  ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Here is the context of new notebook cells that were added:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[7]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import cast\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nmodel = cast(KnownModelName, os.getenv(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PYDANTIC_AI_MODEL\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'openai:gpt-4o\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nprint(f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PydanticAI is using model: {model}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnotebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PydanticAI is using model: openai:gpt-4o\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[8]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef refresh_agent():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    notebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[9]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n### Adding cell creation tool\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[10]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom IPython.display import display, Markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Literal\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n@notebook_agent.tool\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef create_cell(ctx: RunContext[str], content: str, cell_type: Literal[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') -&gt; str:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Create a new cell in the notebook with the specified content.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        content: The content to put in the new cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cell_type: Type of cell to create (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' or \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        A confirmation message\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except NameError:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return \"Error: Not running in IPython/Jupyter environment\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Display the content immediately\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if cell_type == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\':\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # display(Markdown(f\"```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{content}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Set up the next cell with the content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython.set_next_input(content)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    else:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        display(Markdown(content))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return f\"Created new {cell_type} cell\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stderr\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;module&gt;:8: No type or annotation for returned value 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[11]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTool testing\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[12]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a new code cell with a simple \"Hello, World!\" function. You can run the cell to see the output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 7, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[13]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef hello_world():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Call the function to display the output\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nhello_world()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[14]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\"], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 9, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[15]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\"Input must be an integer\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[16]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTesting agent with history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[17]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', message_history=result.new_messages())\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'To make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'factorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'This would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 11, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[18]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult.all_messages()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is 2024-12-31.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 34, 458473, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', args=ArgsJson(args_json=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nn    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nn    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be an integern    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be a non-negative integern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\",\"cell_type\":\"code\"}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-call\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 35, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Created new code cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, 114822, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-return\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 58, 747643, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTo make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfactorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nThis would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 59, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 12, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[19]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n### Adding notebook history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[20]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pathlib import Path\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Optional, Dict, Any\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Cache for notebook data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n_notebook_cache: Dict[str, Any] = {}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef find_current_notebook() -&gt; Optional[dict]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Find and cache the current notebook data.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        Dict containing notebook data or None if not found\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global _notebook_cache\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not ipython:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get current cell content to identify the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = ipython.get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Check if we already found the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' in _notebook_cache:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Verify it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s still the correct notebook by checking the current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            notebook = _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # If not in cache or cache is invalid, search for the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_dir = Path.cwd()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for nb_file in notebook_files:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                with open(nb_file) as f:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    notebook = json.load(f)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                        if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            # Found the notebook, cache it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = nb_file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            except Exception:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                continue\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error finding notebook: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[21]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef get_notebook_history(max_cells: int = 5) -&gt; list:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        max_cells: Maximum number of previous cells to include\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        List of previous cell contents\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get the cached notebook or find it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook = find_current_notebook()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not notebook:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell index\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = get_ipython().get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cells = notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        last_prompt_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell and last prompt cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx, cell in enumerate(cells):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            source = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], list) else cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if current_idx == -1 and cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source == current_cell:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                current_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find last prompt cell before current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    last_prompt_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if current_idx == -1:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get cells between last prompt and current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        history = []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx in range(start_idx, current_idx):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            cell = cells[idx]            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            source = cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            outputs = cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if not (source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'#|exclude\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                history.append(f\"Cell[{idx}]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{source}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{outputs}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error getting notebook history: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[22]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTesting notebook history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[23]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnb_hist = get_notebook_history(max_cells=20)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnb_hist\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\"[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[0]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| default_exp core\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[1]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| hide\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom nbdev.showdoc import *\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[2]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom dotenv import load_dotenv\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic import BaseModel, Field\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic_ai import Agent, ModelRetry, RunContext\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic_ai.models import KnownModelName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nload_dotenv()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Enable async/await in Jupyter\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport nest_asyncio\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnest_asyncio.apply()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[3]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom datetime import date\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nsystem_prompt = f\"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is {date.today().strftime(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%Y-%m-%d\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')}.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \"Cell[4]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import cast\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nmodel = cast(KnownModelName, os.getenv(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PYDANTIC_AI_MODEL\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'openai:gpt-4o\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nprint(f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PydanticAI is using model: {model}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnotebook_agent = Agent(model, system_prompt=system_prompt)\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[5]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef refresh_agent():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    notebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[6]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom IPython.display import display, Markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Literal\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n@notebook_agent.tool\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef create_cell(ctx: RunContext[str], content: str, cell_type: Literal[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'codemarkdowncode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') -&gt; str:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Create a new cell in the notebook with the specified content.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        content: The content to put in the new cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cell_type: Type of cell to create (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' or \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        A confirmation message\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except NameError:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return \"Error: Not running in IPython/Jupyter environment\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Display the content immediately\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if cell_type == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\':\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # display(Markdown(f\"```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{content}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Set up the next cell with the content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython.set_next_input(content)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    else:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        display(Markdown(content))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return f\"Created new {cell_type} cell\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \"Cell[7]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \"Cell[8]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef hello_world():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Call the function to display the output\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nhello_world()\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[9]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[10]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef factorial(number):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation to check if the number is a non-negative integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(number, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\"Input must be an integer.\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if number &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer.\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 or 1 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if number == 0 or number == 1:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    else:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return number * factorial(number - 1)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Example usage\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nprint(factorial(5))  # Output: 120\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nprint(factorial(0))  # Output: 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Uncomment the following lines to test input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# print(factorial(-1))  # Should raise ValueError\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# print(factorial(3.5))  # Should raise ValueError\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \"Cell[11]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', message_history=result.new_messages())\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[12]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult.all_messages()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[13]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pathlib import Path\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Optional, Dict, Any\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Cache for notebook data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n_notebook_cache: Dict[str, Any] = {}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef find_current_notebook() -&gt; Optional[dict]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Find and cache the current notebook data.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        Dict containing notebook data or None if not found\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global _notebook_cache\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not ipython:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get current cell content to identify the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = ipython.get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'contentcode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Check if we already found the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' in _notebook_cache:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Verify it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s still the correct notebook by checking the current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            notebook = _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_typecode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # If not in cache or cache is invalid, search for the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_dir = Path.cwd()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for nb_file in notebook_files:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                with open(nb_file) as f:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    notebook = json.load(f)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                        if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_typecode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\njoin(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            # Found the notebook, cache it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = nb_file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            except Exception:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                continue\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error finding notebook: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[14]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef get_notebook_history(max_cells: int = 5) -&gt; list:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        max_cells: Maximum number of previous cells to include\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        List of previous cell contents\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get the cached notebook or find it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook = find_current_notebook()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not notebook:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell index\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = get_ipython().get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'contentcode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cells = notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        last_prompt_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell and last prompt cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx, cell in enumerate(cells):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            sourcejoin(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], list) else cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if current_idx == -1 and cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source == current_cell:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                current_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find last prompt cell before current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_typecode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    last_prompt_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if current_idx == -1:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get cells between last prompt and current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        history = []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx in range(start_idx, current_idx):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            cell = cells[idx]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_typecode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\':  # Only include code cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                # Skip cells that are prompt cells and nbdev directives\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                source = cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], str) elsejoin(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if not source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    history.append(f\"Cell[{idx}]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{source}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error getting notebook history: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 58, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[24]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n### Creating history-aware prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[25]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef create_history_aware_prompt(prompt: str, message_history: list = None, max_history: int = 5) -&gt; tuple:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Create a prompt with notebook history context and message history.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        prompt: The user\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        message_history: Previous conversation messages from results.all_messages()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        max_history: Maximum number of previous cells to include\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        Tuple of (enhanced prompt, combined message history)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not ipython:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return prompt, message_history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get new cells using our optimized get_notebook_history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        new_cells = get_notebook_history(max_cells=max_history)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not new_cells and not message_history:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return prompt, None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Create message history if none exists\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        from pydantic_ai.messages import (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            ModelRequest, ModelResponse, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            UserPromptPart, TextPart\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        messages = []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Add existing message history if provided\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if message_history:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            messages.extend(message_history)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Only add context message if we have new cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if new_cells:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Create context message with new cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            history_content = \"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\".join(new_cells)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            context_msg = ModelRequest(parts=[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                UserPromptPart(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    content=\"Here is the context of new notebook cells that were added:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\" + history_content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            ])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Create response acknowledging new context\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            context_response = ModelResponse(parts=[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                TextPart(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    content=\"I understand the new notebook context. How can I help?\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            ])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            messages.extend([context_msg, context_response])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return prompt, messages\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error creating history-aware prompt: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return prompt, message_history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[26]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTesting history-aware prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 26, 5, 737496, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \"  ModelResponse(parts=[TextPart(content=\\\\\\\\\\\\\\'I understand the new notebook context. How can I help?\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 26, 5, 737510, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\')])\"]}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 30, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[30]:\\\\\\\\nSource:\\\\\\\\n### Running agent with notebook history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[31]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nfrom typing import Any\\\\\\\\ndef run_with_history(agent: Agent, prompt: str, message_history: list = None, max_history: int = 5) -&gt; Any:\\\\\\\\n    \"\"\"Run the agent with notebook and conversation history context.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        agent: The PydanticAI agent\\\\\\\\n        prompt: The user\\\\\\\\\\\\\\'s prompt\\\\\\\\n        message_history: Previous conversation messages\\\\\\\\n        max_history: Maximum number of previous cells to include\\\\\\\\n        \\\\\\\\n    Returns:\\\\\\\\n        Agent run result\\\\\\\\n    \"\"\"\\\\\\\\n    prompt, combined_history = create_history_aware_prompt(\\\\\\\\n        prompt, \\\\\\\\n        message_history=message_history, \\\\\\\\n        max_history=max_history\\\\\\\\n    )\\\\\\\\n    return agent.run_sync(prompt, message_history=combined_history)\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[32]:\\\\\\\\nSource:\\\\\\\\nTesting run_with_history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 37, 976699, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'user-prompt\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \" ModelResponse(parts=[TextPart(content=\\'I understand the new notebook context. How can I help?\\', part_kind=\\'text\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 37, 976722, tzinfo=datetime.timezone.utc), kind=\\'response\\'),\\\\n\", \" ModelRequest(parts=[UserPromptPart(content=\\'So what is going on in this notebook?\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 37, 976975, tzinfo=datetime.timezone.utc), part_kind=\\'user-prompt\\')], kind=\\'request\\'),\\\\n\", \\' ModelResponse(parts=[TextPart(content=\\\\\\'This notebook appears to be part of a system that uses an AI agent to automate tasks within a Jupyter notebook. Here are some key points:\\\\\\\\n\\\\\\\\n1. **AI Agent Integration**: The notebook is integrating a Pydantic AI model, specifically an agent that seems to respond to prompts and perform tasks within the notebook environment.\\\\\\\\n\\\\\\\\n2. **Function Definitions**: Several Python functions have been defined:\\\\\\\\n   - `factorial()`: This function calculates the factorial of a number with input validation.\\\\\\\\n   - `hello_world()`: A simple function that prints \"Hello, World!\".\\\\\\\\n   \\\\\\\\n3. **Cell Creation and Management**: There are functions and tools implemented to create and manage notebook cells programmatically. For example, the `create_cell` function uses the IPython\\\\\\\\\\\\\\'s API to insert new cells.\\\\\\\\n\\\\\\\\n4. **Notebook History Management**: The notebook implements functionality to keep track of the history of executed notebook cells, which can be used to provide context to the AI agent.\\\\\\\\n\\\\\\\\n5. **History-Aware Prompts**: Functions like `create_history_aware_prompt` are used to create prompts that include historical context from the notebook. This allows the AI to make more informed decisions by understanding previous interactions and code.\\\\\\\\n\\\\\\\\n6. **Testing and Execution**: The notebook includes cells dedicated to testing these features, like running the agent with notebook history and testing the factorial function.\\\\\\\\n\\\\\\\\nOverall, it seems to be an experimental setup aiming to enhance interaction with a Jupyter notebook using AI for improved productivity and dynamic task execution.\\\\\\', part_kind=\\\\\\'text\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 39, tzinfo=datetime.timezone.utc), kind=\\\\\\'response\\\\\\')]\\']}, \\'execution_count\\': 23, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]\\n\\nCell[37]:\\nSource:\\n#| export\\n@notebook_agent.tool\\ndef modify_cell(ctx: RunContext[str], cell_index: int, content: str) -&gt; str:\\n    \"\"\"Modify an existing cell in the notebook.\\n    \\n    Args:\\n        cell_index: The index of the cell to modify\\n        content: The new content for the cell\\n        \\n    Returns:\\n        A confirmation message\\n    \"\"\"\\n    try:\\n        notebook = find_current_notebook()\\n        if not notebook:\\n            return \"Error: Could not find current notebook\"\\n            \\n        cells = notebook[\\'cells\\']\\n        if cell_index &lt; 0 or cell_index &gt;= len(cells):\\n            return f\"Error: Cell index {cell_index} is out of range\"\\n            \\n        # Get the cell\\n        cell = cells[cell_index]\\n        \\n        # Update the cell content in IPython\\n        ipython = get_ipython()\\n        if not ipython:\\n            return \"Error: Not running in IPython environment\"\\n            \\n        # Set the content of the specified cell\\n        ipython.set_next_input(content, replace=True)\\n        \\n        return f\"Modified cell {cell_index} with new content\"\\n        \\n    except Exception as e:\\n        return f\"Error modifying cell: {str(e)}\"\\nOutputs:\\n[{\\'name\\': \\'stderr\\', \\'output_type\\': \\'stream\\', \\'text\\': [\\'&lt;module&gt;:8: No type or annotation for returned value 1\\\\n\\']}, {\\'ename\\': \\'UserError\\', \\'evalue\\': \"Tool name conflicts with existing tool: \\'modify_cell\\'\", \\'output_type\\': \\'error\\', \\'traceback\\': [\\'\\\\x1b[0;31m---------------------------------------------------------------------------\\\\x1b[0m\\', \\'\\\\x1b[0;31mUserError\\\\x1b[0m                                 Traceback (most recent call last)\\', \\'Cell \\\\x1b[0;32mIn[42], line 2\\\\x1b[0m\\\\n\\\\x1b[1;32m      1\\\\x1b[0m \\\\x1b[38;5;66;03m#| export\\\\x1b[39;00m\\\\n\\\\x1b[0;32m----&gt; 2\\\\x1b[0m \\\\x1b[38;5;129;43m@notebook_agent\\\\x1b[39;49m\\\\x1b[38;5;241;43m.\\\\x1b[39;49m\\\\x1b[43mtool\\\\x1b[49m\\\\n\\\\x1b[1;32m      3\\\\x1b[0m \\\\x1b[38;5;28;43;01mdef\\\\x1b[39;49;00m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;21;43mmodify_cell\\\\x1b[39;49m\\\\x1b[43m(\\\\x1b[49m\\\\x1b[43mctx\\\\x1b[49m\\\\x1b[43m:\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[43mRunContext\\\\x1b[49m\\\\x1b[43m[\\\\x1b[49m\\\\x1b[38;5;28;43mstr\\\\x1b[39;49m\\\\x1b[43m]\\\\x1b[49m\\\\x1b[43m,\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[43mcell_index\\\\x1b[49m\\\\x1b[43m:\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;28;43mint\\\\x1b[39;49m\\\\x1b[43m,\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[43mcontent\\\\x1b[49m\\\\x1b[43m:\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;28;43mstr\\\\x1b[39;49m\\\\x1b[43m)\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;241;43m-\\\\x1b[39;49m\\\\x1b[38;5;241;43m&gt;\\\\x1b[39;49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;28;43mstr\\\\x1b[39;49m\\\\x1b[43m:\\\\x1b[49m\\\\n\\\\x1b[1;32m      4\\\\x1b[0m \\\\x1b[38;5;250;43m    \\\\x1b[39;49m\\\\x1b[38;5;124;43;03m\"\"\"Modify an existing cell in the notebook.\\\\x1b[39;49;00m\\\\n\\\\x1b[1;32m      5\\\\x1b[0m \\\\x1b[38;5;124;43;03m    \\\\x1b[39;49;00m\\\\n\\\\x1b[1;32m      6\\\\x1b[0m \\\\x1b[38;5;124;43;03m    Args:\\\\x1b[39;49;00m\\\\n\\\\x1b[0;32m   (...)\\\\x1b[0m\\\\n\\\\x1b[1;32m     11\\\\x1b[0m \\\\x1b[38;5;124;43;03m        A confirmation message\\\\x1b[39;49;00m\\\\n\\\\x1b[1;32m     12\\\\x1b[0m \\\\x1b[38;5;124;43;03m    \"\"\"\\\\x1b[39;49;00m\\\\n\\\\x1b[1;32m     13\\\\x1b[0m \\\\x1b[43m    \\\\x1b[49m\\\\x1b[38;5;28;43;01mtry\\\\x1b[39;49;00m\\\\x1b[43m:\\\\x1b[49m\\\\n\\', \\'File \\\\x1b[0;32m~/WebDev/FH_SQLModel/.venv/lib/python3.12/site-packages/pydantic_ai/agent.py:683\\\\x1b[0m, in \\\\x1b[0;36mAgent.tool\\\\x1b[0;34m(self, func, retries, prepare)\\\\x1b[0m\\\\n\\\\x1b[1;32m    680\\\\x1b[0m     \\\\x1b[38;5;28;01mreturn\\\\x1b[39;00m tool_decorator\\\\n\\\\x1b[1;32m    681\\\\x1b[0m \\\\x1b[38;5;28;01melse\\\\x1b[39;00m:\\\\n\\\\x1b[1;32m    682\\\\x1b[0m     \\\\x1b[38;5;66;03m# noinspection PyTypeChecker\\\\x1b[39;00m\\\\n\\\\x1b[0;32m--&gt; 683\\\\x1b[0m     \\\\x1b[38;5;28;43mself\\\\x1b[39;49m\\\\x1b[38;5;241;43m.\\\\x1b[39;49m\\\\x1b[43m_register_function\\\\x1b[49m\\\\x1b[43m(\\\\x1b[49m\\\\x1b[43mfunc\\\\x1b[49m\\\\x1b[43m,\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;28;43;01mTrue\\\\x1b[39;49;00m\\\\x1b[43m,\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[43mretries\\\\x1b[49m\\\\x1b[43m,\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[43mprepare\\\\x1b[49m\\\\x1b[43m)\\\\x1b[49m\\\\n\\\\x1b[1;32m    684\\\\x1b[0m     \\\\x1b[38;5;28;01mreturn\\\\x1b[39;00m func\\\\n\\', \\'File \\\\x1b[0;32m~/WebDev/FH_SQLModel/.venv/lib/python3.12/site-packages/pydantic_ai/agent.py:765\\\\x1b[0m, in \\\\x1b[0;36mAgent._register_function\\\\x1b[0;34m(self, func, takes_ctx, retries, prepare)\\\\x1b[0m\\\\n\\\\x1b[1;32m    763\\\\x1b[0m retries_ \\\\x1b[38;5;241m=\\\\x1b[39m retries \\\\x1b[38;5;28;01mif\\\\x1b[39;00m retries \\\\x1b[38;5;129;01mis\\\\x1b[39;00m \\\\x1b[38;5;129;01mnot\\\\x1b[39;00m \\\\x1b[38;5;28;01mNone\\\\x1b[39;00m \\\\x1b[38;5;28;01melse\\\\x1b[39;00m \\\\x1b[38;5;28mself\\\\x1b[39m\\\\x1b[38;5;241m.\\\\x1b[39m_default_retries\\\\n\\\\x1b[1;32m    764\\\\x1b[0m tool \\\\x1b[38;5;241m=\\\\x1b[39m Tool(func, takes_ctx\\\\x1b[38;5;241m=\\\\x1b[39mtakes_ctx, max_retries\\\\x1b[38;5;241m=\\\\x1b[39mretries_, prepare\\\\x1b[38;5;241m=\\\\x1b[39mprepare)\\\\n\\\\x1b[0;32m--&gt; 765\\\\x1b[0m \\\\x1b[38;5;28;43mself\\\\x1b[39;49m\\\\x1b[38;5;241;43m.\\\\x1b[39;49m\\\\x1b[43m_register_tool\\\\x1b[49m\\\\x1b[43m(\\\\x1b[49m\\\\x1b[43mtool\\\\x1b[49m\\\\x1b[43m)\\\\x1b[49m\\\\n\\', \"File \\\\x1b[0;32m~/WebDev/FH_SQLModel/.venv/lib/python3.12/site-packages/pydantic_ai/agent.py:774\\\\x1b[0m, in \\\\x1b[0;36mAgent._register_tool\\\\x1b[0;34m(self, tool)\\\\x1b[0m\\\\n\\\\x1b[1;32m    771\\\\x1b[0m     tool \\\\x1b[38;5;241m=\\\\x1b[39m dataclasses\\\\x1b[38;5;241m.\\\\x1b[39mreplace(tool, max_retries\\\\x1b[38;5;241m=\\\\x1b[39m\\\\x1b[38;5;28mself\\\\x1b[39m\\\\x1b[38;5;241m.\\\\x1b[39m_default_retries)\\\\n\\\\x1b[1;32m    773\\\\x1b[0m \\\\x1b[38;5;28;01mif\\\\x1b[39;00m tool\\\\x1b[38;5;241m.\\\\x1b[39mname \\\\x1b[38;5;129;01min\\\\x1b[39;00m \\\\x1b[38;5;28mself\\\\x1b[39m\\\\x1b[38;5;241m.\\\\x1b[39m_function_tools:\\\\n\\\\x1b[0;32m--&gt; 774\\\\x1b[0m     \\\\x1b[38;5;28;01mraise\\\\x1b[39;00m exceptions\\\\x1b[38;5;241m.\\\\x1b[39mUserError(\\\\x1b[38;5;124mf\\\\x1b[39m\\\\x1b[38;5;124m\\'\\\\x1b[39m\\\\x1b[38;5;124mTool name conflicts with existing tool: \\\\x1b[39m\\\\x1b[38;5;132;01m{\\\\x1b[39;00mtool\\\\x1b[38;5;241m.\\\\x1b[39mname\\\\x1b[38;5;132;01m!r}\\\\x1b[39;00m\\\\x1b[38;5;124m\\'\\\\x1b[39m)\\\\n\\\\x1b[1;32m    776\\\\x1b[0m \\\\x1b[38;5;28;01mif\\\\x1b[39;00m \\\\x1b[38;5;28mself\\\\x1b[39m\\\\x1b[38;5;241m.\\\\x1b[39m_result_schema \\\\x1b[38;5;129;01mand\\\\x1b[39;00m tool\\\\x1b[38;5;241m.\\\\x1b[39mname \\\\x1b[38;5;129;01min\\\\x1b[39;00m \\\\x1b[38;5;28mself\\\\x1b[39m\\\\x1b[38;5;241m.\\\\x1b[39m_result_schema\\\\x1b[38;5;241m.\\\\x1b[39mtools:\\\\n\\\\x1b[1;32m    777\\\\x1b[0m     \\\\x1b[38;5;28;01mraise\\\\x1b[39;00m exceptions\\\\x1b[38;5;241m.\\\\x1b[39mUserError(\\\\x1b[38;5;124mf\\\\x1b[39m\\\\x1b[38;5;124m\\'\\\\x1b[39m\\\\x1b[38;5;124mTool name conflicts with result schema name: \\\\x1b[39m\\\\x1b[38;5;132;01m{\\\\x1b[39;00mtool\\\\x1b[38;5;241m.\\\\x1b[39mname\\\\x1b[38;5;132;01m!r}\\\\x1b[39;00m\\\\x1b[38;5;124m\\'\\\\x1b[39m)\\\\n\", \"\\\\x1b[0;31mUserError\\\\x1b[0m: Tool name conflicts with existing tool: \\'modify_cell\\'\"]}]\\n\\nCell[38]:\\nSource:\\n\\nOutputs:\\n[]\\n\\nCell[39]:\\nSource:\\n### Creating prompt cell magic\\nOutputs:\\nNone\\n\\nCell[40]:\\nSource:\\n#| export\\nfrom IPython.core.magic import register_cell_magic\\n\\n#| export\\n@register_cell_magic\\ndef prompt(line, cell):\\n    \"\"\"Cell magic to create prompt cells that interact with the AI agent.\"\"\"\\n    try:\\n        # Get the last result\\'s message history if it exists\\n        message_history = None\\n        if \\'last_prompt_result\\' in get_ipython().user_ns:\\n            last_result = get_ipython().user_ns[\\'last_prompt_result\\']\\n            if hasattr(last_result, \\'all_messages\\'):\\n                message_history = last_result.all_messages()\\n        \\n        # Use get_current_agent() instead of notebook_agent directly\\n        agent = get_current_agent()\\n        \\n        # Run the prompt through our agent with history context\\n        result = run_with_history(\\n            agent, \\n            cell.strip(), \\n            message_history=message_history\\n        )\\n        \\n        # Store the result for next time\\n        get_ipython().user_ns[\\'last_prompt_result\\'] = result\\n        \\n        return Markdown(result.data)\\n    except Exception as e:\\n        return f\"Error processing prompt: {str(e)}\"\\nOutputs:\\n[]', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 59, 436565, tzinfo=datetime.timezone.utc), part_kind='user-prompt')], kind='request'),\n ModelResponse(parts=[TextPart(content='I understand the new notebook context. How can I help?', part_kind='text')], timestamp=datetime.datetime(2024, 12, 31, 13, 10, 59, 436588, tzinfo=datetime.timezone.utc), kind='response'),\n ModelRequest(parts=[UserPromptPart(content='what this notebook is all about?', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 59, 436914, tzinfo=datetime.timezone.utc), part_kind='user-prompt')], kind='request'),\n ModelResponse(parts=[TextPart(content='This notebook appears to be part of a system that uses an AI agent to automate tasks within a Jupyter notebook. Here are some key points:\\n\\n1. **AI Agent Integration**: The notebook is integrating a Pydantic AI model, specifically an agent that seems to respond to prompts and perform tasks within the notebook environment.\\n\\n2. **Function Definitions**: Several Python functions have been defined:\\n   - `factorial()`: This function calculates the factorial of a number with input validation.\\n   - `hello_world()`: A simple function that prints \"Hello, World!\".\\n\\n3. **Cell Creation and Management**: There are functions and tools implemented to create and manage notebook cells programmatically. For example, the `create_cell` function uses the IPython\\'s API to insert new cells.\\n\\n4. **Notebook History Management**: The notebook implements functionality to keep track of the history of executed notebook cells, which can be used to provide context to the AI agent.\\n\\n5. **History-Aware Prompts**: Functions like `create_history_aware_prompt` are used to create prompts that include historical context from the notebook. This allows the AI to make more informed decisions by understanding previous interactions and code.\\n\\n6. **Testing and Execution**: The notebook includes cells dedicated to testing these features, like running the agent with notebook history and testing the factorial function.\\n\\nOverall, it seems to be an experimental setup aiming to enhance interaction with a Jupyter notebook using AI for improved productivity and dynamic task execution.', part_kind='text')], timestamp=datetime.datetime(2024, 12, 31, 13, 11, 33, tzinfo=datetime.timezone.utc), kind='response')]\n\n\n\ntell me what have I added last to this notebook?\n\n\"Error processing prompt: Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-Pm8WC2pvJDhMF1KkAgUCByZl on tokens per min (TPM): Limit 30000, Requested 62420. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}\"\n\n\n\nall_messages()\n\n[ModelRequest(parts=[UserPromptPart(content='Here is the context of new notebook cells that were added:\\nCell[36]:\\nSource:\\nresult.all_messages()\\nOutputs:\\n[{\\'data\\': {\\'text/plain\\': [\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\nToday\\\\\\'s date is 2024-12-31.\\\\\\\\n\", part_kind=\\\\\\'system-prompt\\\\\\'), UserPromptPart(content=\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 28, 691513, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'user-prompt\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\'create_cell\\\\\\', args=ArgsJson(args_json=\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n with input validation.\\\\\\\\\\\\\\\\n    :param n: non-negative integer\\\\\\\\\\\\\\\\n    :return: factorial of n\\\\\\\\\\\\\\\\n    :raises ValueError: if n is not a non-negative integer\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\"Input must be an integer\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\"Input must be a non-negative integer\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n    if n == 0 or n == 1:\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\n    result = 1\\\\\\\\\\\\\\\\n    for i in range(2, n + 1):\\\\\\\\\\\\\\\\n        result *= i\\\\\\\\\\\\\\\\n    return result\",\"cell_type\":\"code\"}\\\\\\'), tool_call_id=\\\\\\'call_Iuc8vC4Y2axuMDvDh3TlF9mz\\\\\\', part_kind=\\\\\\'tool-call\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 29, tzinfo=datetime.timezone.utc), kind=\\\\\\'response\\\\\\'),\\\\n\\', \\' ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\'create_cell\\\\\\', content=\\\\\\'Created new code  with content: def factorial(n):\\\\\\\\n    \"\"\"\\\\\\\\n    Calculate the factorial of a non-negative integer n with input validation.\\\\\\\\n    :param n: non-negative integer\\\\\\\\n    :return: factorial of n\\\\\\\\n    :raises ValueError: if n is not a non-negative integer\\\\\\\\n    \"\"\"\\\\\\\\n    if not isinstance(n, int):\\\\\\\\n        raise ValueError(\"Input must be an integer\")\\\\\\\\n    if n &lt; 0:\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\n    if n == 0 or n == 1:\\\\\\\\n        return 1\\\\\\\\n    result = 1\\\\\\\\n    for i in range(2, n + 1):\\\\\\\\n        result *= i\\\\\\\\n    return result\\\\\\', tool_call_id=\\\\\\'call_Iuc8vC4Y2axuMDvDh3TlF9mz\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 32, 646314, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'tool-return\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \" ModelResponse(parts=[TextPart(content=\\'I have created a function to calculate the factorial of a number with input validation. You can test it by calling the `factorial` function with a non-negative integer as the argument.\\', part_kind=\\'text\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 33, tzinfo=datetime.timezone.utc), kind=\\'response\\'),\\\\n\", \" ModelRequest(parts=[UserPromptPart(content=\\'So what you just made for me here?\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 33, 948002, tzinfo=datetime.timezone.utc), part_kind=\\'user-prompt\\')], kind=\\'request\\'),\\\\n\", \\' ModelResponse(parts=[TextPart(content=\"I created a Python function named `factorial` that calculates the factorial of a non-negative integer. This function includes input validation to ensure that the input is a non-negative integer. If the input is not valid (i.e., not an integer or a negative integer), it raises a `ValueError`.\\\\\\\\n\\\\\\\\nHere\\\\\\'s a summary of what the function does:\\\\\\\\n- It checks if the input is an integer. If not, it raises a `ValueError`.\\\\\\\\n- It checks if the input is a non-negative integer. If it\\\\\\'s negative, it raises a `ValueError`.\\\\\\\\n- If the input is 0 or 1, it returns 1 (since 0! = 1! = 1).\\\\\\\\n- For other positive integers, it calculates the factorial by multiplying all integers from 2 up to the input number and returns the result.\", part_kind=\\\\\\'text\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 34, tzinfo=datetime.timezone.utc), kind=\\\\\\'response\\\\\\'),\\\\n\\', \\' ModelRequest(parts=[UserPromptPart(content=\\\\\\'Here is the context of new notebook cells that were added:\\\\\\\\nCell[13]:\\\\\\\\nSource:\\\\\\\\nTool testing\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[14]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\\\\\\\\\\\\\')\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a new code cell with a simple \"Hello, World!\" function. You can run the cell to see the output.\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 7, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[15]:\\\\\\\\nSource:\\\\\\\\ndef hello_world():\\\\\\\\n    print(\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\')\\\\\\\\n\\\\\\\\n# Call the function to display the output\\\\\\\\nhello_world()\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'text\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\']}]\\\\\\\\n\\\\\\\\nCell[16]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\'s environment.\"], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 9, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[17]:\\\\\\\\nSource:\\\\\\\\ndef factorial(n):\\\\\\\\n    \"\"\"\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\n\\\\\\\\n    Parameters:\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\n\\\\\\\\n    Returns:\\\\\\\\n    int: Factorial of the input number n\\\\\\\\n    \"\"\"\\\\\\\\n    # Input validation\\\\\\\\n    if not isinstance(n, int):\\\\\\\\n        raise TypeError(\"Input must be an integer\")\\\\\\\\n    if n &lt; 0:\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\n\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\n    if n == 0:\\\\\\\\n        return 1\\\\\\\\n\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\n    return n * factorial(n - 1)\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[18]:\\\\\\\\nSource:\\\\\\\\nTesting agent with history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[19]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', message_history=result.new_messages())\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\"I\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'To make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'```python\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'factorial(5)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'```\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'This would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 11, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[20]:\\\\\\\\nSource:\\\\\\\\nresult.all_messages()\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is 2024-12-31.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 34, 458473, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', args=ArgsJson(args_json=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be an integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be a non-negative integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\",\"cell_type\":\"code\"}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-call\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 35, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\', content=\\\\\\\\\\\\\\'Created new code cell\\\\\\\\\\\\\\', tool_call_id=\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, 114822, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'tool-return\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 58, 747643, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTo make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfactorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nThis would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 59, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')]\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 12, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[21]:\\\\\\\\nSource:\\\\\\\\n### Adding notebook history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[22]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nimport os\\\\\\\\nimport json\\\\\\\\nfrom pathlib import Path\\\\\\\\nfrom typing import Optional, Dict, Any\\\\\\\\n\\\\\\\\n# Cache for notebook data\\\\\\\\n_notebook_cache: Dict[str, Any] = {}\\\\\\\\n\\\\\\\\ndef find_current_notebook() -&gt; Optional[dict]:\\\\\\\\n    \"\"\"Find and cache the current notebook data.\\\\\\\\n    \\\\\\\\n    Returns:\\\\\\\\n        Dict containing notebook data or None if not found\\\\\\\\n    \"\"\"\\\\\\\\n    global _notebook_cache\\\\\\\\n    \\\\\\\\n    try:\\\\\\\\n        ipython = get_ipython()\\\\\\\\n        if not ipython:\\\\\\\\n            return None\\\\\\\\n            \\\\\\\\n        # Get current cell content to identify the notebook\\\\\\\\n        current_cell = ipython.get_parent()[\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\']\\\\\\\\n        \\\\\\\\n        # Check if we already found the notebook\\\\\\\\n        if \\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\' in _notebook_cache:\\\\\\\\n            # Verify it\\\\\\\\\\\\\\'s still the correct notebook by checking the current cell\\\\\\\\n            notebook = _notebook_cache[\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\']\\\\\\\\n            for cell in notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']:\\\\\\\\n                if (cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and \\\\\\\\n                    \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\n                    return notebook\\\\\\\\n        \\\\\\\\n        # If not in cache or cache is invalid, search for the notebook\\\\\\\\n        current_dir = Path.cwd()\\\\\\\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\\\\\\\n        \\\\\\\\n        for nb_file in notebook_files:\\\\\\\\n            try:\\\\\\\\n                with open(nb_file) as f:\\\\\\\\n                    notebook = json.load(f)\\\\\\\\n                    for cell in notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']:\\\\\\\\n                        if (cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and \\\\\\\\n                            \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\n                            # Found the notebook, cache it\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\'] = notebook\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\'file\\\\\\\\\\\\\\'] = nb_file\\\\\\\\n                            return notebook\\\\\\\\n            except Exception:\\\\\\\\n                continue\\\\\\\\n                \\\\\\\\n        return None\\\\\\\\n        \\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error finding notebook: {e}\")\\\\\\\\n        return None\\\\\\\\n\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[23]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nmax_lookback = 10\\\\\\\\n\\\\\\\\ndef get_notebook_history(max_cells: int = max_lookback) -&gt; list:\\\\\\\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        max_cells: Maximum number of previous cells to include\\\\\\\\n        \\\\\\\\n    Returns:\\\\\\\\n        List of previous cell contents\\\\\\\\n    \"\"\"\\\\\\\\n    try:\\\\\\\\n        # Get the cached notebook or find it\\\\\\\\n        notebook = find_current_notebook()\\\\\\\\n        if not notebook:\\\\\\\\n            return []\\\\\\\\n            \\\\\\\\n        # Find current cell index\\\\\\\\n        current_cell = get_ipython().get_parent()[\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\']\\\\\\\\n        cells = notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']\\\\\\\\n        current_idx = -1\\\\\\\\n        last_prompt_idx = -1\\\\\\\\n        \\\\\\\\n        # Find current cell and last prompt cell\\\\\\\\n        for idx, cell in enumerate(cells):\\\\\\\\n            source = \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) if isinstance(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'], list) else cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']\\\\\\\\n            \\\\\\\\n            # Find current cell\\\\\\\\n            if current_idx == -1 and cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and source == current_cell:\\\\\\\\n                current_idx = idx\\\\\\\\n                \\\\\\\\n            # Find last prompt cell before current cell\\\\\\\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\\\\\\\n                if cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and source.strip().startswith(\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\'):\\\\\\\\n                    last_prompt_idx = idx\\\\\\\\n                \\\\\\\\n        if current_idx == -1:\\\\\\\\n            return []\\\\\\\\n            \\\\\\\\n        # Get cells between last prompt and current cell\\\\\\\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\\\\\\\n        history = []\\\\\\\\n        \\\\\\\\n        for idx in range(start_idx, current_idx):\\\\\\\\n            cell = cells[idx]            \\\\\\\\n            source = cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'])\\\\\\\\n            if \\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\' in cell:\\\\\\\\n                outputs = cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'], str) else str(cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'])\\\\\\\\n            else:\\\\\\\\n                outputs = \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\'\\\\\\\\n            if not (source.strip().startswith(\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\'#|exclude\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\'#| exclude\\\\\\\\\\\\\\')):\\\\\\\\n                history.append(f\"Cell[{idx}]:\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\n{source}\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\n{outputs}\")\\\\\\\\n        \\\\\\\\n        return history\\\\\\\\n        \\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error getting notebook history: {e}\")\\\\\\\\n        return []\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[24]:\\\\\\\\nSource:\\\\\\\\nTesting notebook history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[25]:\\\\\\\\nSource:\\\\\\\\nnb_hist = get_notebook_history(max_cells=20)\\\\\\\\nnb_hist\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\"[\\\\\\\\\\\\\\'Cell[3]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom dotenv import load_dotenv\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic import BaseModel, Field\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic_ai import Agent, ModelRetry, RunContext\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic_ai.models import KnownModelName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nload_dotenv()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Enable async/await in Jupyter\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport nest_asyncio\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnest_asyncio.apply()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\'Cell[4]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Agent setup\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\'Cell[5]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSystem prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[6]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom datetime import date\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nsystem_prompt = f\"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is {date.today().strftime(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%Y-%m-%d\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')}.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \"Cell[7]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import cast\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nmodel = cast(KnownModelName, os.getenv(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PYDANTIC_AI_MODEL\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'openai:gpt-4o\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nprint(f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PydanticAI is using model: {model}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnotebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PydanticAI is using model: openai:gpt-4o\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\",\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[8]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef refresh_agent():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    notebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\'Cell[9]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n### Adding cell creation tool\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[10]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom IPython.display import display, Markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Literal\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n@notebook_agent.tool\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef create_cell(ctx: RunContext[str], content: str, cell_type: Literal[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') -&gt; str:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Create a new cell in the notebook with the specified content.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        content: The content to put in the new cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cell_type: Type of cell to create (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' or \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        A confirmation message\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except NameError:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return \"Error: Not running in IPython/Jupyter environment\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Display the content immediately\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if cell_type == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\':\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # display(Markdown(f\"```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{content}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Set up the next cell with the content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython.set_next_input(content)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    else:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        display(Markdown(content))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return f\"Created new {cell_type} cell\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stderr\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;module&gt;:8: No type or annotation for returned value 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[11]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTool testing\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[12]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a new code cell with a simple \"Hello, World!\" function. You can run the cell to see the output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 7, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \"Cell[13]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef hello_world():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Call the function to display the output\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nhello_world()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\",\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[14]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\"], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 9, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[15]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\"Input must be an integer\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[16]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTesting agent with history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[17]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', message_history=result.new_messages())\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'To make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'factorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'This would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 11, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[18]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult.all_messages()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is 2024-12-31.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 34, 458473, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', args=ArgsJson(args_json=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nn    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nn    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be an integern    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be a non-negative integern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\",\"cell_type\":\"code\"}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-call\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 35, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Created new code cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, 114822, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-return\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 58, 747643, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTo make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfactorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nThis would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 59, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 12, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[19]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n### Adding notebook history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[20]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pathlib import Path\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Optional, Dict, Any\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Cache for notebook data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n_notebook_cache: Dict[str, Any] = {}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef find_current_notebook() -&gt; Optional[dict]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Find and cache the current notebook data.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        Dict containing notebook data or None if not found\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global _notebook_cache\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not ipython:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get current cell content to identify the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = ipython.get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Check if we already found the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' in _notebook_cache:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Verify it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s still the correct notebook by checking the current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            notebook = _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # If not in cache or cache is invalid, search for the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_dir = Path.cwd()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for nb_file in notebook_files:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                with open(nb_file) as f:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    notebook = json.load(f)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                        if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            # Found the notebook, cache it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = nb_file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            except Exception:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                continue\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error finding notebook: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[21]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef get_notebook_history(max_cells: int = 5) -&gt; list:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        max_cells: Maximum number of previous cells to include\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        List of previous cell contents\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get the cached notebook or find it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook = find_current_notebook()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not notebook:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell index\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = get_ipython().get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cells = notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        last_prompt_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell and last prompt cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx, cell in enumerate(cells):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            source = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], list) else cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if current_idx == -1 and cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source == current_cell:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                current_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find last prompt cell before current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    last_prompt_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if current_idx == -1:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get cells between last prompt and current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        history = []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx in range(start_idx, current_idx):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            cell = cells[idx]            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            source = cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            outputs = cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if not (source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'#|exclude\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                history.append(f\"Cell[{idx}]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{source}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{outputs}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error getting notebook history: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[22]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTesting notebook history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\']\"]}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 28, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[26]:\\\\\\\\nSource:\\\\\\\\n### Creating history-aware prompt\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[27]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\ndef create_history_aware_prompt(prompt: str, message_history: list = None, max_history: int = 5) -&gt; tuple:\\\\\\\\n    \"\"\"Create a prompt with notebook history context and message history.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        prompt: The user\\\\\\\\\\\\\\'s prompt\\\\\\\\n        message_history: Previous conversation messages from results.all_messages()\\\\\\\\n        max_history: Maximum number of previous cells to include\\\\\\\\n        \\\\\\\\n    Returns:\\\\\\\\n        Tuple of (enhanced prompt, combined message history)\\\\\\\\n    \"\"\"\\\\\\\\n    try:\\\\\\\\n        ipython = get_ipython()\\\\\\\\n        if not ipython:\\\\\\\\n            return prompt, message_history\\\\\\\\n        \\\\\\\\n        # Get new cells using our optimized get_notebook_history\\\\\\\\n        new_cells = get_notebook_history(max_cells=max_history)\\\\\\\\n        \\\\\\\\n        if not new_cells and not message_history:\\\\\\\\n            return prompt, None\\\\\\\\n            \\\\\\\\n        # Create message history if none exists\\\\\\\\n        from pydantic_ai.messages import (\\\\\\\\n            ModelRequest, ModelResponse, \\\\\\\\n            UserPromptPart, TextPart\\\\\\\\n        )\\\\\\\\n        \\\\\\\\n        messages = []\\\\\\\\n        \\\\\\\\n        # Add existing message history if provided\\\\\\\\n        if message_history:\\\\\\\\n            messages.extend(message_history)\\\\\\\\n        \\\\\\\\n        # Only add context message if we have new cells\\\\\\\\n        if new_cells:\\\\\\\\n            # Create context message with new cells\\\\\\\\n            history_content = \"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\".join(new_cells)\\\\\\\\n\\\\\\\\n            context_msg = ModelRequest(parts=[\\\\\\\\n                UserPromptPart(\\\\\\\\n                    content=\"Here is the context of new notebook cells that were added:\\\\\\\\\\\\\\\\n\" + history_content\\\\\\\\n                )\\\\\\\\n            ])\\\\\\\\n            \\\\\\\\n            # Create response acknowledging new context\\\\\\\\n            context_response = ModelResponse(parts=[\\\\\\\\n                TextPart(\\\\\\\\n                    content=\"I understand the new notebook context. How can I help?\"\\\\\\\\n                )\\\\\\\\n            ])\\\\\\\\n            \\\\\\\\n            messages.extend([context_msg, context_response])\\\\\\\\n                \\\\\\\\n        return prompt, messages\\\\\\\\n        \\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error creating history-aware prompt: {e}\")\\\\\\\\n        return prompt, message_history\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[28]:\\\\\\\\nSource:\\\\\\\\nTesting history-aware prompt\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[29]:\\\\\\\\nSource:\\\\\\\\ncreate_history_aware_prompt(\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', result.all_messages(), max_history=20)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\"(\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' [ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is 2024-12-31.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 34, 458473, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'  ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', args=ArgsJson(args_json=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be an integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be a non-negative integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\",\"cell_type\":\"code\"}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-call\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 35, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \"  ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\', content=\\\\\\\\\\\\\\'Created new code cell\\\\\\\\\\\\\\', tool_call_id=\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, 114822, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'tool-return\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'  ModelResponse(parts=[TextPart(content=\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \"  ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 58, 747643, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'  ModelResponse(parts=[TextPart(content=\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTo make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfactorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nThis would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 59, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'  ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Here is the context of new notebook cells that were added:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[7]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import cast\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nmodel = cast(KnownModelName, os.getenv(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PYDANTIC_AI_MODEL\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'openai:gpt-4o\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nprint(f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PydanticAI is using model: {model}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnotebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PydanticAI is using model: openai:gpt-4o\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[8]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef refresh_agent():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    notebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[9]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n### Adding cell creation tool\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[10]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom IPython.display import display, Markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Literal\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n@notebook_agent.tool\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef create_cell(ctx: RunContext[str], content: str, cell_type: Literal[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') -&gt; str:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Create a new cell in the notebook with the specified content.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        content: The content to put in the new cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cell_type: Type of cell to create (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' or \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        A confirmation message\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except NameError:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return \"Error: Not running in IPython/Jupyter environment\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Display the content immediately\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if cell_type == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\':\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # display(Markdown(f\"```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{content}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Set up the next cell with the content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython.set_next_input(content)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    else:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        display(Markdown(content))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return f\"Created new {cell_type} cell\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stderr\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;module&gt;:8: No type or annotation for returned value 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[11]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTool testing\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[12]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a new code cell with a simple \"Hello, World!\" function. You can run the cell to see the output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 7, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[13]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef hello_world():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Call the function to display the output\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nhello_world()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[14]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\"], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 9, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[15]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\"Input must be an integer\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[16]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTesting agent with history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[17]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', message_history=result.new_messages())\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'To make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'factorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'This would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 11, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[18]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult.all_messages()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is 2024-12-31.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 34, 458473, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', args=ArgsJson(args_json=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nn    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nn    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be an integern    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be a non-negative integern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\",\"cell_type\":\"code\"}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-call\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 35, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Created new code cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, 114822, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-return\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 58, 747643, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTo make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfactorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nThis would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 59, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 12, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[19]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n### Adding notebook history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[20]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pathlib import Path\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Optional, Dict, Any\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Cache for notebook data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n_notebook_cache: Dict[str, Any] = {}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef find_current_notebook() -&gt; Optional[dict]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Find and cache the current notebook data.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        Dict containing notebook data or None if not found\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global _notebook_cache\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not ipython:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get current cell content to identify the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = ipython.get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Check if we already found the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' in _notebook_cache:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Verify it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s still the correct notebook by checking the current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            notebook = _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # If not in cache or cache is invalid, search for the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_dir = Path.cwd()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for nb_file in notebook_files:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                with open(nb_file) as f:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    notebook = json.load(f)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                        if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            # Found the notebook, cache it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = nb_file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            except Exception:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                continue\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error finding notebook: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[21]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef get_notebook_history(max_cells: int = 5) -&gt; list:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        max_cells: Maximum number of previous cells to include\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        List of previous cell contents\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get the cached notebook or find it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook = find_current_notebook()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not notebook:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell index\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = get_ipython().get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cells = notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        last_prompt_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell and last prompt cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx, cell in enumerate(cells):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            source = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], list) else cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if current_idx == -1 and cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source == current_cell:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                current_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find last prompt cell before current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    last_prompt_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if current_idx == -1:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get cells between last prompt and current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        history = []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx in range(start_idx, current_idx):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            cell = cells[idx]            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            source = cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            outputs = cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if not (source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'#|exclude\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                history.append(f\"Cell[{idx}]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{source}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{outputs}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error getting notebook history: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[22]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTesting notebook history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[23]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnb_hist = get_notebook_history(max_cells=20)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnb_hist\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\"[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[0]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| default_exp core\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[1]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| hide\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom nbdev.showdoc import *\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[2]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom dotenv import load_dotenv\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic import BaseModel, Field\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic_ai import Agent, ModelRetry, RunContext\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic_ai.models import KnownModelName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nload_dotenv()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Enable async/await in Jupyter\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport nest_asyncio\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnest_asyncio.apply()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[3]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom datetime import date\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nsystem_prompt = f\"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is {date.today().strftime(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%Y-%m-%d\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')}.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \"Cell[4]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import cast\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nmodel = cast(KnownModelName, os.getenv(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PYDANTIC_AI_MODEL\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'openai:gpt-4o\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nprint(f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PydanticAI is using model: {model}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnotebook_agent = Agent(model, system_prompt=system_prompt)\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[5]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef refresh_agent():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    notebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[6]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom IPython.display import display, Markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Literal\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n@notebook_agent.tool\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef create_cell(ctx: RunContext[str], content: str, cell_type: Literal[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'codemarkdowncode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') -&gt; str:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Create a new cell in the notebook with the specified content.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        content: The content to put in the new cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cell_type: Type of cell to create (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' or \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        A confirmation message\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except NameError:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return \"Error: Not running in IPython/Jupyter environment\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Display the content immediately\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if cell_type == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\':\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # display(Markdown(f\"```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{content}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Set up the next cell with the content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython.set_next_input(content)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    else:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        display(Markdown(content))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return f\"Created new {cell_type} cell\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \"Cell[7]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \"Cell[8]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef hello_world():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Call the function to display the output\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nhello_world()\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[9]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[10]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef factorial(number):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation to check if the number is a non-negative integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(number, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\"Input must be an integer.\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if number &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer.\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 or 1 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if number == 0 or number == 1:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    else:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return number * factorial(number - 1)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Example usage\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nprint(factorial(5))  # Output: 120\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nprint(factorial(0))  # Output: 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Uncomment the following lines to test input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# print(factorial(-1))  # Should raise ValueError\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# print(factorial(3.5))  # Should raise ValueError\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \"Cell[11]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', message_history=result.new_messages())\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[12]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult.all_messages()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[13]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pathlib import Path\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Optional, Dict, Any\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Cache for notebook data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n_notebook_cache: Dict[str, Any] = {}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef find_current_notebook() -&gt; Optional[dict]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Find and cache the current notebook data.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        Dict containing notebook data or None if not found\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global _notebook_cache\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not ipython:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get current cell content to identify the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = ipython.get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'contentcode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Check if we already found the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' in _notebook_cache:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Verify it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s still the correct notebook by checking the current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            notebook = _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_typecode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\njoin(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # If not in cache or cache is invalid, search for the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_dir = Path.cwd()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for nb_file in notebook_files:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                with open(nb_file) as f:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    notebook = json.load(f)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                        if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_typecode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\njoin(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            # Found the notebook, cache it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = nb_file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            except Exception:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                continue\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error finding notebook: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[14]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef get_notebook_history(max_cells: int = 5) -&gt; list:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        max_cells: Maximum number of previous cells to include\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        List of previous cell contents\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get the cached notebook or find it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook = find_current_notebook()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not notebook:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell index\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = get_ipython().get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'contentcode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cells = notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        last_prompt_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell and last prompt cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx, cell in enumerate(cells):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            source = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], list) else cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if current_idx == -1 and cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_typecode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source == current_cell:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                current_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find last prompt cell before current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_typecode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    last_prompt_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if current_idx == -1:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get cells between last prompt and current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        history = []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx in range(start_idx, current_idx):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            cell = cells[idx]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_typecode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\':  # Only include code cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                # Skip cells that are prompt cells and nbdev directives\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                source = cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], str) elsejoin(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if not source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    history.append(f\"Cell[{idx}]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{source}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error getting notebook history: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 58, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[24]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n### Creating history-aware prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[25]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef create_history_aware_prompt(prompt: str, message_history: list = None, max_history: int = 5) -&gt; tuple:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Create a prompt with notebook history context and message history.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        prompt: The user\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        message_history: Previous conversation messages from results.all_messages()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        max_history: Maximum number of previous cells to include\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        Tuple of (enhanced prompt, combined message history)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not ipython:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return prompt, message_history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get new cells using our optimized get_notebook_history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        new_cells = get_notebook_history(max_cells=max_history)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not new_cells and not message_history:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return prompt, None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Create message history if none exists\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        from pydantic_ai.messages import (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            ModelRequest, ModelResponse, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            UserPromptPart, TextPart\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        messages = []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Add existing message history if provided\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if message_history:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            messages.extend(message_history)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Only add context message if we have new cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if new_cells:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Create context message with new cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            history_content = \"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\".join(new_cells)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            context_msg = ModelRequest(parts=[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                UserPromptPart(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    content=\"Here is the context of new notebook cells that were added:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\" + history_content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            ])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Create response acknowledging new context\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            context_response = ModelResponse(parts=[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                TextPart(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    content=\"I understand the new notebook context. How can I help?\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            ])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            messages.extend([context_msg, context_response])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return prompt, messages\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error creating history-aware prompt: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return prompt, message_history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[26]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTesting history-aware prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 26, 5, 737496, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \"  ModelResponse(parts=[TextPart(content=\\\\\\\\\\\\\\'I understand the new notebook context. How can I help?\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 26, 5, 737510, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\')])\"]}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 30, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[30]:\\\\\\\\nSource:\\\\\\\\n### Running agent with notebook history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[31]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nfrom typing import Any\\\\\\\\ndef run_with_history(agent: Agent, prompt: str, message_history: list = None, max_history: int = 5) -&gt; Any:\\\\\\\\n    \"\"\"Run the agent with notebook and conversation history context.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        agent: The PydanticAI agent\\\\\\\\n        prompt: The user\\\\\\\\\\\\\\'s prompt\\\\\\\\n        message_history: Previous conversation messages\\\\\\\\n        max_history: Maximum number of previous cells to include\\\\\\\\n        \\\\\\\\n    Returns:\\\\\\\\n        Agent run result\\\\\\\\n    \"\"\"\\\\\\\\n    prompt, combined_history = create_history_aware_prompt(\\\\\\\\n        prompt, \\\\\\\\n        message_history=message_history, \\\\\\\\n        max_history=max_history\\\\\\\\n    )\\\\\\\\n    return agent.run_sync(prompt, message_history=combined_history)\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[32]:\\\\\\\\nSource:\\\\\\\\nTesting run_with_history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 37, 976699, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'user-prompt\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \" ModelResponse(parts=[TextPart(content=\\'I understand the new notebook context. How can I help?\\', part_kind=\\'text\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 37, 976722, tzinfo=datetime.timezone.utc), kind=\\'response\\'),\\\\n\", \" ModelRequest(parts=[UserPromptPart(content=\\'So what is going on in this notebook?\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 37, 976975, tzinfo=datetime.timezone.utc), part_kind=\\'user-prompt\\')], kind=\\'request\\'),\\\\n\", \\' ModelResponse(parts=[TextPart(content=\\\\\\'This notebook appears to be part of a system that uses an AI agent to automate tasks within a Jupyter notebook. Here are some key points:\\\\\\\\n\\\\\\\\n1. **AI Agent Integration**: The notebook is integrating a Pydantic AI model, specifically an agent that seems to respond to prompts and perform tasks within the notebook environment.\\\\\\\\n\\\\\\\\n2. **Function Definitions**: Several Python functions have been defined:\\\\\\\\n   - `factorial()`: This function calculates the factorial of a number with input validation.\\\\\\\\n   - `hello_world()`: A simple function that prints \"Hello, World!\".\\\\\\\\n   \\\\\\\\n3. **Cell Creation and Management**: There are functions and tools implemented to create and manage notebook cells programmatically. For example, the `create_cell` function uses the IPython\\\\\\\\\\\\\\'s API to insert new cells.\\\\\\\\n\\\\\\\\n4. **Notebook History Management**: The notebook implements functionality to keep track of the history of executed notebook cells, which can be used to provide context to the AI agent.\\\\\\\\n\\\\\\\\n5. **History-Aware Prompts**: Functions like `create_history_aware_prompt` are used to create prompts that include historical context from the notebook. This allows the AI to make more informed decisions by understanding previous interactions and code.\\\\\\\\n\\\\\\\\n6. **Testing and Execution**: The notebook includes cells dedicated to testing these features, like running the agent with notebook history and testing the factorial function.\\\\\\\\n\\\\\\\\nOverall, it seems to be an experimental setup aiming to enhance interaction with a Jupyter notebook using AI for improved productivity and dynamic task execution.\\\\\\', part_kind=\\\\\\'text\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 39, tzinfo=datetime.timezone.utc), kind=\\\\\\'response\\\\\\')]\\']}, \\'execution_count\\': 23, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]\\n\\nCell[37]:\\nSource:\\n#| export\\n@notebook_agent.tool\\ndef modify_cell(ctx: RunContext[str], cell_index: int, content: str) -&gt; str:\\n    \"\"\"Modify an existing cell in the notebook.\\n    \\n    Args:\\n        cell_index: The index of the cell to modify\\n        content: The new content for the cell\\n        \\n    Returns:\\n        A confirmation message\\n    \"\"\"\\n    try:\\n        notebook = find_current_notebook()\\n        if not notebook:\\n            return \"Error: Could not find current notebook\"\\n            \\n        cells = notebook[\\'cells\\']\\n        if cell_index &lt; 0 or cell_index &gt;= len(cells):\\n            return f\"Error: Cell index {cell_index} is out of range\"\\n            \\n        # Get the cell\\n        cell = cells[cell_index]\\n        \\n        # Update the cell content in IPython\\n        ipython = get_ipython()\\n        if not ipython:\\n            return \"Error: Not running in IPython environment\"\\n            \\n        # Set the content of the specified cell\\n        ipython.set_next_input(content, replace=True)\\n        \\n        return f\"Modified cell {cell_index} with new content\"\\n        \\n    except Exception as e:\\n        return f\"Error modifying cell: {str(e)}\"\\nOutputs:\\n[{\\'name\\': \\'stderr\\', \\'output_type\\': \\'stream\\', \\'text\\': [\\'&lt;module&gt;:8: No type or annotation for returned value 1\\\\n\\']}, {\\'ename\\': \\'UserError\\', \\'evalue\\': \"Tool name conflicts with existing tool: \\'modify_cell\\'\", \\'output_type\\': \\'error\\', \\'traceback\\': [\\'\\\\x1b[0;31m---------------------------------------------------------------------------\\\\x1b[0m\\', \\'\\\\x1b[0;31mUserError\\\\x1b[0m                                 Traceback (most recent call last)\\', \\'Cell \\\\x1b[0;32mIn[42], line 2\\\\x1b[0m\\\\n\\\\x1b[1;32m      1\\\\x1b[0m \\\\x1b[38;5;66;03m#| export\\\\x1b[39;00m\\\\n\\\\x1b[0;32m----&gt; 2\\\\x1b[0m \\\\x1b[38;5;129;43m@notebook_agent\\\\x1b[39;49m\\\\x1b[38;5;241;43m.\\\\x1b[39;49m\\\\x1b[43mtool\\\\x1b[49m\\\\n\\\\x1b[1;32m      3\\\\x1b[0m \\\\x1b[38;5;28;43;01mdef\\\\x1b[39;49;00m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;21;43mmodify_cell\\\\x1b[39;49m\\\\x1b[43m(\\\\x1b[49m\\\\x1b[43mctx\\\\x1b[49m\\\\x1b[43m:\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[43mRunContext\\\\x1b[49m\\\\x1b[43m[\\\\x1b[49m\\\\x1b[38;5;28;43mstr\\\\x1b[39;49m\\\\x1b[43m]\\\\x1b[49m\\\\x1b[43m,\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[43mcell_index\\\\x1b[49m\\\\x1b[43m:\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;28;43mint\\\\x1b[39;49m\\\\x1b[43m,\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[43mcontent\\\\x1b[49m\\\\x1b[43m:\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;28;43mstr\\\\x1b[39;49m\\\\x1b[43m)\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;241;43m-\\\\x1b[39;49m\\\\x1b[38;5;241;43m&gt;\\\\x1b[39;49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;28;43mstr\\\\x1b[39;49m\\\\x1b[43m:\\\\x1b[49m\\\\n\\\\x1b[1;32m      4\\\\x1b[0m \\\\x1b[38;5;250;43m    \\\\x1b[39;49m\\\\x1b[38;5;124;43;03m\"\"\"Modify an existing cell in the notebook.\\\\x1b[39;49;00m\\\\n\\\\x1b[1;32m      5\\\\x1b[0m \\\\x1b[38;5;124;43;03m    \\\\x1b[39;49;00m\\\\n\\\\x1b[1;32m      6\\\\x1b[0m \\\\x1b[38;5;124;43;03m    Args:\\\\x1b[39;49;00m\\\\n\\\\x1b[0;32m   (...)\\\\x1b[0m\\\\n\\\\x1b[1;32m     11\\\\x1b[0m \\\\x1b[38;5;124;43;03m        A confirmation message\\\\x1b[39;49;00m\\\\n\\\\x1b[1;32m     12\\\\x1b[0m \\\\x1b[38;5;124;43;03m    \"\"\"\\\\x1b[39;49;00m\\\\n\\\\x1b[1;32m     13\\\\x1b[0m \\\\x1b[43m    \\\\x1b[49m\\\\x1b[38;5;28;43;01mtry\\\\x1b[39;49;00m\\\\x1b[43m:\\\\x1b[49m\\\\n\\', \\'File \\\\x1b[0;32m~/WebDev/FH_SQLModel/.venv/lib/python3.12/site-packages/pydantic_ai/agent.py:683\\\\x1b[0m, in \\\\x1b[0;36mAgent.tool\\\\x1b[0;34m(self, func, retries, prepare)\\\\x1b[0m\\\\n\\\\x1b[1;32m    680\\\\x1b[0m     \\\\x1b[38;5;28;01mreturn\\\\x1b[39;00m tool_decorator\\\\n\\\\x1b[1;32m    681\\\\x1b[0m \\\\x1b[38;5;28;01melse\\\\x1b[39;00m:\\\\n\\\\x1b[1;32m    682\\\\x1b[0m     \\\\x1b[38;5;66;03m# noinspection PyTypeChecker\\\\x1b[39;00m\\\\n\\\\x1b[0;32m--&gt; 683\\\\x1b[0m     \\\\x1b[38;5;28;43mself\\\\x1b[39;49m\\\\x1b[38;5;241;43m.\\\\x1b[39;49m\\\\x1b[43m_register_function\\\\x1b[49m\\\\x1b[43m(\\\\x1b[49m\\\\x1b[43mfunc\\\\x1b[49m\\\\x1b[43m,\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;28;43;01mTrue\\\\x1b[39;49;00m\\\\x1b[43m,\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[43mretries\\\\x1b[49m\\\\x1b[43m,\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[43mprepare\\\\x1b[49m\\\\x1b[43m)\\\\x1b[49m\\\\n\\\\x1b[1;32m    684\\\\x1b[0m     \\\\x1b[38;5;28;01mreturn\\\\x1b[39;00m func\\\\n\\', \\'File \\\\x1b[0;32m~/WebDev/FH_SQLModel/.venv/lib/python3.12/site-packages/pydantic_ai/agent.py:765\\\\x1b[0m, in \\\\x1b[0;36mAgent._register_function\\\\x1b[0;34m(self, func, takes_ctx, retries, prepare)\\\\x1b[0m\\\\n\\\\x1b[1;32m    763\\\\x1b[0m retries_ \\\\x1b[38;5;241m=\\\\x1b[39m retries \\\\x1b[38;5;28;01mif\\\\x1b[39;00m retries \\\\x1b[38;5;129;01mis\\\\x1b[39;00m \\\\x1b[38;5;129;01mnot\\\\x1b[39;00m \\\\x1b[38;5;28;01mNone\\\\x1b[39;00m \\\\x1b[38;5;28;01melse\\\\x1b[39;00m \\\\x1b[38;5;28mself\\\\x1b[39m\\\\x1b[38;5;241m.\\\\x1b[39m_default_retries\\\\n\\\\x1b[1;32m    764\\\\x1b[0m tool \\\\x1b[38;5;241m=\\\\x1b[39m Tool(func, takes_ctx\\\\x1b[38;5;241m=\\\\x1b[39mtakes_ctx, max_retries\\\\x1b[38;5;241m=\\\\x1b[39mretries_, prepare\\\\x1b[38;5;241m=\\\\x1b[39mprepare)\\\\n\\\\x1b[0;32m--&gt; 765\\\\x1b[0m \\\\x1b[38;5;28;43mself\\\\x1b[39;49m\\\\x1b[38;5;241;43m.\\\\x1b[39;49m\\\\x1b[43m_register_tool\\\\x1b[49m\\\\x1b[43m(\\\\x1b[49m\\\\x1b[43mtool\\\\x1b[49m\\\\x1b[43m)\\\\x1b[49m\\\\n\\', \"File \\\\x1b[0;32m~/WebDev/FH_SQLModel/.venv/lib/python3.12/site-packages/pydantic_ai/agent.py:774\\\\x1b[0m, in \\\\x1b[0;36mAgent._register_tool\\\\x1b[0;34m(self, tool)\\\\x1b[0m\\\\n\\\\x1b[1;32m    771\\\\x1b[0m     tool \\\\x1b[38;5;241m=\\\\x1b[39m dataclasses\\\\x1b[38;5;241m.\\\\x1b[39mreplace(tool, max_retries\\\\x1b[38;5;241m=\\\\x1b[39m\\\\x1b[38;5;28mself\\\\x1b[39m\\\\x1b[38;5;241m.\\\\x1b[39m_default_retries)\\\\n\\\\x1b[1;32m    773\\\\x1b[0m \\\\x1b[38;5;28;01mif\\\\x1b[39;00m tool\\\\x1b[38;5;241m.\\\\x1b[39mname \\\\x1b[38;5;129;01min\\\\x1b[39;00m \\\\x1b[38;5;28mself\\\\x1b[39m\\\\x1b[38;5;241m.\\\\x1b[39m_function_tools:\\\\n\\\\x1b[0;32m--&gt; 774\\\\x1b[0m     \\\\x1b[38;5;28;01mraise\\\\x1b[39;00m exceptions\\\\x1b[38;5;241m.\\\\x1b[39mUserError(\\\\x1b[38;5;124mf\\\\x1b[39m\\\\x1b[38;5;124m\\'\\\\x1b[39m\\\\x1b[38;5;124mTool name conflicts with existing tool: \\\\x1b[39m\\\\x1b[38;5;132;01m{\\\\x1b[39;00mtool\\\\x1b[38;5;241m.\\\\x1b[39mname\\\\x1b[38;5;132;01m!r}\\\\x1b[39;00m\\\\x1b[38;5;124m\\'\\\\x1b[39m)\\\\n\\\\x1b[1;32m    776\\\\x1b[0m \\\\x1b[38;5;28;01mif\\\\x1b[39;00m \\\\x1b[38;5;28mself\\\\x1b[39m\\\\x1b[38;5;241m.\\\\x1b[39m_result_schema \\\\x1b[38;5;129;01mand\\\\x1b[39;00m tool\\\\x1b[38;5;241m.\\\\x1b[39mname \\\\x1b[38;5;129;01min\\\\x1b[39;00m \\\\x1b[38;5;28mself\\\\x1b[39m\\\\x1b[38;5;241m.\\\\x1b[39m_result_schema\\\\x1b[38;5;241m.\\\\x1b[39mtools:\\\\n\\\\x1b[1;32m    777\\\\x1b[0m     \\\\x1b[38;5;28;01mraise\\\\x1b[39;00m exceptions\\\\x1b[38;5;241m.\\\\x1b[39mUserError(\\\\x1b[38;5;124mf\\\\x1b[39m\\\\x1b[38;5;124m\\'\\\\x1b[39m\\\\x1b[38;5;124mTool name conflicts with result schema name: \\\\x1b[39m\\\\x1b[38;5;132;01m{\\\\x1b[39;00mtool\\\\x1b[38;5;241m.\\\\x1b[39mname\\\\x1b[38;5;132;01m!r}\\\\x1b[39;00m\\\\x1b[38;5;124m\\'\\\\x1b[39m)\\\\n\", \"\\\\x1b[0;31mUserError\\\\x1b[0m: Tool name conflicts with existing tool: \\'modify_cell\\'\"]}]\\n\\nCell[38]:\\nSource:\\n\\nOutputs:\\n[]\\n\\nCell[39]:\\nSource:\\n### Creating prompt cell magic\\nOutputs:\\nNone\\n\\nCell[40]:\\nSource:\\n#| export\\nfrom IPython.core.magic import register_cell_magic\\n\\n#| export\\n@register_cell_magic\\ndef prompt(line, cell):\\n    \"\"\"Cell magic to create prompt cells that interact with the AI agent.\"\"\"\\n    try:\\n        # Get the last result\\'s message history if it exists\\n        message_history = None\\n        if \\'last_prompt_result\\' in get_ipython().user_ns:\\n            last_result = get_ipython().user_ns[\\'last_prompt_result\\']\\n            if hasattr(last_result, \\'all_messages\\'):\\n                message_history = last_result.all_messages()\\n        \\n        # Use get_current_agent() instead of notebook_agent directly\\n        agent = get_current_agent()\\n        \\n        # Run the prompt through our agent with history context\\n        result = run_with_history(\\n            agent, \\n            cell.strip(), \\n            message_history=message_history\\n        )\\n        \\n        # Store the result for next time\\n        get_ipython().user_ns[\\'last_prompt_result\\'] = result\\n        \\n        return Markdown(result.data)\\n    except Exception as e:\\n        return f\"Error processing prompt: {str(e)}\"\\nOutputs:\\n[]', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 59, 436565, tzinfo=datetime.timezone.utc), part_kind='user-prompt')], kind='request'),\n ModelResponse(parts=[TextPart(content='I understand the new notebook context. How can I help?', part_kind='text')], timestamp=datetime.datetime(2024, 12, 31, 13, 10, 59, 436588, tzinfo=datetime.timezone.utc), kind='response'),\n ModelRequest(parts=[UserPromptPart(content='what this notebook is all about?', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 59, 436914, tzinfo=datetime.timezone.utc), part_kind='user-prompt')], kind='request'),\n ModelResponse(parts=[TextPart(content='This notebook appears to be part of a system that uses an AI agent to automate tasks within a Jupyter notebook. Here are some key points:\\n\\n1. **AI Agent Integration**: The notebook is integrating a Pydantic AI model, specifically an agent that seems to respond to prompts and perform tasks within the notebook environment.\\n\\n2. **Function Definitions**: Several Python functions have been defined:\\n   - `factorial()`: This function calculates the factorial of a number with input validation.\\n   - `hello_world()`: A simple function that prints \"Hello, World!\".\\n\\n3. **Cell Creation and Management**: There are functions and tools implemented to create and manage notebook cells programmatically. For example, the `create_cell` function uses the IPython\\'s API to insert new cells.\\n\\n4. **Notebook History Management**: The notebook implements functionality to keep track of the history of executed notebook cells, which can be used to provide context to the AI agent.\\n\\n5. **History-Aware Prompts**: Functions like `create_history_aware_prompt` are used to create prompts that include historical context from the notebook. This allows the AI to make more informed decisions by understanding previous interactions and code.\\n\\n6. **Testing and Execution**: The notebook includes cells dedicated to testing these features, like running the agent with notebook history and testing the factorial function.\\n\\nOverall, it seems to be an experimental setup aiming to enhance interaction with a Jupyter notebook using AI for improved productivity and dynamic task execution.', part_kind='text')], timestamp=datetime.datetime(2024, 12, 31, 13, 11, 33, tzinfo=datetime.timezone.utc), kind='response')]",
    "crumbs": [
      "Dependencies"
    ]
  },
  {
    "objectID": "core.html#agent-tools",
    "href": "core.html#agent-tools",
    "title": "Dependencies",
    "section": "",
    "text": "source\n\n\n\n\n create_cell (ctx:pydantic_ai.tools.RunContext[str], content:str,\n              cell_type:Literal['code','markdown']='code')\n\n*Create a new cell in the notebook with the specified content.\nArgs: content: The content to put in the new cell cell_type: Type of cell to create (‚Äòcode‚Äô or ‚Äòmarkdown‚Äô)\nReturns: A confirmation message*\nAlways set custom agents to inherit base tools\n\nsource\n\n\n\n\n set_agent (agent:pydantic_ai.agent.Agent)\n\n*Set a custom agent for the notebook.\nArgs: agent: PydanticAI agent instance\nReturns: Configured agent with required tools*\nTool testing cell creation tool\n\nresult = notebook_agent.run_sync('can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?')\nMarkdown(result.data)\n\nI have created a new cell with a simple ‚ÄúHello, World!‚Äù function. You can run it to see the output.\n\n\n\ndef hello_world():\n    print(\"Hello, World!\")\n\nhello_world()\n\n\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\nMarkdown(result.data)\n\nI created a function that calculates the factorial of a number with input validation. You can test it in the new cell provided.\n\n\n\ndef factorial(n):\n    \"\"\"\n    Calculate the factorial of a non-negative integer n.\n\n    Parameters:\n    n (int): A non-negative integer whose factorial is to be computed\n\n    Returns:\n    int: Factorial of the input number n\n    \"\"\"\n    # Input validation\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    if n &lt; 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n\n    # Base case: factorial of 0 is 1\n    if n == 0:\n        return 1\n\n    # Recursive case: n! = n * (n-1)!\n    return n * factorial(n - 1)\n\nTesting agent with history\n\nresult = notebook_agent.run_sync('So what you just made for me here?', message_history=result.new_messages())\nMarkdown(result.data)\n\nI created a Python function named factorial that calculates the factorial of a non-negative integer. The function includes input validation to ensure that the input is a non-negative integer. If the input is not an integer or is negative, the function raises a ValueError with an appropriate message.\nHere‚Äôs a summary of the key parts of the code:\n\nInput Validation:\n\nChecks if n is an integer. If not, it raises a ValueError.\nChecks if n is a non-negative integer. If n is negative, it raises a ValueError.\n\nFactorial Calculation:\n\nUses an iterative approach to calculate the factorial.\nReturns 1 if n is 0 (the factorial of 0 is 1).\nUses a for-loop to compute the factorial for positive integers.\n\nExample Usage:\n\nDemonstrates the function by calculating the factorial of 5.\nIncludes a try-except block to catch and print the error message if a ValueError is raised when computing the factorial of a negative number.\n\n\nYou can execute the cell to see how it works or modify it to test with other values.\n\n\n\nresult.all_messages()\n\n[ModelRequest(parts=[SystemPromptPart(content=\"\\nYou are a helpful assistant that operates in a Jupyter notebook.\\nYour regular text responses are rendered as cell output.\\nYou can create new cells, edit existing cells, and run code.\\nYou can also use tools to help you with your tasks.\\nToday's date is 2024-12-31.\\n\", part_kind='system-prompt'), UserPromptPart(content='Create a function that calculates the factorial of a number with input validation', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 43, 700768, tzinfo=datetime.timezone.utc), part_kind='user-prompt')], kind='request'),\n ModelResponse(parts=[ToolCallPart(tool_name='create_cell', args=ArgsJson(args_json='{\"content\":\"def factorial(n):\\\\n    \\\\\"\\\\\"\\\\\"\\\\n    Calculate the factorial of a non-negative integer n.\\\\n    \\\\n    :param n: non-negative integer\\\\n    :return: factorial of n\\\\n    \\\\\"\\\\\"\\\\\"\\\\n    # Input validation\\\\n    if not isinstance(n, int):\\\\n        raise ValueError(\\\\\"Input must be an integer.\\\\\")\\\\n    if n &lt; 0:\\\\n        raise ValueError(\\\\\"Input must be a non-negative integer.\\\\\")\\\\n    \\\\n    # Base case\\\\n    if n == 0:\\\\n        return 1\\\\n    \\\\n    # Recursive case\\\\n    result = 1\\\\n    for i in range(1, n + 1):\\\\n        result *= i\\\\n    return result\\\\n\\\\n# Example usage\\\\ntry:\\\\n    print(factorial(5))  # Should print 120\\\\n    print(factorial(-1)) # Should raise a ValueError\\\\nexcept ValueError as e:\\\\n    print(e)\",\"cell_type\":\"code\"}'), tool_call_id='call_dP852a9HSFo4HgyvUTm6NtHd', part_kind='tool-call')], timestamp=datetime.datetime(2024, 12, 31, 13, 10, 44, tzinfo=datetime.timezone.utc), kind='response'),\n ModelRequest(parts=[ToolReturnPart(tool_name='create_cell', content='Created new code  with content: def factorial(n):\\n    \"\"\"\\n    Calculate the factorial of a non-negative integer n.\\n    \\n    :param n: non-negative integer\\n    :return: factorial of n\\n    \"\"\"\\n    # Input validation\\n    if not isinstance(n, int):\\n        raise ValueError(\"Input must be an integer.\")\\n    if n &lt; 0:\\n        raise ValueError(\"Input must be a non-negative integer.\")\\n    \\n    # Base case\\n    if n == 0:\\n        return 1\\n    \\n    # Recursive case\\n    result = 1\\n    for i in range(1, n + 1):\\n        result *= i\\n    return result\\n\\n# Example usage\\ntry:\\n    print(factorial(5))  # Should print 120\\n    print(factorial(-1)) # Should raise a ValueError\\nexcept ValueError as e:\\n    print(e)', tool_call_id='call_dP852a9HSFo4HgyvUTm6NtHd', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 47, 279330, tzinfo=datetime.timezone.utc), part_kind='tool-return')], kind='request'),\n ModelResponse(parts=[TextPart(content='I created a function that calculates the factorial of a number with input validation. You can test it in the new cell provided.', part_kind='text')], timestamp=datetime.datetime(2024, 12, 31, 13, 10, 48, tzinfo=datetime.timezone.utc), kind='response'),\n ModelRequest(parts=[UserPromptPart(content='So what you just made for me here?', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 48, 46240, tzinfo=datetime.timezone.utc), part_kind='user-prompt')], kind='request'),\n ModelResponse(parts=[TextPart(content=\"I created a Python function named `factorial` that calculates the factorial of a non-negative integer. The function includes input validation to ensure that the input is a non-negative integer. If the input is not an integer or is negative, the function raises a `ValueError` with an appropriate message. \\n\\nHere's a summary of the key parts of the code:\\n\\n- **Input Validation**: \\n  - Checks if `n` is an integer. If not, it raises a `ValueError`.\\n  - Checks if `n` is a non-negative integer. If `n` is negative, it raises a `ValueError`.\\n\\n- **Factorial Calculation**: \\n  - Uses an iterative approach to calculate the factorial.\\n  - Returns `1` if `n` is `0` (the factorial of 0 is 1).\\n  - Uses a for-loop to compute the factorial for positive integers.\\n\\n- **Example Usage**: \\n  - Demonstrates the function by calculating the factorial of 5.\\n  - Includes a try-except block to catch and print the error message if a `ValueError` is raised when computing the factorial of a negative number.\\n\\nYou can execute the cell to see how it works or modify it to test with other values.\", part_kind='text')], timestamp=datetime.datetime(2024, 12, 31, 13, 10, 48, tzinfo=datetime.timezone.utc), kind='response')]\n\n\n\n\n\n\nsource\n\n\n\n\n find_current_notebook ()\n\n*Find and cache the current notebook data.\nReturns: Dict containing notebook data or None if not found*\n\nsource\n\n\n\n\n get_notebook_history (max_cells:int=10)\n\n*Get the content of notebook cells between current and last prompt cell.\nArgs: max_cells: Maximum number of previous cells to include\nReturns: List of previous cell contents*\nTesting notebook history\n\nnb_hist = get_notebook_history(max_cells=20)\nnb_hist\n\n[\"Cell[7]:\\nSource:\\n#| export\\nfrom typing import cast\\nmodel = cast(KnownModelName, os.getenv('PYDANTIC_AI_MODEL', 'openai:gpt-4o'))\\nprint(f'PydanticAI is using model: {model}')\\nnotebook_agent = Agent(model, system_prompt=system_prompt)\\nOutputs:\\n[{'name': 'stdout', 'output_type': 'stream', 'text': ['PydanticAI is using model: openai:gpt-4o\\\\n']}]\",\n 'Cell[8]:\\nSource:\\n#| export\\n_current_agent: Optional[Agent] = None\\n\\ndef get_current_agent() -&gt; Agent:\\n    \"\"\"Get the current agent, falling back to default notebook_agent if none set.\"\"\"\\n    global _current_agent, notebook_agent\\n    return _current_agent or notebook_agent\\n\\nOutputs:\\n[]',\n 'Cell[9]:\\nSource:\\n## Agent tools\\nOutputs:\\nNone',\n 'Cell[10]:\\nSource:\\n### Create cell tool\\nOutputs:\\nNone',\n 'Cell[11]:\\nSource:\\n#| export\\nfrom IPython.display import display, Markdown\\nfrom typing import Literal\\n\\n@notebook_agent.tool\\ndef create_cell(ctx: RunContext[str], content: str, cell_type: Literal[\\'code\\', \\'markdown\\'] = \\'code\\') -&gt; str:\\n    \"\"\"Create a new cell in the notebook with the specified content.\\n    \\n    Args:\\n        content: The content to put in the new cell\\n        cell_type: Type of cell to create (\\'code\\' or \\'markdown\\')\\n    \\n    Returns:\\n        A confirmation message\\n    \"\"\"\\n    try:    \\n        ipython = get_ipython()\\n    except NameError:\\n        return \"Error: Not running in IPython/Jupyter environment\"\\n    \\n    # Display the content immediately\\n    if cell_type == \\'code\\':\\n        # Set up the next cell with the content\\n        ipython.set_next_input(content)\\n    else:\\n        display(Markdown(content))\\n    \\n    return f\"Created new {cell_type}  with content: {content}\"\\nOutputs:\\n[{\\'name\\': \\'stderr\\', \\'output_type\\': \\'stream\\', \\'text\\': [\\'&lt;module&gt;:8: No type or annotation for returned value 1\\\\n\\']}]',\n 'Cell[12]:\\nSource:\\nAlways set custom agents to inherit base tools\\n\\nOutputs:\\nNone',\n 'Cell[13]:\\nSource:\\n#| export\\ndef set_agent(agent: Agent) -&gt; Agent:\\n    \"\"\"Set a custom agent for the notebook.\\n    \\n    Args:\\n        agent: PydanticAI agent instance\\n        \\n    Returns:\\n        Configured agent with required tools\\n    \"\"\"\\n    global _current_agent, notebook_agent\\n        \\n    # Always ensure create_cell tool is available\\n    if \\'create_cell\\' not in agent._function_tools:\\n        # Copy the tool directly from notebook_agent\\n        agent._function_tools = notebook_agent._function_tools\\n    \\n    _current_agent = agent\\n    return agent\\nOutputs:\\n[]',\n 'Cell[14]:\\nSource:\\nTool testing cell creation tool\\nOutputs:\\nNone',\n 'Cell[15]:\\nSource:\\nresult = notebook_agent.run_sync(\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\')\\nMarkdown(result.data)\\nOutputs:\\n[{\\'data\\': {\\'text/markdown\\': [\\'I\\\\\\'ve created a new cell with a simple \"Hello, World!\" function. You can run it to see the output.\\'], \\'text/plain\\': [\\'&lt;IPython.core.display.Markdown object&gt;\\']}, \\'execution_count\\': 10, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]',\n 'Cell[16]:\\nSource:\\ndef hello_world():\\n    print(\"Hello, world!\")\\n\\nhello_world()\\nOutputs:\\n[]',\n 'Cell[17]:\\nSource:\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\nMarkdown(result.data)\\nOutputs:\\n[{\\'data\\': {\\'text/markdown\\': [\\'I have created a function to calculate the factorial of a number with input validation. You can test it by calling the `factorial` function with a non-negative integer as the argument.\\'], \\'text/plain\\': [\\'&lt;IPython.core.display.Markdown object&gt;\\']}, \\'execution_count\\': 12, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]',\n 'Cell[18]:\\nSource:\\ndef factorial(n):\\n    \"\"\"\\n    Calculate the factorial of a non-negative integer n.\\n\\n    Parameters:\\n    n (int): A non-negative integer whose factorial is to be computed\\n\\n    Returns:\\n    int: Factorial of the input number n\\n    \"\"\"\\n    # Input validation\\n    if not isinstance(n, int):\\n        raise TypeError(\"Input must be an integer\")\\n    if n &lt; 0:\\n        raise ValueError(\"Input must be a non-negative integer\")\\n\\n    # Base case: factorial of 0 is 1\\n    if n == 0:\\n        return 1\\n\\n    # Recursive case: n! = n * (n-1)!\\n    return n * factorial(n - 1)\\nOutputs:\\n[]',\n 'Cell[19]:\\nSource:\\nTesting agent with history\\nOutputs:\\nNone',\n 'Cell[20]:\\nSource:\\nresult = notebook_agent.run_sync(\\'So what you just made for me here?\\', message_history=result.new_messages())\\nMarkdown(result.data)\\nOutputs:\\n[{\\'data\\': {\\'text/markdown\\': [\\'I created a Python function named `factorial` that calculates the factorial of a non-negative integer. This function includes input validation to ensure that the input is a non-negative integer. If the input is not valid (i.e., not an integer or a negative integer), it raises a `ValueError`.\\\\n\\', \\'\\\\n\\', \"Here\\'s a summary of what the function does:\\\\n\", \\'- It checks if the input is an integer. If not, it raises a `ValueError`.\\\\n\\', \"- It checks if the input is a non-negative integer. If it\\'s negative, it raises a `ValueError`.\\\\n\", \\'- If the input is 0 or 1, it returns 1 (since 0! = 1! = 1).\\\\n\\', \\'- For other positive integers, it calculates the factorial by multiplying all integers from 2 up to the input number and returns the result.\\'], \\'text/plain\\': [\\'&lt;IPython.core.display.Markdown object&gt;\\']}, \\'execution_count\\': 14, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]',\n 'Cell[21]:\\nSource:\\nresult.all_messages()\\nOutputs:\\n[{\\'data\\': {\\'text/plain\\': [\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\nToday\\\\\\'s date is 2024-12-31.\\\\\\\\n\", part_kind=\\\\\\'system-prompt\\\\\\'), UserPromptPart(content=\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 28, 691513, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'user-prompt\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\'create_cell\\\\\\', args=ArgsJson(args_json=\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n with input validation.\\\\\\\\\\\\\\\\n    :param n: non-negative integer\\\\\\\\\\\\\\\\n    :return: factorial of n\\\\\\\\\\\\\\\\n    :raises ValueError: if n is not a non-negative integer\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\"Input must be an integer\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\"Input must be a non-negative integer\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n    if n == 0 or n == 1:\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\n    result = 1\\\\\\\\\\\\\\\\n    for i in range(2, n + 1):\\\\\\\\\\\\\\\\n        result *= i\\\\\\\\\\\\\\\\n    return result\",\"cell_type\":\"code\"}\\\\\\'), tool_call_id=\\\\\\'call_Iuc8vC4Y2axuMDvDh3TlF9mz\\\\\\', part_kind=\\\\\\'tool-call\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 29, tzinfo=datetime.timezone.utc), kind=\\\\\\'response\\\\\\'),\\\\n\\', \\' ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\'create_cell\\\\\\', content=\\\\\\'Created new code  with content: def factorial(n):\\\\\\\\n    \"\"\"\\\\\\\\n    Calculate the factorial of a non-negative integer n with input validation.\\\\\\\\n    :param n: non-negative integer\\\\\\\\n    :return: factorial of n\\\\\\\\n    :raises ValueError: if n is not a non-negative integer\\\\\\\\n    \"\"\"\\\\\\\\n    if not isinstance(n, int):\\\\\\\\n        raise ValueError(\"Input must be an integer\")\\\\\\\\n    if n &lt; 0:\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\n    if n == 0 or n == 1:\\\\\\\\n        return 1\\\\\\\\n    result = 1\\\\\\\\n    for i in range(2, n + 1):\\\\\\\\n        result *= i\\\\\\\\n    return result\\\\\\', tool_call_id=\\\\\\'call_Iuc8vC4Y2axuMDvDh3TlF9mz\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 32, 646314, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'tool-return\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \" ModelResponse(parts=[TextPart(content=\\'I have created a function to calculate the factorial of a number with input validation. You can test it by calling the `factorial` function with a non-negative integer as the argument.\\', part_kind=\\'text\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 33, tzinfo=datetime.timezone.utc), kind=\\'response\\'),\\\\n\", \" ModelRequest(parts=[UserPromptPart(content=\\'So what you just made for me here?\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 33, 948002, tzinfo=datetime.timezone.utc), part_kind=\\'user-prompt\\')], kind=\\'request\\'),\\\\n\", \\' ModelResponse(parts=[TextPart(content=\"I created a Python function named `factorial` that calculates the factorial of a non-negative integer. This function includes input validation to ensure that the input is a non-negative integer. If the input is not valid (i.e., not an integer or a negative integer), it raises a `ValueError`.\\\\\\\\n\\\\\\\\nHere\\\\\\'s a summary of what the function does:\\\\\\\\n- It checks if the input is an integer. If not, it raises a `ValueError`.\\\\\\\\n- It checks if the input is a non-negative integer. If it\\\\\\'s negative, it raises a `ValueError`.\\\\\\\\n- If the input is 0 or 1, it returns 1 (since 0! = 1! = 1).\\\\\\\\n- For other positive integers, it calculates the factorial by multiplying all integers from 2 up to the input number and returns the result.\", part_kind=\\\\\\'text\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 34, tzinfo=datetime.timezone.utc), kind=\\\\\\'response\\\\\\')]\\']}, \\'execution_count\\': 15, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]',\n 'Cell[22]:\\nSource:\\n\\nOutputs:\\nNone',\n 'Cell[23]:\\nSource:\\n### Adding notebook history\\nOutputs:\\nNone',\n 'Cell[24]:\\nSource:\\n#| export\\nimport os\\nimport json\\nfrom pathlib import Path\\nfrom typing import Optional, Dict, Any\\n\\n# Cache for notebook data\\n_notebook_cache: Dict[str, Any] = {}\\n\\ndef find_current_notebook() -&gt; Optional[dict]:\\n    \"\"\"Find and cache the current notebook data.\\n    \\n    Returns:\\n        Dict containing notebook data or None if not found\\n    \"\"\"\\n    global _notebook_cache\\n    \\n    try:\\n        ipython = get_ipython()\\n        if not ipython:\\n            return None\\n            \\n        # Get current cell content to identify the notebook\\n        current_cell = ipython.get_parent()[\\'content\\'][\\'code\\']\\n        \\n        # Check if we already found the notebook\\n        if \\'notebook\\' in _notebook_cache:\\n            # Verify it\\'s still the correct notebook by checking the current cell\\n            notebook = _notebook_cache[\\'notebook\\']\\n            for cell in notebook[\\'cells\\']:\\n                if (cell[\\'cell_type\\'] == \\'code\\' and \\n                    \\'\\'.join(cell[\\'source\\']) == current_cell):\\n                    return notebook\\n        \\n        # If not in cache or cache is invalid, search for the notebook\\n        current_dir = Path.cwd()\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\n        \\n        for nb_file in notebook_files:\\n            try:\\n                with open(nb_file) as f:\\n                    notebook = json.load(f)\\n                    for cell in notebook[\\'cells\\']:\\n                        if (cell[\\'cell_type\\'] == \\'code\\' and \\n                            \\'\\'.join(cell[\\'source\\']) == current_cell):\\n                            # Found the notebook, cache it\\n                            _notebook_cache[\\'notebook\\'] = notebook\\n                            _notebook_cache[\\'file\\'] = nb_file\\n                            return notebook\\n            except Exception:\\n                continue\\n                \\n        return None\\n        \\n    except Exception as e:\\n        print(f\"Error finding notebook: {e}\")\\n        return None\\n\\nOutputs:\\n[]',\n 'Cell[25]:\\nSource:\\n#| export\\nmax_lookback = 10\\n\\ndef get_notebook_history(max_cells: int = max_lookback) -&gt; list:\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\n    \\n    Args:\\n        max_cells: Maximum number of previous cells to include\\n        \\n    Returns:\\n        List of previous cell contents\\n    \"\"\"\\n    try:\\n        # Get the cached notebook or find it\\n        notebook = find_current_notebook()\\n        if not notebook:\\n            return []\\n            \\n        # Find current cell index\\n        current_cell = get_ipython().get_parent()[\\'content\\'][\\'code\\']\\n        cells = notebook[\\'cells\\']\\n        current_idx = -1\\n        last_prompt_idx = -1\\n        \\n        # Find current cell and last prompt cell\\n        for idx, cell in enumerate(cells):\\n            source = \\'\\'.join(cell[\\'source\\']) if isinstance(cell[\\'source\\'], list) else cell[\\'source\\']\\n            \\n            # Find current cell\\n            if current_idx == -1 and cell[\\'cell_type\\'] == \\'code\\' and source == current_cell:\\n                current_idx = idx\\n                \\n            # Find last prompt cell before current cell\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\n                if cell[\\'cell_type\\'] == \\'code\\' and source.strip().startswith(\\'%%prompt\\'):\\n                    last_prompt_idx = idx\\n                \\n        if current_idx == -1:\\n            return []\\n            \\n        # Get cells between last prompt and current cell\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\n        history = []\\n        \\n        for idx in range(start_idx, current_idx):\\n            cell = cells[idx]            \\n            source = cell[\\'source\\'] if isinstance(cell[\\'source\\'], str) else \\'\\'.join(cell[\\'source\\'])\\n            if \\'outputs\\' in cell:\\n                outputs = cell[\\'outputs\\'] if isinstance(cell[\\'outputs\\'], str) else str(cell[\\'outputs\\'])\\n            else:\\n                outputs = \\'None\\'\\n            if not (source.strip().startswith(\\'%%prompt\\') or outputs.strip().startswith(\\'#|exclude\\') or outputs.strip().startswith(\\'#| exclude\\')):\\n                history.append(f\"Cell[{idx}]:\\\\nSource:\\\\n{source}\\\\nOutputs:\\\\n{outputs}\")\\n        \\n        return history\\n        \\n    except Exception as e:\\n        print(f\"Error getting notebook history: {e}\")\\n        return []\\nOutputs:\\n[]',\n 'Cell[26]:\\nSource:\\nTesting notebook history\\nOutputs:\\nNone']\n\n\n\n\n\n\nsource\n\n\n\n\n create_history_aware_prompt (prompt:str, message_history:list=None,\n                              max_history:int=5)\n\n*Create a prompt with notebook history context and message history.\nArgs: prompt: The user‚Äôs prompt message_history: Previous conversation messages from results.all_messages() max_history: Maximum number of previous cells to include\nReturns: Tuple of (enhanced prompt, combined message history)*\nTesting history-aware prompt\n\ncreate_history_aware_prompt('So what you just made for me here?', result.all_messages(), max_history=20)\n\n('So what you just made for me here?',\n [ModelRequest(parts=[SystemPromptPart(content=\"\\nYou are a helpful assistant that operates in a Jupyter notebook.\\nYour regular text responses are rendered as cell output.\\nYou can create new cells, edit existing cells, and run code.\\nYou can also use tools to help you with your tasks.\\nToday's date is 2024-12-31.\\n\", part_kind='system-prompt'), UserPromptPart(content='Create a function that calculates the factorial of a number with input validation', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 43, 700768, tzinfo=datetime.timezone.utc), part_kind='user-prompt')], kind='request'),\n  ModelResponse(parts=[ToolCallPart(tool_name='create_cell', args=ArgsJson(args_json='{\"content\":\"def factorial(n):\\\\n    \\\\\"\\\\\"\\\\\"\\\\n    Calculate the factorial of a non-negative integer n.\\\\n    \\\\n    :param n: non-negative integer\\\\n    :return: factorial of n\\\\n    \\\\\"\\\\\"\\\\\"\\\\n    # Input validation\\\\n    if not isinstance(n, int):\\\\n        raise ValueError(\\\\\"Input must be an integer.\\\\\")\\\\n    if n &lt; 0:\\\\n        raise ValueError(\\\\\"Input must be a non-negative integer.\\\\\")\\\\n    \\\\n    # Base case\\\\n    if n == 0:\\\\n        return 1\\\\n    \\\\n    # Recursive case\\\\n    result = 1\\\\n    for i in range(1, n + 1):\\\\n        result *= i\\\\n    return result\\\\n\\\\n# Example usage\\\\ntry:\\\\n    print(factorial(5))  # Should print 120\\\\n    print(factorial(-1)) # Should raise a ValueError\\\\nexcept ValueError as e:\\\\n    print(e)\",\"cell_type\":\"code\"}'), tool_call_id='call_dP852a9HSFo4HgyvUTm6NtHd', part_kind='tool-call')], timestamp=datetime.datetime(2024, 12, 31, 13, 10, 44, tzinfo=datetime.timezone.utc), kind='response'),\n  ModelRequest(parts=[ToolReturnPart(tool_name='create_cell', content='Created new code  with content: def factorial(n):\\n    \"\"\"\\n    Calculate the factorial of a non-negative integer n.\\n    \\n    :param n: non-negative integer\\n    :return: factorial of n\\n    \"\"\"\\n    # Input validation\\n    if not isinstance(n, int):\\n        raise ValueError(\"Input must be an integer.\")\\n    if n &lt; 0:\\n        raise ValueError(\"Input must be a non-negative integer.\")\\n    \\n    # Base case\\n    if n == 0:\\n        return 1\\n    \\n    # Recursive case\\n    result = 1\\n    for i in range(1, n + 1):\\n        result *= i\\n    return result\\n\\n# Example usage\\ntry:\\n    print(factorial(5))  # Should print 120\\n    print(factorial(-1)) # Should raise a ValueError\\nexcept ValueError as e:\\n    print(e)', tool_call_id='call_dP852a9HSFo4HgyvUTm6NtHd', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 47, 279330, tzinfo=datetime.timezone.utc), part_kind='tool-return')], kind='request'),\n  ModelResponse(parts=[TextPart(content='I created a function that calculates the factorial of a number with input validation. You can test it in the new cell provided.', part_kind='text')], timestamp=datetime.datetime(2024, 12, 31, 13, 10, 48, tzinfo=datetime.timezone.utc), kind='response'),\n  ModelRequest(parts=[UserPromptPart(content='So what you just made for me here?', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 48, 46240, tzinfo=datetime.timezone.utc), part_kind='user-prompt')], kind='request'),\n  ModelResponse(parts=[TextPart(content=\"I created a Python function named `factorial` that calculates the factorial of a non-negative integer. The function includes input validation to ensure that the input is a non-negative integer. If the input is not an integer or is negative, the function raises a `ValueError` with an appropriate message. \\n\\nHere's a summary of the key parts of the code:\\n\\n- **Input Validation**: \\n  - Checks if `n` is an integer. If not, it raises a `ValueError`.\\n  - Checks if `n` is a non-negative integer. If `n` is negative, it raises a `ValueError`.\\n\\n- **Factorial Calculation**: \\n  - Uses an iterative approach to calculate the factorial.\\n  - Returns `1` if `n` is `0` (the factorial of 0 is 1).\\n  - Uses a for-loop to compute the factorial for positive integers.\\n\\n- **Example Usage**: \\n  - Demonstrates the function by calculating the factorial of 5.\\n  - Includes a try-except block to catch and print the error message if a `ValueError` is raised when computing the factorial of a negative number.\\n\\nYou can execute the cell to see how it works or modify it to test with other values.\", part_kind='text')], timestamp=datetime.datetime(2024, 12, 31, 13, 10, 48, tzinfo=datetime.timezone.utc), kind='response'),\n  ModelRequest(parts=[UserPromptPart(content='Here is the context of new notebook cells that were added:\\nCell[11]:\\nSource:\\n#| export\\nfrom IPython.display import display, Markdown\\nfrom typing import Literal\\n\\n@notebook_agent.tool\\ndef create_cell(ctx: RunContext[str], content: str, cell_type: Literal[\\'code\\', \\'markdown\\'] = \\'code\\') -&gt; str:\\n    \"\"\"Create a new cell in the notebook with the specified content.\\n    \\n    Args:\\n        content: The content to put in the new cell\\n        cell_type: Type of cell to create (\\'code\\' or \\'markdown\\')\\n    \\n    Returns:\\n        A confirmation message\\n    \"\"\"\\n    try:    \\n        ipython = get_ipython()\\n    except NameError:\\n        return \"Error: Not running in IPython/Jupyter environment\"\\n    \\n    # Display the content immediately\\n    if cell_type == \\'code\\':\\n        # Set up the next cell with the content\\n        ipython.set_next_input(content)\\n    else:\\n        display(Markdown(content))\\n    \\n    return f\"Created new {cell_type}  with content: {content}\"\\nOutputs:\\n[{\\'name\\': \\'stderr\\', \\'output_type\\': \\'stream\\', \\'text\\': [\\'&lt;module&gt;:8: No type or annotation for returned value 1\\\\n\\']}]\\n\\nCell[12]:\\nSource:\\nAlways set custom agents to inherit base tools\\n\\nOutputs:\\nNone\\n\\nCell[13]:\\nSource:\\n#| export\\ndef set_agent(agent: Agent) -&gt; Agent:\\n    \"\"\"Set a custom agent for the notebook.\\n    \\n    Args:\\n        agent: PydanticAI agent instance\\n        \\n    Returns:\\n        Configured agent with required tools\\n    \"\"\"\\n    global _current_agent, notebook_agent\\n        \\n    # Always ensure create_cell tool is available\\n    if \\'create_cell\\' not in agent._function_tools:\\n        # Copy the tool directly from notebook_agent\\n        agent._function_tools = notebook_agent._function_tools\\n    \\n    _current_agent = agent\\n    return agent\\nOutputs:\\n[]\\n\\nCell[14]:\\nSource:\\nTool testing cell creation tool\\nOutputs:\\nNone\\n\\nCell[15]:\\nSource:\\nresult = notebook_agent.run_sync(\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\')\\nMarkdown(result.data)\\nOutputs:\\n[{\\'data\\': {\\'text/markdown\\': [\\'I\\\\\\'ve created a new cell with a simple \"Hello, World!\" function. You can run it to see the output.\\'], \\'text/plain\\': [\\'&lt;IPython.core.display.Markdown object&gt;\\']}, \\'execution_count\\': 10, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]\\n\\nCell[16]:\\nSource:\\ndef hello_world():\\n    print(\"Hello, world!\")\\n\\nhello_world()\\nOutputs:\\n[]\\n\\nCell[17]:\\nSource:\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\nMarkdown(result.data)\\nOutputs:\\n[{\\'data\\': {\\'text/markdown\\': [\\'I have created a function to calculate the factorial of a number with input validation. You can test it by calling the `factorial` function with a non-negative integer as the argument.\\'], \\'text/plain\\': [\\'&lt;IPython.core.display.Markdown object&gt;\\']}, \\'execution_count\\': 12, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]\\n\\nCell[18]:\\nSource:\\ndef factorial(n):\\n    \"\"\"\\n    Calculate the factorial of a non-negative integer n.\\n\\n    Parameters:\\n    n (int): A non-negative integer whose factorial is to be computed\\n\\n    Returns:\\n    int: Factorial of the input number n\\n    \"\"\"\\n    # Input validation\\n    if not isinstance(n, int):\\n        raise TypeError(\"Input must be an integer\")\\n    if n &lt; 0:\\n        raise ValueError(\"Input must be a non-negative integer\")\\n\\n    # Base case: factorial of 0 is 1\\n    if n == 0:\\n        return 1\\n\\n    # Recursive case: n! = n * (n-1)!\\n    return n * factorial(n - 1)\\nOutputs:\\n[]\\n\\nCell[19]:\\nSource:\\nTesting agent with history\\nOutputs:\\nNone\\n\\nCell[20]:\\nSource:\\nresult = notebook_agent.run_sync(\\'So what you just made for me here?\\', message_history=result.new_messages())\\nMarkdown(result.data)\\nOutputs:\\n[{\\'data\\': {\\'text/markdown\\': [\\'I created a Python function named `factorial` that calculates the factorial of a non-negative integer. This function includes input validation to ensure that the input is a non-negative integer. If the input is not valid (i.e., not an integer or a negative integer), it raises a `ValueError`.\\\\n\\', \\'\\\\n\\', \"Here\\'s a summary of what the function does:\\\\n\", \\'- It checks if the input is an integer. If not, it raises a `ValueError`.\\\\n\\', \"- It checks if the input is a non-negative integer. If it\\'s negative, it raises a `ValueError`.\\\\n\", \\'- If the input is 0 or 1, it returns 1 (since 0! = 1! = 1).\\\\n\\', \\'- For other positive integers, it calculates the factorial by multiplying all integers from 2 up to the input number and returns the result.\\'], \\'text/plain\\': [\\'&lt;IPython.core.display.Markdown object&gt;\\']}, \\'execution_count\\': 14, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]\\n\\nCell[21]:\\nSource:\\nresult.all_messages()\\nOutputs:\\n[{\\'data\\': {\\'text/plain\\': [\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\nToday\\\\\\'s date is 2024-12-31.\\\\\\\\n\", part_kind=\\\\\\'system-prompt\\\\\\'), UserPromptPart(content=\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 28, 691513, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'user-prompt\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\'create_cell\\\\\\', args=ArgsJson(args_json=\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n with input validation.\\\\\\\\\\\\\\\\n    :param n: non-negative integer\\\\\\\\\\\\\\\\n    :return: factorial of n\\\\\\\\\\\\\\\\n    :raises ValueError: if n is not a non-negative integer\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\"Input must be an integer\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\"Input must be a non-negative integer\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n    if n == 0 or n == 1:\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\n    result = 1\\\\\\\\\\\\\\\\n    for i in range(2, n + 1):\\\\\\\\\\\\\\\\n        result *= i\\\\\\\\\\\\\\\\n    return result\",\"cell_type\":\"code\"}\\\\\\'), tool_call_id=\\\\\\'call_Iuc8vC4Y2axuMDvDh3TlF9mz\\\\\\', part_kind=\\\\\\'tool-call\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 29, tzinfo=datetime.timezone.utc), kind=\\\\\\'response\\\\\\'),\\\\n\\', \\' ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\'create_cell\\\\\\', content=\\\\\\'Created new code  with content: def factorial(n):\\\\\\\\n    \"\"\"\\\\\\\\n    Calculate the factorial of a non-negative integer n with input validation.\\\\\\\\n    :param n: non-negative integer\\\\\\\\n    :return: factorial of n\\\\\\\\n    :raises ValueError: if n is not a non-negative integer\\\\\\\\n    \"\"\"\\\\\\\\n    if not isinstance(n, int):\\\\\\\\n        raise ValueError(\"Input must be an integer\")\\\\\\\\n    if n &lt; 0:\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\n    if n == 0 or n == 1:\\\\\\\\n        return 1\\\\\\\\n    result = 1\\\\\\\\n    for i in range(2, n + 1):\\\\\\\\n        result *= i\\\\\\\\n    return result\\\\\\', tool_call_id=\\\\\\'call_Iuc8vC4Y2axuMDvDh3TlF9mz\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 32, 646314, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'tool-return\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \" ModelResponse(parts=[TextPart(content=\\'I have created a function to calculate the factorial of a number with input validation. You can test it by calling the `factorial` function with a non-negative integer as the argument.\\', part_kind=\\'text\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 33, tzinfo=datetime.timezone.utc), kind=\\'response\\'),\\\\n\", \" ModelRequest(parts=[UserPromptPart(content=\\'So what you just made for me here?\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 33, 948002, tzinfo=datetime.timezone.utc), part_kind=\\'user-prompt\\')], kind=\\'request\\'),\\\\n\", \\' ModelResponse(parts=[TextPart(content=\"I created a Python function named `factorial` that calculates the factorial of a non-negative integer. This function includes input validation to ensure that the input is a non-negative integer. If the input is not valid (i.e., not an integer or a negative integer), it raises a `ValueError`.\\\\\\\\n\\\\\\\\nHere\\\\\\'s a summary of what the function does:\\\\\\\\n- It checks if the input is an integer. If not, it raises a `ValueError`.\\\\\\\\n- It checks if the input is a non-negative integer. If it\\\\\\'s negative, it raises a `ValueError`.\\\\\\\\n- If the input is 0 or 1, it returns 1 (since 0! = 1! = 1).\\\\\\\\n- For other positive integers, it calculates the factorial by multiplying all integers from 2 up to the input number and returns the result.\", part_kind=\\\\\\'text\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 34, tzinfo=datetime.timezone.utc), kind=\\\\\\'response\\\\\\')]\\']}, \\'execution_count\\': 15, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]\\n\\nCell[22]:\\nSource:\\n\\nOutputs:\\nNone\\n\\nCell[23]:\\nSource:\\n### Adding notebook history\\nOutputs:\\nNone\\n\\nCell[24]:\\nSource:\\n#| export\\nimport os\\nimport json\\nfrom pathlib import Path\\nfrom typing import Optional, Dict, Any\\n\\n# Cache for notebook data\\n_notebook_cache: Dict[str, Any] = {}\\n\\ndef find_current_notebook() -&gt; Optional[dict]:\\n    \"\"\"Find and cache the current notebook data.\\n    \\n    Returns:\\n        Dict containing notebook data or None if not found\\n    \"\"\"\\n    global _notebook_cache\\n    \\n    try:\\n        ipython = get_ipython()\\n        if not ipython:\\n            return None\\n            \\n        # Get current cell content to identify the notebook\\n        current_cell = ipython.get_parent()[\\'content\\'][\\'code\\']\\n        \\n        # Check if we already found the notebook\\n        if \\'notebook\\' in _notebook_cache:\\n            # Verify it\\'s still the correct notebook by checking the current cell\\n            notebook = _notebook_cache[\\'notebook\\']\\n            for cell in notebook[\\'cells\\']:\\n                if (cell[\\'cell_type\\'] == \\'code\\' and \\n                    \\'\\'.join(cell[\\'source\\']) == current_cell):\\n                    return notebook\\n        \\n        # If not in cache or cache is invalid, search for the notebook\\n        current_dir = Path.cwd()\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\n        \\n        for nb_file in notebook_files:\\n            try:\\n                with open(nb_file) as f:\\n                    notebook = json.load(f)\\n                    for cell in notebook[\\'cells\\']:\\n                        if (cell[\\'cell_type\\'] == \\'code\\' and \\n                            \\'\\'.join(cell[\\'source\\']) == current_cell):\\n                            # Found the notebook, cache it\\n                            _notebook_cache[\\'notebook\\'] = notebook\\n                            _notebook_cache[\\'file\\'] = nb_file\\n                            return notebook\\n            except Exception:\\n                continue\\n                \\n        return None\\n        \\n    except Exception as e:\\n        print(f\"Error finding notebook: {e}\")\\n        return None\\n\\nOutputs:\\n[]\\n\\nCell[25]:\\nSource:\\n#| export\\nmax_lookback = 10\\n\\ndef get_notebook_history(max_cells: int = max_lookback) -&gt; list:\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\n    \\n    Args:\\n        max_cells: Maximum number of previous cells to include\\n        \\n    Returns:\\n        List of previous cell contents\\n    \"\"\"\\n    try:\\n        # Get the cached notebook or find it\\n        notebook = find_current_notebook()\\n        if not notebook:\\n            return []\\n            \\n        # Find current cell index\\n        current_cell = get_ipython().get_parent()[\\'content\\'][\\'code\\']\\n        cells = notebook[\\'cells\\']\\n        current_idx = -1\\n        last_prompt_idx = -1\\n        \\n        # Find current cell and last prompt cell\\n        for idx, cell in enumerate(cells):\\n            source = \\'\\'.join(cell[\\'source\\']) if isinstance(cell[\\'source\\'], list) else cell[\\'source\\']\\n            \\n            # Find current cell\\n            if current_idx == -1 and cell[\\'cell_type\\'] == \\'code\\' and source == current_cell:\\n                current_idx = idx\\n                \\n            # Find last prompt cell before current cell\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\n                if cell[\\'cell_type\\'] == \\'code\\' and source.strip().startswith(\\'%%prompt\\'):\\n                    last_prompt_idx = idx\\n                \\n        if current_idx == -1:\\n            return []\\n            \\n        # Get cells between last prompt and current cell\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\n        history = []\\n        \\n        for idx in range(start_idx, current_idx):\\n            cell = cells[idx]            \\n            source = cell[\\'source\\'] if isinstance(cell[\\'source\\'], str) else \\'\\'.join(cell[\\'source\\'])\\n            if \\'outputs\\' in cell:\\n                outputs = cell[\\'outputs\\'] if isinstance(cell[\\'outputs\\'], str) else str(cell[\\'outputs\\'])\\n            else:\\n                outputs = \\'None\\'\\n            if not (source.strip().startswith(\\'%%prompt\\') or outputs.strip().startswith(\\'#|exclude\\') or outputs.strip().startswith(\\'#| exclude\\')):\\n                history.append(f\"Cell[{idx}]:\\\\nSource:\\\\n{source}\\\\nOutputs:\\\\n{outputs}\")\\n        \\n        return history\\n        \\n    except Exception as e:\\n        print(f\"Error getting notebook history: {e}\")\\n        return []\\nOutputs:\\n[]\\n\\nCell[26]:\\nSource:\\nTesting notebook history\\nOutputs:\\nNone\\n\\nCell[27]:\\nSource:\\nnb_hist = get_notebook_history(max_cells=20)\\nnb_hist\\nOutputs:\\n[{\\'data\\': {\\'text/plain\\': [\"[\\'Cell[5]:\\\\\\\\nSource:\\\\\\\\nSystem prompt\\\\\\\\n\\\\\\\\nOutputs:\\\\\\\\nNone\\',\\\\n\", \\' \\\\\\'Cell[6]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nfrom datetime import date\\\\\\\\nsystem_prompt = f\"\"\"\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\nToday\\\\\\\\\\\\\\'s date is {date.today().strftime(\\\\\\\\\\\\\\'%Y-%m-%d\\\\\\\\\\\\\\')}.\\\\\\\\n\"\"\"\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\',\\\\n\\', \\' \"Cell[7]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nfrom typing import cast\\\\\\\\nmodel = cast(KnownModelName, os.getenv(\\\\\\'PYDANTIC_AI_MODEL\\\\\\', \\\\\\'openai:gpt-4o\\\\\\'))\\\\\\\\nprint(f\\\\\\'PydanticAI is using model: {model}\\\\\\')\\\\\\\\nnotebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\'name\\\\\\': \\\\\\'stdout\\\\\\', \\\\\\'output_type\\\\\\': \\\\\\'stream\\\\\\', \\\\\\'text\\\\\\': [\\\\\\'PydanticAI is using model: openai:gpt-4o\\\\\\\\\\\\\\\\n\\\\\\']}]\",\\\\n\\', \\' \\\\\\'Cell[8]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\n_current_agent: Optional[Agent] = None\\\\\\\\n\\\\\\\\ndef get_current_agent() -&gt; Agent:\\\\\\\\n    \"\"\"Get the current agent, falling back to default notebook_agent if none set.\"\"\"\\\\\\\\n    global _current_agent, notebook_agent\\\\\\\\n    return _current_agent or notebook_agent\\\\\\\\n\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\',\\\\n\\', \" \\'Cell[9]:\\\\\\\\nSource:\\\\\\\\n### Adding cell creation tool\\\\\\\\nOutputs:\\\\\\\\nNone\\',\\\\n\", \\' \\\\\\'Cell[10]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nfrom IPython.display import display, Markdown\\\\\\\\nfrom typing import Literal\\\\\\\\n\\\\\\\\n@notebook_agent.tool\\\\\\\\ndef create_cell(ctx: RunContext[str], content: str, cell_type: Literal[\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\'] = \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\') -&gt; str:\\\\\\\\n    \"\"\"Create a new cell in the notebook with the specified content.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        content: The content to put in the new cell\\\\\\\\n        cell_type: Type of cell to create (\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' or \\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\')\\\\\\\\n    \\\\\\\\n    Returns:\\\\\\\\n        A confirmation message\\\\\\\\n    \"\"\"\\\\\\\\n    try:    \\\\\\\\n        ipython = get_ipython()\\\\\\\\n    except NameError:\\\\\\\\n        return \"Error: Not running in IPython/Jupyter environment\"\\\\\\\\n    \\\\\\\\n    # Display the content immediately\\\\\\\\n    if cell_type == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\':\\\\\\\\n        # Set up the next cell with the content\\\\\\\\n        ipython.set_next_input(content)\\\\\\\\n    else:\\\\\\\\n        display(Markdown(content))\\\\\\\\n    \\\\\\\\n    return f\"Created new {cell_type}  with content: {content}\"\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\',\\\\n\\', \" \\'Cell[11]:\\\\\\\\nSource:\\\\\\\\nAlways set custom agents to have create_cell tool\\\\\\\\nOutputs:\\\\\\\\nNone\\',\\\\n\", \\' \\\\\\'Cell[12]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\ndef set_agent(agent: Agent) -&gt; Agent:\\\\\\\\n    \"\"\"Set a custom agent for the notebook.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        agent: PydanticAI agent instance\\\\\\\\n        \\\\\\\\n    Returns:\\\\\\\\n        Configured agent with required tools\\\\\\\\n    \"\"\"\\\\\\\\n    global _current_agent, notebook_agent\\\\\\\\n        \\\\\\\\n    # Always ensure create_cell tool is available\\\\\\\\n    if \\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\' not in agent._function_tools:\\\\\\\\n        # Copy the tool directly from notebook_agent\\\\\\\\n        agent._function_tools[\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\'] = notebook_agent._function_tools[\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\']\\\\\\\\n    \\\\\\\\n    _current_agent = agent\\\\\\\\n    return agent\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\',\\\\n\\', \" \\'Cell[13]:\\\\\\\\nSource:\\\\\\\\nTool testing\\\\\\\\nOutputs:\\\\\\\\nNone\\',\\\\n\", \\' \\\\\\'Cell[14]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\\\\\\\\\\\\\')\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a new code cell with a simple \"Hello, World!\" function. You can run the cell to see the output.\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 7, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\',\\\\n\\', \\' \"Cell[15]:\\\\\\\\nSource:\\\\\\\\ndef hello_world():\\\\\\\\n    print(\\\\\\'Hello, World!\\\\\\')\\\\\\\\n\\\\\\\\n# Call the function to display the output\\\\\\\\nhello_world()\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\'name\\\\\\': \\\\\\'stdout\\\\\\', \\\\\\'output_type\\\\\\': \\\\\\'stream\\\\\\', \\\\\\'text\\\\\\': [\\\\\\'Hello, World!\\\\\\\\\\\\\\\\n\\\\\\']}]\",\\\\n\\', \\' \\\\\\'Cell[16]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\'s environment.\"], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 9, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\',\\\\n\\', \\' \\\\\\'Cell[17]:\\\\\\\\nSource:\\\\\\\\ndef factorial(n):\\\\\\\\n    \"\"\"\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\n\\\\\\\\n    Parameters:\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\n\\\\\\\\n    Returns:\\\\\\\\n    int: Factorial of the input number n\\\\\\\\n    \"\"\"\\\\\\\\n    # Input validation\\\\\\\\n    if not isinstance(n, int):\\\\\\\\n        raise TypeError(\"Input must be an integer\")\\\\\\\\n    if n &lt; 0:\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\n\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\n    if n == 0:\\\\\\\\n        return 1\\\\\\\\n\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\n    return n * factorial(n - 1)\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\',\\\\n\\', \" \\'Cell[18]:\\\\\\\\nSource:\\\\\\\\nTesting agent with history\\\\\\\\nOutputs:\\\\\\\\nNone\\',\\\\n\", \\' \\\\\\'Cell[19]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', message_history=result.new_messages())\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\"I\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'To make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'```python\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'factorial(5)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'```\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'This would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 11, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\',\\\\n\\', \\' \\\\\\'Cell[20]:\\\\\\\\nSource:\\\\\\\\nresult.all_messages()\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is 2024-12-31.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 34, 458473, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', args=ArgsJson(args_json=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be an integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be a non-negative integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\",\"cell_type\":\"code\"}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-call\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 35, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\', content=\\\\\\\\\\\\\\'Created new code cell\\\\\\\\\\\\\\', tool_call_id=\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, 114822, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'tool-return\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 58, 747643, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTo make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfactorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nThis would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 59, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')]\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 12, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\',\\\\n\\', \" \\'Cell[21]:\\\\\\\\nSource:\\\\\\\\n### Adding notebook history\\\\\\\\nOutputs:\\\\\\\\nNone\\',\\\\n\", \\' \\\\\\'Cell[22]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nimport os\\\\\\\\nimport json\\\\\\\\nfrom pathlib import Path\\\\\\\\nfrom typing import Optional, Dict, Any\\\\\\\\n\\\\\\\\n# Cache for notebook data\\\\\\\\n_notebook_cache: Dict[str, Any] = {}\\\\\\\\n\\\\\\\\ndef find_current_notebook() -&gt; Optional[dict]:\\\\\\\\n    \"\"\"Find and cache the current notebook data.\\\\\\\\n    \\\\\\\\n    Returns:\\\\\\\\n        Dict containing notebook data or None if not found\\\\\\\\n    \"\"\"\\\\\\\\n    global _notebook_cache\\\\\\\\n    \\\\\\\\n    try:\\\\\\\\n        ipython = get_ipython()\\\\\\\\n        if not ipython:\\\\\\\\n            return None\\\\\\\\n            \\\\\\\\n        # Get current cell content to identify the notebook\\\\\\\\n        current_cell = ipython.get_parent()[\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\']\\\\\\\\n        \\\\\\\\n        # Check if we already found the notebook\\\\\\\\n        if \\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\' in _notebook_cache:\\\\\\\\n            # Verify it\\\\\\\\\\\\\\'s still the correct notebook by checking the current cell\\\\\\\\n            notebook = _notebook_cache[\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\']\\\\\\\\n            for cell in notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']:\\\\\\\\n                if (cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and \\\\\\\\n                    \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\n                    return notebook\\\\\\\\n        \\\\\\\\n        # If not in cache or cache is invalid, search for the notebook\\\\\\\\n        current_dir = Path.cwd()\\\\\\\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\\\\\\\n        \\\\\\\\n        for nb_file in notebook_files:\\\\\\\\n            try:\\\\\\\\n                with open(nb_file) as f:\\\\\\\\n                    notebook = json.load(f)\\\\\\\\n                    for cell in notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']:\\\\\\\\n                        if (cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and \\\\\\\\n                            \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\n                            # Found the notebook, cache it\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\'] = notebook\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\'file\\\\\\\\\\\\\\'] = nb_file\\\\\\\\n                            return notebook\\\\\\\\n            except Exception:\\\\\\\\n                continue\\\\\\\\n                \\\\\\\\n        return None\\\\\\\\n        \\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error finding notebook: {e}\")\\\\\\\\n        return None\\\\\\\\n\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\',\\\\n\\', \\' \\\\\\'Cell[23]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nmax_lookback = 10\\\\\\\\n\\\\\\\\ndef get_notebook_history(max_cells: int = max_lookback) -&gt; list:\\\\\\\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        max_cells: Maximum number of previous cells to include\\\\\\\\n        \\\\\\\\n    Returns:\\\\\\\\n        List of previous cell contents\\\\\\\\n    \"\"\"\\\\\\\\n    try:\\\\\\\\n        # Get the cached notebook or find it\\\\\\\\n        notebook = find_current_notebook()\\\\\\\\n        if not notebook:\\\\\\\\n            return []\\\\\\\\n            \\\\\\\\n        # Find current cell index\\\\\\\\n        current_cell = get_ipython().get_parent()[\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\']\\\\\\\\n        cells = notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']\\\\\\\\n        current_idx = -1\\\\\\\\n        last_prompt_idx = -1\\\\\\\\n        \\\\\\\\n        # Find current cell and last prompt cell\\\\\\\\n        for idx, cell in enumerate(cells):\\\\\\\\n            source = \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) if isinstance(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'], list) else cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']\\\\\\\\n            \\\\\\\\n            # Find current cell\\\\\\\\n            if current_idx == -1 and cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and source == current_cell:\\\\\\\\n                current_idx = idx\\\\\\\\n                \\\\\\\\n            # Find last prompt cell before current cell\\\\\\\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\\\\\\\n                if cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and source.strip().startswith(\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\'):\\\\\\\\n                    last_prompt_idx = idx\\\\\\\\n                \\\\\\\\n        if current_idx == -1:\\\\\\\\n            return []\\\\\\\\n            \\\\\\\\n        # Get cells between last prompt and current cell\\\\\\\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\\\\\\\n        history = []\\\\\\\\n        \\\\\\\\n        for idx in range(start_idx, current_idx):\\\\\\\\n            cell = cells[idx]            \\\\\\\\n            source = cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'])\\\\\\\\n            if \\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\' in cell:\\\\\\\\n                outputs = cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'], str) else str(cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'])\\\\\\\\n            else:\\\\\\\\n                outputs = \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\'\\\\\\\\n            if not (source.strip().startswith(\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\'#|exclude\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\'#| exclude\\\\\\\\\\\\\\')):\\\\\\\\n                history.append(f\"Cell[{idx}]:\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\n{source}\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\n{outputs}\")\\\\\\\\n        \\\\\\\\n        return history\\\\\\\\n        \\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error getting notebook history: {e}\")\\\\\\\\n        return []\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\',\\\\n\\', \" \\'Cell[24]:\\\\\\\\nSource:\\\\\\\\nTesting notebook history\\\\\\\\nOutputs:\\\\\\\\nNone\\']\"]}, \\'execution_count\\': 18, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]\\n\\nCell[28]:\\nSource:\\n### Creating history-aware prompt\\nOutputs:\\nNone\\n\\nCell[29]:\\nSource:\\n#| export\\ndef create_history_aware_prompt(prompt: str, message_history: list = None, max_history: int = 5) -&gt; tuple:\\n    \"\"\"Create a prompt with notebook history context and message history.\\n    \\n    Args:\\n        prompt: The user\\'s prompt\\n        message_history: Previous conversation messages from results.all_messages()\\n        max_history: Maximum number of previous cells to include\\n        \\n    Returns:\\n        Tuple of (enhanced prompt, combined message history)\\n    \"\"\"\\n    try:\\n        ipython = get_ipython()\\n        if not ipython:\\n            return prompt, message_history\\n        \\n        # Get new cells using our optimized get_notebook_history\\n        new_cells = get_notebook_history(max_cells=max_history)\\n        \\n        if not new_cells and not message_history:\\n            return prompt, None\\n            \\n        # Create message history if none exists\\n        from pydantic_ai.messages import (\\n            ModelRequest, ModelResponse, \\n            UserPromptPart, TextPart\\n        )\\n        \\n        messages = []\\n        \\n        # Add existing message history if provided\\n        if message_history:\\n            messages.extend(message_history)\\n        \\n        # Only add context message if we have new cells\\n        if new_cells:\\n            # Create context message with new cells\\n            history_content = \"\\\\n\\\\n\".join(new_cells)\\n\\n            context_msg = ModelRequest(parts=[\\n                UserPromptPart(\\n                    content=\"Here is the context of new notebook cells that were added:\\\\n\" + history_content\\n                )\\n            ])\\n            \\n            # Create response acknowledging new context\\n            context_response = ModelResponse(parts=[\\n                TextPart(\\n                    content=\"I understand the new notebook context. How can I help?\"\\n                )\\n            ])\\n            \\n            messages.extend([context_msg, context_response])\\n                \\n        return prompt, messages\\n        \\n    except Exception as e:\\n        print(f\"Error creating history-aware prompt: {e}\")\\n        return prompt, message_history\\nOutputs:\\n[]\\n\\nCell[30]:\\nSource:\\nTesting history-aware prompt\\nOutputs:\\nNone', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 52, 367833, tzinfo=datetime.timezone.utc), part_kind='user-prompt')], kind='request'),\n  ModelResponse(parts=[TextPart(content='I understand the new notebook context. How can I help?', part_kind='text')], timestamp=datetime.datetime(2024, 12, 31, 13, 10, 52, 367852, tzinfo=datetime.timezone.utc), kind='response')])\n\n\n\n\n\n\nsource\n\n\n\n\n run_with_history (agent:pydantic_ai.agent.Agent, prompt:str,\n                   message_history:list=None, max_history:int=5)\n\n*Run the agent with notebook and conversation history context.\nArgs: agent: The PydanticAI agent prompt: The user‚Äôs prompt message_history: Previous conversation messages max_history: Maximum number of previous cells to include\nReturns: Agent run result*\nTesting run_with_history\n\nresult = run_with_history(notebook_agent, 'So what is going on in this notebook?',result.all_messages(), max_history=20)\nMarkdown(result.data)\n\nThis notebook appears to involve creating, running, and testing an AI-powered assistant, possibly using a tool like Pydantic AI for Jupyter notebooks. Here‚Äôs a breakdown of the key components and activities happening in this notebook:\n\nSetup and Imports:\n\nThe notebook is set up with various imports from libraries and definitions of system prompts to prepare the AI agent to assist within a Jupyter environment.\n\nAgent Configuration:\n\nAn AI agent (likely PydanticAI or a similar framework) is configured with a model and system prompts to guide its behavior within the notebook.\n\nTool and Function Definitions:\n\nSeveral functions and tools are defined, including create_cell, which allows new cells to be programmatically added to the notebook.\n\nNotebook Agent Execution:\n\nThe AI agent is used to execute commands. Examples include requests to create a ‚ÄúHello, World!‚Äù function and a factorial function with input validation.\n\nFunction Implementation:\n\nFunctions like hello_world() and factorial() are defined as part of this process. The factorial function includes input validation and uses recursion to calculate factorials.\n\nNotebook History and Prompt Management:\n\nThere are methods for capturing the history of cell executions and creating context-aware prompts that consider both the current notebook state and any previous interactions or commands.\n\nExecution Testing:\n\nVarious cells are used to test the system, ensure that functionality is operating correctly, and demonstrate the capabilities of the conversational agent in a Jupyter context.\n\nError Handling and Validation:\n\nThe notebook handles potential errors (e.g., invalid inputs for the factorial function) and various elements of cell execution and output display.\n\nHistory Creation and Contextual Responses:\n\nAn advanced feature is the creation of context-aware prompts that adapt based on the content and history of the notebook, indicating a sophisticated interaction system between user inputs and the agent‚Äôs responses.\n\n\nIn summary, the notebook combines Jupyter‚Äôs interactive capabilities with an AI-driven agent to assist with tasks, automatically manage notebook content, and potentially perform more complex logical operations based on the commands or tasks provided by the user.\n\n\n\nresult.all_messages()\n\n[ModelRequest(parts=[SystemPromptPart(content=\"\\nYou are a helpful assistant that operates in a Jupyter notebook.\\nYour regular text responses are rendered as cell output.\\nYou can create new cells, edit existing cells, and run code.\\nYou can also use tools to help you with your tasks.\\nToday's date is 2024-12-31.\\n\", part_kind='system-prompt'), UserPromptPart(content='Create a function that calculates the factorial of a number with input validation', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 43, 700768, tzinfo=datetime.timezone.utc), part_kind='user-prompt')], kind='request'),\n ModelResponse(parts=[ToolCallPart(tool_name='create_cell', args=ArgsJson(args_json='{\"content\":\"def factorial(n):\\\\n    \\\\\"\\\\\"\\\\\"\\\\n    Calculate the factorial of a non-negative integer n.\\\\n    \\\\n    :param n: non-negative integer\\\\n    :return: factorial of n\\\\n    \\\\\"\\\\\"\\\\\"\\\\n    # Input validation\\\\n    if not isinstance(n, int):\\\\n        raise ValueError(\\\\\"Input must be an integer.\\\\\")\\\\n    if n &lt; 0:\\\\n        raise ValueError(\\\\\"Input must be a non-negative integer.\\\\\")\\\\n    \\\\n    # Base case\\\\n    if n == 0:\\\\n        return 1\\\\n    \\\\n    # Recursive case\\\\n    result = 1\\\\n    for i in range(1, n + 1):\\\\n        result *= i\\\\n    return result\\\\n\\\\n# Example usage\\\\ntry:\\\\n    print(factorial(5))  # Should print 120\\\\n    print(factorial(-1)) # Should raise a ValueError\\\\nexcept ValueError as e:\\\\n    print(e)\",\"cell_type\":\"code\"}'), tool_call_id='call_dP852a9HSFo4HgyvUTm6NtHd', part_kind='tool-call')], timestamp=datetime.datetime(2024, 12, 31, 13, 10, 44, tzinfo=datetime.timezone.utc), kind='response'),\n ModelRequest(parts=[ToolReturnPart(tool_name='create_cell', content='Created new code  with content: def factorial(n):\\n    \"\"\"\\n    Calculate the factorial of a non-negative integer n.\\n    \\n    :param n: non-negative integer\\n    :return: factorial of n\\n    \"\"\"\\n    # Input validation\\n    if not isinstance(n, int):\\n        raise ValueError(\"Input must be an integer.\")\\n    if n &lt; 0:\\n        raise ValueError(\"Input must be a non-negative integer.\")\\n    \\n    # Base case\\n    if n == 0:\\n        return 1\\n    \\n    # Recursive case\\n    result = 1\\n    for i in range(1, n + 1):\\n        result *= i\\n    return result\\n\\n# Example usage\\ntry:\\n    print(factorial(5))  # Should print 120\\n    print(factorial(-1)) # Should raise a ValueError\\nexcept ValueError as e:\\n    print(e)', tool_call_id='call_dP852a9HSFo4HgyvUTm6NtHd', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 47, 279330, tzinfo=datetime.timezone.utc), part_kind='tool-return')], kind='request'),\n ModelResponse(parts=[TextPart(content='I created a function that calculates the factorial of a number with input validation. You can test it in the new cell provided.', part_kind='text')], timestamp=datetime.datetime(2024, 12, 31, 13, 10, 48, tzinfo=datetime.timezone.utc), kind='response'),\n ModelRequest(parts=[UserPromptPart(content='So what you just made for me here?', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 48, 46240, tzinfo=datetime.timezone.utc), part_kind='user-prompt')], kind='request'),\n ModelResponse(parts=[TextPart(content=\"I created a Python function named `factorial` that calculates the factorial of a non-negative integer. The function includes input validation to ensure that the input is a non-negative integer. If the input is not an integer or is negative, the function raises a `ValueError` with an appropriate message. \\n\\nHere's a summary of the key parts of the code:\\n\\n- **Input Validation**: \\n  - Checks if `n` is an integer. If not, it raises a `ValueError`.\\n  - Checks if `n` is a non-negative integer. If `n` is negative, it raises a `ValueError`.\\n\\n- **Factorial Calculation**: \\n  - Uses an iterative approach to calculate the factorial.\\n  - Returns `1` if `n` is `0` (the factorial of 0 is 1).\\n  - Uses a for-loop to compute the factorial for positive integers.\\n\\n- **Example Usage**: \\n  - Demonstrates the function by calculating the factorial of 5.\\n  - Includes a try-except block to catch and print the error message if a `ValueError` is raised when computing the factorial of a negative number.\\n\\nYou can execute the cell to see how it works or modify it to test with other values.\", part_kind='text')], timestamp=datetime.datetime(2024, 12, 31, 13, 10, 48, tzinfo=datetime.timezone.utc), kind='response'),\n ModelRequest(parts=[UserPromptPart(content='Here is the context of new notebook cells that were added:\\nCell[15]:\\nSource:\\nresult = notebook_agent.run_sync(\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\')\\nMarkdown(result.data)\\nOutputs:\\n[{\\'data\\': {\\'text/markdown\\': [\\'I\\\\\\'ve created a new cell with a simple \"Hello, World!\" function. You can run it to see the output.\\'], \\'text/plain\\': [\\'&lt;IPython.core.display.Markdown object&gt;\\']}, \\'execution_count\\': 10, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]\\n\\nCell[16]:\\nSource:\\ndef hello_world():\\n    print(\"Hello, world!\")\\n\\nhello_world()\\nOutputs:\\n[]\\n\\nCell[17]:\\nSource:\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\nMarkdown(result.data)\\nOutputs:\\n[{\\'data\\': {\\'text/markdown\\': [\\'I have created a function to calculate the factorial of a number with input validation. You can test it by calling the `factorial` function with a non-negative integer as the argument.\\'], \\'text/plain\\': [\\'&lt;IPython.core.display.Markdown object&gt;\\']}, \\'execution_count\\': 12, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]\\n\\nCell[18]:\\nSource:\\ndef factorial(n):\\n    \"\"\"\\n    Calculate the factorial of a non-negative integer n.\\n\\n    Parameters:\\n    n (int): A non-negative integer whose factorial is to be computed\\n\\n    Returns:\\n    int: Factorial of the input number n\\n    \"\"\"\\n    # Input validation\\n    if not isinstance(n, int):\\n        raise TypeError(\"Input must be an integer\")\\n    if n &lt; 0:\\n        raise ValueError(\"Input must be a non-negative integer\")\\n\\n    # Base case: factorial of 0 is 1\\n    if n == 0:\\n        return 1\\n\\n    # Recursive case: n! = n * (n-1)!\\n    return n * factorial(n - 1)\\nOutputs:\\n[]\\n\\nCell[19]:\\nSource:\\nTesting agent with history\\nOutputs:\\nNone\\n\\nCell[20]:\\nSource:\\nresult = notebook_agent.run_sync(\\'So what you just made for me here?\\', message_history=result.new_messages())\\nMarkdown(result.data)\\nOutputs:\\n[{\\'data\\': {\\'text/markdown\\': [\\'I created a Python function named `factorial` that calculates the factorial of a non-negative integer. This function includes input validation to ensure that the input is a non-negative integer. If the input is not valid (i.e., not an integer or a negative integer), it raises a `ValueError`.\\\\n\\', \\'\\\\n\\', \"Here\\'s a summary of what the function does:\\\\n\", \\'- It checks if the input is an integer. If not, it raises a `ValueError`.\\\\n\\', \"- It checks if the input is a non-negative integer. If it\\'s negative, it raises a `ValueError`.\\\\n\", \\'- If the input is 0 or 1, it returns 1 (since 0! = 1! = 1).\\\\n\\', \\'- For other positive integers, it calculates the factorial by multiplying all integers from 2 up to the input number and returns the result.\\'], \\'text/plain\\': [\\'&lt;IPython.core.display.Markdown object&gt;\\']}, \\'execution_count\\': 14, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]\\n\\nCell[21]:\\nSource:\\nresult.all_messages()\\nOutputs:\\n[{\\'data\\': {\\'text/plain\\': [\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\nToday\\\\\\'s date is 2024-12-31.\\\\\\\\n\", part_kind=\\\\\\'system-prompt\\\\\\'), UserPromptPart(content=\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 28, 691513, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'user-prompt\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\'create_cell\\\\\\', args=ArgsJson(args_json=\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n with input validation.\\\\\\\\\\\\\\\\n    :param n: non-negative integer\\\\\\\\\\\\\\\\n    :return: factorial of n\\\\\\\\\\\\\\\\n    :raises ValueError: if n is not a non-negative integer\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\"Input must be an integer\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\"Input must be a non-negative integer\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n    if n == 0 or n == 1:\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\n    result = 1\\\\\\\\\\\\\\\\n    for i in range(2, n + 1):\\\\\\\\\\\\\\\\n        result *= i\\\\\\\\\\\\\\\\n    return result\",\"cell_type\":\"code\"}\\\\\\'), tool_call_id=\\\\\\'call_Iuc8vC4Y2axuMDvDh3TlF9mz\\\\\\', part_kind=\\\\\\'tool-call\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 29, tzinfo=datetime.timezone.utc), kind=\\\\\\'response\\\\\\'),\\\\n\\', \\' ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\'create_cell\\\\\\', content=\\\\\\'Created new code  with content: def factorial(n):\\\\\\\\n    \"\"\"\\\\\\\\n    Calculate the factorial of a non-negative integer n with input validation.\\\\\\\\n    :param n: non-negative integer\\\\\\\\n    :return: factorial of n\\\\\\\\n    :raises ValueError: if n is not a non-negative integer\\\\\\\\n    \"\"\"\\\\\\\\n    if not isinstance(n, int):\\\\\\\\n        raise ValueError(\"Input must be an integer\")\\\\\\\\n    if n &lt; 0:\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\n    if n == 0 or n == 1:\\\\\\\\n        return 1\\\\\\\\n    result = 1\\\\\\\\n    for i in range(2, n + 1):\\\\\\\\n        result *= i\\\\\\\\n    return result\\\\\\', tool_call_id=\\\\\\'call_Iuc8vC4Y2axuMDvDh3TlF9mz\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 32, 646314, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'tool-return\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \" ModelResponse(parts=[TextPart(content=\\'I have created a function to calculate the factorial of a number with input validation. You can test it by calling the `factorial` function with a non-negative integer as the argument.\\', part_kind=\\'text\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 33, tzinfo=datetime.timezone.utc), kind=\\'response\\'),\\\\n\", \" ModelRequest(parts=[UserPromptPart(content=\\'So what you just made for me here?\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 33, 948002, tzinfo=datetime.timezone.utc), part_kind=\\'user-prompt\\')], kind=\\'request\\'),\\\\n\", \\' ModelResponse(parts=[TextPart(content=\"I created a Python function named `factorial` that calculates the factorial of a non-negative integer. This function includes input validation to ensure that the input is a non-negative integer. If the input is not valid (i.e., not an integer or a negative integer), it raises a `ValueError`.\\\\\\\\n\\\\\\\\nHere\\\\\\'s a summary of what the function does:\\\\\\\\n- It checks if the input is an integer. If not, it raises a `ValueError`.\\\\\\\\n- It checks if the input is a non-negative integer. If it\\\\\\'s negative, it raises a `ValueError`.\\\\\\\\n- If the input is 0 or 1, it returns 1 (since 0! = 1! = 1).\\\\\\\\n- For other positive integers, it calculates the factorial by multiplying all integers from 2 up to the input number and returns the result.\", part_kind=\\\\\\'text\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 34, tzinfo=datetime.timezone.utc), kind=\\\\\\'response\\\\\\')]\\']}, \\'execution_count\\': 15, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]\\n\\nCell[22]:\\nSource:\\n\\nOutputs:\\nNone\\n\\nCell[23]:\\nSource:\\n### Adding notebook history\\nOutputs:\\nNone\\n\\nCell[24]:\\nSource:\\n#| export\\nimport os\\nimport json\\nfrom pathlib import Path\\nfrom typing import Optional, Dict, Any\\n\\n# Cache for notebook data\\n_notebook_cache: Dict[str, Any] = {}\\n\\ndef find_current_notebook() -&gt; Optional[dict]:\\n    \"\"\"Find and cache the current notebook data.\\n    \\n    Returns:\\n        Dict containing notebook data or None if not found\\n    \"\"\"\\n    global _notebook_cache\\n    \\n    try:\\n        ipython = get_ipython()\\n        if not ipython:\\n            return None\\n            \\n        # Get current cell content to identify the notebook\\n        current_cell = ipython.get_parent()[\\'content\\'][\\'code\\']\\n        \\n        # Check if we already found the notebook\\n        if \\'notebook\\' in _notebook_cache:\\n            # Verify it\\'s still the correct notebook by checking the current cell\\n            notebook = _notebook_cache[\\'notebook\\']\\n            for cell in notebook[\\'cells\\']:\\n                if (cell[\\'cell_type\\'] == \\'code\\' and \\n                    \\'\\'.join(cell[\\'source\\']) == current_cell):\\n                    return notebook\\n        \\n        # If not in cache or cache is invalid, search for the notebook\\n        current_dir = Path.cwd()\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\n        \\n        for nb_file in notebook_files:\\n            try:\\n                with open(nb_file) as f:\\n                    notebook = json.load(f)\\n                    for cell in notebook[\\'cells\\']:\\n                        if (cell[\\'cell_type\\'] == \\'code\\' and \\n                            \\'\\'.join(cell[\\'source\\']) == current_cell):\\n                            # Found the notebook, cache it\\n                            _notebook_cache[\\'notebook\\'] = notebook\\n                            _notebook_cache[\\'file\\'] = nb_file\\n                            return notebook\\n            except Exception:\\n                continue\\n                \\n        return None\\n        \\n    except Exception as e:\\n        print(f\"Error finding notebook: {e}\")\\n        return None\\n\\nOutputs:\\n[]\\n\\nCell[25]:\\nSource:\\n#| export\\nmax_lookback = 10\\n\\ndef get_notebook_history(max_cells: int = max_lookback) -&gt; list:\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\n    \\n    Args:\\n        max_cells: Maximum number of previous cells to include\\n        \\n    Returns:\\n        List of previous cell contents\\n    \"\"\"\\n    try:\\n        # Get the cached notebook or find it\\n        notebook = find_current_notebook()\\n        if not notebook:\\n            return []\\n            \\n        # Find current cell index\\n        current_cell = get_ipython().get_parent()[\\'content\\'][\\'code\\']\\n        cells = notebook[\\'cells\\']\\n        current_idx = -1\\n        last_prompt_idx = -1\\n        \\n        # Find current cell and last prompt cell\\n        for idx, cell in enumerate(cells):\\n            source = \\'\\'.join(cell[\\'source\\']) if isinstance(cell[\\'source\\'], list) else cell[\\'source\\']\\n            \\n            # Find current cell\\n            if current_idx == -1 and cell[\\'cell_type\\'] == \\'code\\' and source == current_cell:\\n                current_idx = idx\\n                \\n            # Find last prompt cell before current cell\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\n                if cell[\\'cell_type\\'] == \\'code\\' and source.strip().startswith(\\'%%prompt\\'):\\n                    last_prompt_idx = idx\\n                \\n        if current_idx == -1:\\n            return []\\n            \\n        # Get cells between last prompt and current cell\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\n        history = []\\n        \\n        for idx in range(start_idx, current_idx):\\n            cell = cells[idx]            \\n            source = cell[\\'source\\'] if isinstance(cell[\\'source\\'], str) else \\'\\'.join(cell[\\'source\\'])\\n            if \\'outputs\\' in cell:\\n                outputs = cell[\\'outputs\\'] if isinstance(cell[\\'outputs\\'], str) else str(cell[\\'outputs\\'])\\n            else:\\n                outputs = \\'None\\'\\n            if not (source.strip().startswith(\\'%%prompt\\') or outputs.strip().startswith(\\'#|exclude\\') or outputs.strip().startswith(\\'#| exclude\\')):\\n                history.append(f\"Cell[{idx}]:\\\\nSource:\\\\n{source}\\\\nOutputs:\\\\n{outputs}\")\\n        \\n        return history\\n        \\n    except Exception as e:\\n        print(f\"Error getting notebook history: {e}\")\\n        return []\\nOutputs:\\n[]\\n\\nCell[26]:\\nSource:\\nTesting notebook history\\nOutputs:\\nNone\\n\\nCell[27]:\\nSource:\\nnb_hist = get_notebook_history(max_cells=20)\\nnb_hist\\nOutputs:\\n[{\\'data\\': {\\'text/plain\\': [\"[\\'Cell[5]:\\\\\\\\nSource:\\\\\\\\nSystem prompt\\\\\\\\n\\\\\\\\nOutputs:\\\\\\\\nNone\\',\\\\n\", \\' \\\\\\'Cell[6]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nfrom datetime import date\\\\\\\\nsystem_prompt = f\"\"\"\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\nToday\\\\\\\\\\\\\\'s date is {date.today().strftime(\\\\\\\\\\\\\\'%Y-%m-%d\\\\\\\\\\\\\\')}.\\\\\\\\n\"\"\"\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\',\\\\n\\', \\' \"Cell[7]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nfrom typing import cast\\\\\\\\nmodel = cast(KnownModelName, os.getenv(\\\\\\'PYDANTIC_AI_MODEL\\\\\\', \\\\\\'openai:gpt-4o\\\\\\'))\\\\\\\\nprint(f\\\\\\'PydanticAI is using model: {model}\\\\\\')\\\\\\\\nnotebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\'name\\\\\\': \\\\\\'stdout\\\\\\', \\\\\\'output_type\\\\\\': \\\\\\'stream\\\\\\', \\\\\\'text\\\\\\': [\\\\\\'PydanticAI is using model: openai:gpt-4o\\\\\\\\\\\\\\\\n\\\\\\']}]\",\\\\n\\', \\' \\\\\\'Cell[8]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\n_current_agent: Optional[Agent] = None\\\\\\\\n\\\\\\\\ndef get_current_agent() -&gt; Agent:\\\\\\\\n    \"\"\"Get the current agent, falling back to default notebook_agent if none set.\"\"\"\\\\\\\\n    global _current_agent, notebook_agent\\\\\\\\n    return _current_agent or notebook_agent\\\\\\\\n\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\',\\\\n\\', \" \\'Cell[9]:\\\\\\\\nSource:\\\\\\\\n### Adding cell creation tool\\\\\\\\nOutputs:\\\\\\\\nNone\\',\\\\n\", \\' \\\\\\'Cell[10]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nfrom IPython.display import display, Markdown\\\\\\\\nfrom typing import Literal\\\\\\\\n\\\\\\\\n@notebook_agent.tool\\\\\\\\ndef create_cell(ctx: RunContext[str], content: str, cell_type: Literal[\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\'] = \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\') -&gt; str:\\\\\\\\n    \"\"\"Create a new cell in the notebook with the specified content.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        content: The content to put in the new cell\\\\\\\\n        cell_type: Type of cell to create (\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' or \\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\')\\\\\\\\n    \\\\\\\\n    Returns:\\\\\\\\n        A confirmation message\\\\\\\\n    \"\"\"\\\\\\\\n    try:    \\\\\\\\n        ipython = get_ipython()\\\\\\\\n    except NameError:\\\\\\\\n        return \"Error: Not running in IPython/Jupyter environment\"\\\\\\\\n    \\\\\\\\n    # Display the content immediately\\\\\\\\n    if cell_type == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\':\\\\\\\\n        # Set up the next cell with the content\\\\\\\\n        ipython.set_next_input(content)\\\\\\\\n    else:\\\\\\\\n        display(Markdown(content))\\\\\\\\n    \\\\\\\\n    return f\"Created new {cell_type}  with content: {content}\"\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\',\\\\n\\', \" \\'Cell[11]:\\\\\\\\nSource:\\\\\\\\nAlways set custom agents to have create_cell tool\\\\\\\\nOutputs:\\\\\\\\nNone\\',\\\\n\", \\' \\\\\\'Cell[12]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\ndef set_agent(agent: Agent) -&gt; Agent:\\\\\\\\n    \"\"\"Set a custom agent for the notebook.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        agent: PydanticAI agent instance\\\\\\\\n        \\\\\\\\n    Returns:\\\\\\\\n        Configured agent with required tools\\\\\\\\n    \"\"\"\\\\\\\\n    global _current_agent, notebook_agent\\\\\\\\n        \\\\\\\\n    # Always ensure create_cell tool is available\\\\\\\\n    if \\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\' not in agent._function_tools:\\\\\\\\n        # Copy the tool directly from notebook_agent\\\\\\\\n        agent._function_tools[\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\'] = notebook_agent._function_tools[\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\']\\\\\\\\n    \\\\\\\\n    _current_agent = agent\\\\\\\\n    return agent\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\',\\\\n\\', \" \\'Cell[13]:\\\\\\\\nSource:\\\\\\\\nTool testing\\\\\\\\nOutputs:\\\\\\\\nNone\\',\\\\n\", \\' \\\\\\'Cell[14]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\\\\\\\\\\\\\')\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a new code cell with a simple \"Hello, World!\" function. You can run the cell to see the output.\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 7, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\',\\\\n\\', \\' \"Cell[15]:\\\\\\\\nSource:\\\\\\\\ndef hello_world():\\\\\\\\n    print(\\\\\\'Hello, World!\\\\\\')\\\\\\\\n\\\\\\\\n# Call the function to display the output\\\\\\\\nhello_world()\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\'name\\\\\\': \\\\\\'stdout\\\\\\', \\\\\\'output_type\\\\\\': \\\\\\'stream\\\\\\', \\\\\\'text\\\\\\': [\\\\\\'Hello, World!\\\\\\\\\\\\\\\\n\\\\\\']}]\",\\\\n\\', \\' \\\\\\'Cell[16]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\'s environment.\"], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 9, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\',\\\\n\\', \\' \\\\\\'Cell[17]:\\\\\\\\nSource:\\\\\\\\ndef factorial(n):\\\\\\\\n    \"\"\"\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\n\\\\\\\\n    Parameters:\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\n\\\\\\\\n    Returns:\\\\\\\\n    int: Factorial of the input number n\\\\\\\\n    \"\"\"\\\\\\\\n    # Input validation\\\\\\\\n    if not isinstance(n, int):\\\\\\\\n        raise TypeError(\"Input must be an integer\")\\\\\\\\n    if n &lt; 0:\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\n\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\n    if n == 0:\\\\\\\\n        return 1\\\\\\\\n\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\n    return n * factorial(n - 1)\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\',\\\\n\\', \" \\'Cell[18]:\\\\\\\\nSource:\\\\\\\\nTesting agent with history\\\\\\\\nOutputs:\\\\\\\\nNone\\',\\\\n\", \\' \\\\\\'Cell[19]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', message_history=result.new_messages())\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\"I\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'To make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'```python\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'factorial(5)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'```\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'This would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 11, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\',\\\\n\\', \\' \\\\\\'Cell[20]:\\\\\\\\nSource:\\\\\\\\nresult.all_messages()\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is 2024-12-31.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 34, 458473, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', args=ArgsJson(args_json=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be an integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be a non-negative integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\",\"cell_type\":\"code\"}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-call\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 35, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\', content=\\\\\\\\\\\\\\'Created new code cell\\\\\\\\\\\\\\', tool_call_id=\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, 114822, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'tool-return\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 58, 747643, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTo make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfactorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nThis would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 59, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')]\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 12, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\',\\\\n\\', \" \\'Cell[21]:\\\\\\\\nSource:\\\\\\\\n### Adding notebook history\\\\\\\\nOutputs:\\\\\\\\nNone\\',\\\\n\", \\' \\\\\\'Cell[22]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nimport os\\\\\\\\nimport json\\\\\\\\nfrom pathlib import Path\\\\\\\\nfrom typing import Optional, Dict, Any\\\\\\\\n\\\\\\\\n# Cache for notebook data\\\\\\\\n_notebook_cache: Dict[str, Any] = {}\\\\\\\\n\\\\\\\\ndef find_current_notebook() -&gt; Optional[dict]:\\\\\\\\n    \"\"\"Find and cache the current notebook data.\\\\\\\\n    \\\\\\\\n    Returns:\\\\\\\\n        Dict containing notebook data or None if not found\\\\\\\\n    \"\"\"\\\\\\\\n    global _notebook_cache\\\\\\\\n    \\\\\\\\n    try:\\\\\\\\n        ipython = get_ipython()\\\\\\\\n        if not ipython:\\\\\\\\n            return None\\\\\\\\n            \\\\\\\\n        # Get current cell content to identify the notebook\\\\\\\\n        current_cell = ipython.get_parent()[\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\']\\\\\\\\n        \\\\\\\\n        # Check if we already found the notebook\\\\\\\\n        if \\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\' in _notebook_cache:\\\\\\\\n            # Verify it\\\\\\\\\\\\\\'s still the correct notebook by checking the current cell\\\\\\\\n            notebook = _notebook_cache[\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\']\\\\\\\\n            for cell in notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']:\\\\\\\\n                if (cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and \\\\\\\\n                    \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\n                    return notebook\\\\\\\\n        \\\\\\\\n        # If not in cache or cache is invalid, search for the notebook\\\\\\\\n        current_dir = Path.cwd()\\\\\\\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\\\\\\\n        \\\\\\\\n        for nb_file in notebook_files:\\\\\\\\n            try:\\\\\\\\n                with open(nb_file) as f:\\\\\\\\n                    notebook = json.load(f)\\\\\\\\n                    for cell in notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']:\\\\\\\\n                        if (cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and \\\\\\\\n                            \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\n                            # Found the notebook, cache it\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\'] = notebook\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\'file\\\\\\\\\\\\\\'] = nb_file\\\\\\\\n                            return notebook\\\\\\\\n            except Exception:\\\\\\\\n                continue\\\\\\\\n                \\\\\\\\n        return None\\\\\\\\n        \\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error finding notebook: {e}\")\\\\\\\\n        return None\\\\\\\\n\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\',\\\\n\\', \\' \\\\\\'Cell[23]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nmax_lookback = 10\\\\\\\\n\\\\\\\\ndef get_notebook_history(max_cells: int = max_lookback) -&gt; list:\\\\\\\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        max_cells: Maximum number of previous cells to include\\\\\\\\n        \\\\\\\\n    Returns:\\\\\\\\n        List of previous cell contents\\\\\\\\n    \"\"\"\\\\\\\\n    try:\\\\\\\\n        # Get the cached notebook or find it\\\\\\\\n        notebook = find_current_notebook()\\\\\\\\n        if not notebook:\\\\\\\\n            return []\\\\\\\\n            \\\\\\\\n        # Find current cell index\\\\\\\\n        current_cell = get_ipython().get_parent()[\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\']\\\\\\\\n        cells = notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']\\\\\\\\n        current_idx = -1\\\\\\\\n        last_prompt_idx = -1\\\\\\\\n        \\\\\\\\n        # Find current cell and last prompt cell\\\\\\\\n        for idx, cell in enumerate(cells):\\\\\\\\n            source = \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) if isinstance(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'], list) else cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']\\\\\\\\n            \\\\\\\\n            # Find current cell\\\\\\\\n            if current_idx == -1 and cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and source == current_cell:\\\\\\\\n                current_idx = idx\\\\\\\\n                \\\\\\\\n            # Find last prompt cell before current cell\\\\\\\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\\\\\\\n                if cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and source.strip().startswith(\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\'):\\\\\\\\n                    last_prompt_idx = idx\\\\\\\\n                \\\\\\\\n        if current_idx == -1:\\\\\\\\n            return []\\\\\\\\n            \\\\\\\\n        # Get cells between last prompt and current cell\\\\\\\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\\\\\\\n        history = []\\\\\\\\n        \\\\\\\\n        for idx in range(start_idx, current_idx):\\\\\\\\n            cell = cells[idx]            \\\\\\\\n            source = cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'])\\\\\\\\n            if \\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\' in cell:\\\\\\\\n                outputs = cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'], str) else str(cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'])\\\\\\\\n            else:\\\\\\\\n                outputs = \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\'\\\\\\\\n            if not (source.strip().startswith(\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\'#|exclude\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\'#| exclude\\\\\\\\\\\\\\')):\\\\\\\\n                history.append(f\"Cell[{idx}]:\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\n{source}\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\n{outputs}\")\\\\\\\\n        \\\\\\\\n        return history\\\\\\\\n        \\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error getting notebook history: {e}\")\\\\\\\\n        return []\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\',\\\\n\\', \" \\'Cell[24]:\\\\\\\\nSource:\\\\\\\\nTesting notebook history\\\\\\\\nOutputs:\\\\\\\\nNone\\']\"]}, \\'execution_count\\': 18, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]\\n\\nCell[28]:\\nSource:\\n### Creating history-aware prompt\\nOutputs:\\nNone\\n\\nCell[29]:\\nSource:\\n#| export\\ndef create_history_aware_prompt(prompt: str, message_history: list = None, max_history: int = 5) -&gt; tuple:\\n    \"\"\"Create a prompt with notebook history context and message history.\\n    \\n    Args:\\n        prompt: The user\\'s prompt\\n        message_history: Previous conversation messages from results.all_messages()\\n        max_history: Maximum number of previous cells to include\\n        \\n    Returns:\\n        Tuple of (enhanced prompt, combined message history)\\n    \"\"\"\\n    try:\\n        ipython = get_ipython()\\n        if not ipython:\\n            return prompt, message_history\\n        \\n        # Get new cells using our optimized get_notebook_history\\n        new_cells = get_notebook_history(max_cells=max_history)\\n        \\n        if not new_cells and not message_history:\\n            return prompt, None\\n            \\n        # Create message history if none exists\\n        from pydantic_ai.messages import (\\n            ModelRequest, ModelResponse, \\n            UserPromptPart, TextPart\\n        )\\n        \\n        messages = []\\n        \\n        # Add existing message history if provided\\n        if message_history:\\n            messages.extend(message_history)\\n        \\n        # Only add context message if we have new cells\\n        if new_cells:\\n            # Create context message with new cells\\n            history_content = \"\\\\n\\\\n\".join(new_cells)\\n\\n            context_msg = ModelRequest(parts=[\\n                UserPromptPart(\\n                    content=\"Here is the context of new notebook cells that were added:\\\\n\" + history_content\\n                )\\n            ])\\n            \\n            # Create response acknowledging new context\\n            context_response = ModelResponse(parts=[\\n                TextPart(\\n                    content=\"I understand the new notebook context. How can I help?\"\\n                )\\n            ])\\n            \\n            messages.extend([context_msg, context_response])\\n                \\n        return prompt, messages\\n        \\n    except Exception as e:\\n        print(f\"Error creating history-aware prompt: {e}\")\\n        return prompt, message_history\\nOutputs:\\n[]\\n\\nCell[30]:\\nSource:\\nTesting history-aware prompt\\nOutputs:\\nNone\\n\\nCell[31]:\\nSource:\\ncreate_history_aware_prompt(\\'So what you just made for me here?\\', result.all_messages(), max_history=20)\\nOutputs:\\n[{\\'data\\': {\\'text/plain\\': [\"(\\'So what you just made for me here?\\',\\\\n\", \\' [ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\nToday\\\\\\'s date is 2024-12-31.\\\\\\\\n\", part_kind=\\\\\\'system-prompt\\\\\\'), UserPromptPart(content=\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 28, 691513, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'user-prompt\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \\'  ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\'create_cell\\\\\\', args=ArgsJson(args_json=\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n with input validation.\\\\\\\\\\\\\\\\n    :param n: non-negative integer\\\\\\\\\\\\\\\\n    :return: factorial of n\\\\\\\\\\\\\\\\n    :raises ValueError: if n is not a non-negative integer\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\"Input must be an integer\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\"Input must be a non-negative integer\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n    if n == 0 or n == 1:\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\n    result = 1\\\\\\\\\\\\\\\\n    for i in range(2, n + 1):\\\\\\\\\\\\\\\\n        result *= i\\\\\\\\\\\\\\\\n    return result\",\"cell_type\":\"code\"}\\\\\\'), tool_call_id=\\\\\\'call_Iuc8vC4Y2axuMDvDh3TlF9mz\\\\\\', part_kind=\\\\\\'tool-call\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 29, tzinfo=datetime.timezone.utc), kind=\\\\\\'response\\\\\\'),\\\\n\\', \\'  ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\'create_cell\\\\\\', content=\\\\\\'Created new code  with content: def factorial(n):\\\\\\\\n    \"\"\"\\\\\\\\n    Calculate the factorial of a non-negative integer n with input validation.\\\\\\\\n    :param n: non-negative integer\\\\\\\\n    :return: factorial of n\\\\\\\\n    :raises ValueError: if n is not a non-negative integer\\\\\\\\n    \"\"\"\\\\\\\\n    if not isinstance(n, int):\\\\\\\\n        raise ValueError(\"Input must be an integer\")\\\\\\\\n    if n &lt; 0:\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\n    if n == 0 or n == 1:\\\\\\\\n        return 1\\\\\\\\n    result = 1\\\\\\\\n    for i in range(2, n + 1):\\\\\\\\n        result *= i\\\\\\\\n    return result\\\\\\', tool_call_id=\\\\\\'call_Iuc8vC4Y2axuMDvDh3TlF9mz\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 32, 646314, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'tool-return\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \"  ModelResponse(parts=[TextPart(content=\\'I have created a function to calculate the factorial of a number with input validation. You can test it by calling the `factorial` function with a non-negative integer as the argument.\\', part_kind=\\'text\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 33, tzinfo=datetime.timezone.utc), kind=\\'response\\'),\\\\n\", \"  ModelRequest(parts=[UserPromptPart(content=\\'So what you just made for me here?\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 33, 948002, tzinfo=datetime.timezone.utc), part_kind=\\'user-prompt\\')], kind=\\'request\\'),\\\\n\", \\'  ModelResponse(parts=[TextPart(content=\"I created a Python function named `factorial` that calculates the factorial of a non-negative integer. This function includes input validation to ensure that the input is a non-negative integer. If the input is not valid (i.e., not an integer or a negative integer), it raises a `ValueError`.\\\\\\\\n\\\\\\\\nHere\\\\\\'s a summary of what the function does:\\\\\\\\n- It checks if the input is an integer. If not, it raises a `ValueError`.\\\\\\\\n- It checks if the input is a non-negative integer. If it\\\\\\'s negative, it raises a `ValueError`.\\\\\\\\n- If the input is 0 or 1, it returns 1 (since 0! = 1! = 1).\\\\\\\\n- For other positive integers, it calculates the factorial by multiplying all integers from 2 up to the input number and returns the result.\", part_kind=\\\\\\'text\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 34, tzinfo=datetime.timezone.utc), kind=\\\\\\'response\\\\\\'),\\\\n\\', \\'  ModelRequest(parts=[UserPromptPart(content=\\\\\\'Here is the context of new notebook cells that were added:\\\\\\\\nCell[9]:\\\\\\\\nSource:\\\\\\\\n### Adding cell creation tool\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[10]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nfrom IPython.display import display, Markdown\\\\\\\\nfrom typing import Literal\\\\\\\\n\\\\\\\\n@notebook_agent.tool\\\\\\\\ndef create_cell(ctx: RunContext[str], content: str, cell_type: Literal[\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\'] = \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\') -&gt; str:\\\\\\\\n    \"\"\"Create a new cell in the notebook with the specified content.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        content: The content to put in the new cell\\\\\\\\n        cell_type: Type of cell to create (\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' or \\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\')\\\\\\\\n    \\\\\\\\n    Returns:\\\\\\\\n        A confirmation message\\\\\\\\n    \"\"\"\\\\\\\\n    try:    \\\\\\\\n        ipython = get_ipython()\\\\\\\\n    except NameError:\\\\\\\\n        return \"Error: Not running in IPython/Jupyter environment\"\\\\\\\\n    \\\\\\\\n    # Display the content immediately\\\\\\\\n    if cell_type == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\':\\\\\\\\n        # Set up the next cell with the content\\\\\\\\n        ipython.set_next_input(content)\\\\\\\\n    else:\\\\\\\\n        display(Markdown(content))\\\\\\\\n    \\\\\\\\n    return f\"Created new {cell_type}  with content: {content}\"\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[11]:\\\\\\\\nSource:\\\\\\\\nAlways set custom agents to have create_cell tool\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[12]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\ndef set_agent(agent: Agent) -&gt; Agent:\\\\\\\\n    \"\"\"Set a custom agent for the notebook.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        agent: PydanticAI agent instance\\\\\\\\n        \\\\\\\\n    Returns:\\\\\\\\n        Configured agent with required tools\\\\\\\\n    \"\"\"\\\\\\\\n    global _current_agent, notebook_agent\\\\\\\\n        \\\\\\\\n    # Always ensure create_cell tool is available\\\\\\\\n    if \\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\' not in agent._function_tools:\\\\\\\\n        # Copy the tool directly from notebook_agent\\\\\\\\n        agent._function_tools[\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\'] = notebook_agent._function_tools[\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\']\\\\\\\\n    \\\\\\\\n    _current_agent = agent\\\\\\\\n    return agent\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[13]:\\\\\\\\nSource:\\\\\\\\nTool testing\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[14]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\\\\\\\\\\\\\')\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a new code cell with a simple \"Hello, World!\" function. You can run the cell to see the output.\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 7, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[15]:\\\\\\\\nSource:\\\\\\\\ndef hello_world():\\\\\\\\n    print(\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\')\\\\\\\\n\\\\\\\\n# Call the function to display the output\\\\\\\\nhello_world()\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'text\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\']}]\\\\\\\\n\\\\\\\\nCell[16]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\'s environment.\"], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 9, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[17]:\\\\\\\\nSource:\\\\\\\\ndef factorial(n):\\\\\\\\n    \"\"\"\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\n\\\\\\\\n    Parameters:\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\n\\\\\\\\n    Returns:\\\\\\\\n    int: Factorial of the input number n\\\\\\\\n    \"\"\"\\\\\\\\n    # Input validation\\\\\\\\n    if not isinstance(n, int):\\\\\\\\n        raise TypeError(\"Input must be an integer\")\\\\\\\\n    if n &lt; 0:\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\n\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\n    if n == 0:\\\\\\\\n        return 1\\\\\\\\n\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\n    return n * factorial(n - 1)\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[18]:\\\\\\\\nSource:\\\\\\\\nTesting agent with history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[19]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', message_history=result.new_messages())\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\"I\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'To make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'```python\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'factorial(5)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'```\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'This would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 11, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[20]:\\\\\\\\nSource:\\\\\\\\nresult.all_messages()\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is 2024-12-31.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 34, 458473, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', args=ArgsJson(args_json=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be an integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be a non-negative integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\",\"cell_type\":\"code\"}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-call\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 35, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\', content=\\\\\\\\\\\\\\'Created new code cell\\\\\\\\\\\\\\', tool_call_id=\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, 114822, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'tool-return\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 58, 747643, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTo make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfactorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nThis would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 59, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')]\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 12, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[21]:\\\\\\\\nSource:\\\\\\\\n### Adding notebook history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[22]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nimport os\\\\\\\\nimport json\\\\\\\\nfrom pathlib import Path\\\\\\\\nfrom typing import Optional, Dict, Any\\\\\\\\n\\\\\\\\n# Cache for notebook data\\\\\\\\n_notebook_cache: Dict[str, Any] = {}\\\\\\\\n\\\\\\\\ndef find_current_notebook() -&gt; Optional[dict]:\\\\\\\\n    \"\"\"Find and cache the current notebook data.\\\\\\\\n    \\\\\\\\n    Returns:\\\\\\\\n        Dict containing notebook data or None if not found\\\\\\\\n    \"\"\"\\\\\\\\n    global _notebook_cache\\\\\\\\n    \\\\\\\\n    try:\\\\\\\\n        ipython = get_ipython()\\\\\\\\n        if not ipython:\\\\\\\\n            return None\\\\\\\\n            \\\\\\\\n        # Get current cell content to identify the notebook\\\\\\\\n        current_cell = ipython.get_parent()[\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\']\\\\\\\\n        \\\\\\\\n        # Check if we already found the notebook\\\\\\\\n        if \\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\' in _notebook_cache:\\\\\\\\n            # Verify it\\\\\\\\\\\\\\'s still the correct notebook by checking the current cell\\\\\\\\n            notebook = _notebook_cache[\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\']\\\\\\\\n            for cell in notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']:\\\\\\\\n                if (cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and \\\\\\\\n                    \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\n                    return notebook\\\\\\\\n        \\\\\\\\n        # If not in cache or cache is invalid, search for the notebook\\\\\\\\n        current_dir = Path.cwd()\\\\\\\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\\\\\\\n        \\\\\\\\n        for nb_file in notebook_files:\\\\\\\\n            try:\\\\\\\\n                with open(nb_file) as f:\\\\\\\\n                    notebook = json.load(f)\\\\\\\\n                    for cell in notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']:\\\\\\\\n                        if (cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and \\\\\\\\n                            \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\n                            # Found the notebook, cache it\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\'] = notebook\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\'file\\\\\\\\\\\\\\'] = nb_file\\\\\\\\n                            return notebook\\\\\\\\n            except Exception:\\\\\\\\n                continue\\\\\\\\n                \\\\\\\\n        return None\\\\\\\\n        \\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error finding notebook: {e}\")\\\\\\\\n        return None\\\\\\\\n\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[23]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nmax_lookback = 10\\\\\\\\n\\\\\\\\ndef get_notebook_history(max_cells: int = max_lookback) -&gt; list:\\\\\\\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        max_cells: Maximum number of previous cells to include\\\\\\\\n        \\\\\\\\n    Returns:\\\\\\\\n        List of previous cell contents\\\\\\\\n    \"\"\"\\\\\\\\n    try:\\\\\\\\n        # Get the cached notebook or find it\\\\\\\\n        notebook = find_current_notebook()\\\\\\\\n        if not notebook:\\\\\\\\n            return []\\\\\\\\n            \\\\\\\\n        # Find current cell index\\\\\\\\n        current_cell = get_ipython().get_parent()[\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\']\\\\\\\\n        cells = notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']\\\\\\\\n        current_idx = -1\\\\\\\\n        last_prompt_idx = -1\\\\\\\\n        \\\\\\\\n        # Find current cell and last prompt cell\\\\\\\\n        for idx, cell in enumerate(cells):\\\\\\\\n            source = \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) if isinstance(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'], list) else cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']\\\\\\\\n            \\\\\\\\n            # Find current cell\\\\\\\\n            if current_idx == -1 and cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and source == current_cell:\\\\\\\\n                current_idx = idx\\\\\\\\n                \\\\\\\\n            # Find last prompt cell before current cell\\\\\\\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\\\\\\\n                if cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and source.strip().startswith(\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\'):\\\\\\\\n                    last_prompt_idx = idx\\\\\\\\n                \\\\\\\\n        if current_idx == -1:\\\\\\\\n            return []\\\\\\\\n            \\\\\\\\n        # Get cells between last prompt and current cell\\\\\\\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\\\\\\\n        history = []\\\\\\\\n        \\\\\\\\n        for idx in range(start_idx, current_idx):\\\\\\\\n            cell = cells[idx]            \\\\\\\\n            source = cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'])\\\\\\\\n            if \\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\' in cell:\\\\\\\\n                outputs = cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'], str) else str(cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'])\\\\\\\\n            else:\\\\\\\\n                outputs = \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\'\\\\\\\\n            if not (source.strip().startswith(\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\'#|exclude\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\'#| exclude\\\\\\\\\\\\\\')):\\\\\\\\n                history.append(f\"Cell[{idx}]:\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\n{source}\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\n{outputs}\")\\\\\\\\n        \\\\\\\\n        return history\\\\\\\\n        \\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error getting notebook history: {e}\")\\\\\\\\n        return []\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[24]:\\\\\\\\nSource:\\\\\\\\nTesting notebook history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[25]:\\\\\\\\nSource:\\\\\\\\nnb_hist = get_notebook_history(max_cells=20)\\\\\\\\nnb_hist\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\"[\\\\\\\\\\\\\\'Cell[3]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom dotenv import load_dotenv\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic import BaseModel, Field\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic_ai import Agent, ModelRetry, RunContext\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic_ai.models import KnownModelName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nload_dotenv()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Enable async/await in Jupyter\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport nest_asyncio\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnest_asyncio.apply()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\'Cell[4]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Agent setup\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\'Cell[5]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSystem prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[6]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom datetime import date\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nsystem_prompt = f\"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is {date.today().strftime(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%Y-%m-%d\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')}.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \"Cell[7]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import cast\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nmodel = cast(KnownModelName, os.getenv(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PYDANTIC_AI_MODEL\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'openai:gpt-4o\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nprint(f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PydanticAI is using model: {model}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnotebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PydanticAI is using model: openai:gpt-4o\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\",\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[8]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef refresh_agent():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    notebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\'Cell[9]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n### Adding cell creation tool\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[10]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom IPython.display import display, Markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Literal\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n@notebook_agent.tool\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef create_cell(ctx: RunContext[str], content: str, cell_type: Literal[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') -&gt; str:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Create a new cell in the notebook with the specified content.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        content: The content to put in the new cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cell_type: Type of cell to create (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' or \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        A confirmation message\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except NameError:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return \"Error: Not running in IPython/Jupyter environment\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Display the content immediately\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if cell_type == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\':\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # display(Markdown(f\"```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{content}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Set up the next cell with the content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython.set_next_input(content)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    else:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        display(Markdown(content))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return f\"Created new {cell_type} cell\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stderr\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;module&gt;:8: No type or annotation for returned value 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[11]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTool testing\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[12]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a new code cell with a simple \"Hello, World!\" function. You can run the cell to see the output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 7, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \"Cell[13]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef hello_world():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Call the function to display the output\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nhello_world()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\",\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[14]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\"], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 9, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[15]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\"Input must be an integer\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[16]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTesting agent with history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[17]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', message_history=result.new_messages())\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'To make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'factorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'This would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 11, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[18]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult.all_messages()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is 2024-12-31.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 34, 458473, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', args=ArgsJson(args_json=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nn    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be an integern    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be a non-negative integern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\",\"cell_type\":\"code\"}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-call\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 35, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Created new code cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, 114822, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-return\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 58, 747643, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTo make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfactorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nThis would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 59, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 12, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[19]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n### Adding notebook history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[20]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pathlib import Path\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Optional, Dict, Any\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Cache for notebook data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n_notebook_cache: Dict[str, Any] = {}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef find_current_notebook() -&gt; Optional[dict]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Find and cache the current notebook data.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        Dict containing notebook data or None if not found\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global _notebook_cache\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not ipython:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get current cell content to identify the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = ipython.get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Check if we already found the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' in _notebook_cache:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Verify it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s still the correct notebook by checking the current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            notebook = _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # If not in cache or cache is invalid, search for the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_dir = Path.cwd()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for nb_file in notebook_files:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                with open(nb_file) as f:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    notebook = json.load(f)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                        if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            # Found the notebook, cache it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = nb_file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            except Exception:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                continue\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error finding notebook: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[21]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef get_notebook_history(max_cells: int = 5) -&gt; list:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        max_cells: Maximum number of previous cells to include\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        List of previous cell contents\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get the cached notebook or find it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook = find_current_notebook()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not notebook:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell index\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = get_ipython().get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cells = notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        last_prompt_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell and last prompt cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx, cell in enumerate(cells):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            source = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], list) else cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if current_idx == -1 and cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source == current_cell:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                current_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find last prompt cell before current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    last_prompt_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if current_idx == -1:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get cells between last prompt and current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        history = []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx in range(start_idx, current_idx):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            cell = cells[idx]            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            source = cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            outputs = cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if not (source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'#|exclude\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                history.append(f\"Cell[{idx}]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{source}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{outputs}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error getting notebook history: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[22]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTesting notebook history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\']\"]}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 28, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[26]:\\\\\\\\nSource:\\\\\\\\n### Creating history-aware prompt\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[27]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\ndef create_history_aware_prompt(prompt: str, message_history: list = None, max_history: int = 5) -&gt; tuple:\\\\\\\\n    \"\"\"Create a prompt with notebook history context and message history.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        prompt: The user\\\\\\\\\\\\\\'s prompt\\\\\\\\n        message_history: Previous conversation messages from results.all_messages()\\\\\\\\n        max_history: Maximum number of previous cells to include\\\\\\\\n        \\\\\\\\n    Returns:\\\\\\\\n        Tuple of (enhanced prompt, combined message history)\\\\\\\\n    \"\"\"\\\\\\\\n    try:\\\\\\\\n        ipython = get_ipython()\\\\\\\\n        if not ipython:\\\\\\\\n            return prompt, message_history\\\\\\\\n        \\\\\\\\n        # Get new cells using our optimized get_notebook_history\\\\\\\\n        new_cells = get_notebook_history(max_cells=max_history)\\\\\\\\n        \\\\\\\\n        if not new_cells and not message_history:\\\\\\\\n            return prompt, None\\\\\\\\n            \\\\\\\\n        # Create message history if none exists\\\\\\\\n        from pydantic_ai.messages import (\\\\\\\\n            ModelRequest, ModelResponse, \\\\\\\\n            UserPromptPart, TextPart\\\\\\\\n        )\\\\\\\\n        \\\\\\\\n        messages = []\\\\\\\\n        \\\\\\\\n        # Add existing message history if provided\\\\\\\\n        if message_history:\\\\\\\\n            messages.extend(message_history)\\\\\\\\n        \\\\\\\\n        # Only add context message if we have new cells\\\\\\\\n        if new_cells:\\\\\\\\n            # Create context message with new cells\\\\\\\\n            history_content = \"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\".join(new_cells)\\\\\\\\n\\\\\\\\n            context_msg = ModelRequest(parts=[\\\\\\\\n                UserPromptPart(\\\\\\\\n                    content=\"Here is the context of new notebook cells that were added:\\\\\\\\\\\\\\\\n\" + history_content\\\\\\\\n                )\\\\\\\\n            ])\\\\\\\\n            \\\\\\\\n            # Create response acknowledging new context\\\\\\\\n            context_response = ModelResponse(parts=[\\\\\\\\n                TextPart(\\\\\\\\n                    content=\"I understand the new notebook context. How can I help?\"\\\\\\\\n                )\\\\\\\\n            ])\\\\\\\\n            \\\\\\\\n            messages.extend([context_msg, context_response])\\\\\\\\n                \\\\\\\\n        return prompt, messages\\\\\\\\n        \\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error creating history-aware prompt: {e}\")\\\\\\\\n        return prompt, message_history\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[28]:\\\\\\\\nSource:\\\\\\\\nTesting history-aware prompt\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 37, 899389, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'user-prompt\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \"  ModelResponse(parts=[TextPart(content=\\'I understand the new notebook context. How can I help?\\', part_kind=\\'text\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 37, 899406, tzinfo=datetime.timezone.utc), kind=\\'response\\')])\"]}, \\'execution_count\\': 20, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]\\n\\nCell[32]:\\nSource:\\n### Running agent with notebook history\\nOutputs:\\nNone\\n\\nCell[33]:\\nSource:\\n#| export\\nfrom typing import Any\\ndef run_with_history(agent: Agent, prompt: str, message_history: list = None, max_history: int = 5) -&gt; Any:\\n    \"\"\"Run the agent with notebook and conversation history context.\\n    \\n    Args:\\n        agent: The PydanticAI agent\\n        prompt: The user\\'s prompt\\n        message_history: Previous conversation messages\\n        max_history: Maximum number of previous cells to include\\n        \\n    Returns:\\n        Agent run result\\n    \"\"\"\\n    prompt, combined_history = create_history_aware_prompt(\\n        prompt, \\n        message_history=message_history, \\n        max_history=max_history\\n    )\\n    return agent.run_sync(prompt, message_history=combined_history)\\nOutputs:\\n[]\\n\\nCell[34]:\\nSource:\\nTesting run_with_history\\nOutputs:\\nNone', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 52, 423920, tzinfo=datetime.timezone.utc), part_kind='user-prompt')], kind='request'),\n ModelResponse(parts=[TextPart(content='I understand the new notebook context. How can I help?', part_kind='text')], timestamp=datetime.datetime(2024, 12, 31, 13, 10, 52, 423939, tzinfo=datetime.timezone.utc), kind='response'),\n ModelRequest(parts=[UserPromptPart(content='So what is going on in this notebook?', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 52, 424177, tzinfo=datetime.timezone.utc), part_kind='user-prompt')], kind='request'),\n ModelResponse(parts=[TextPart(content='This notebook appears to involve creating, running, and testing an AI-powered assistant, possibly using a tool like Pydantic AI for Jupyter notebooks. Here\\'s a breakdown of the key components and activities happening in this notebook:\\n\\n1. **Setup and Imports**: \\n   - The notebook is set up with various imports from libraries and definitions of system prompts to prepare the AI agent to assist within a Jupyter environment.\\n\\n2. **Agent Configuration**: \\n   - An AI agent (likely PydanticAI or a similar framework) is configured with a model and system prompts to guide its behavior within the notebook.\\n\\n3. **Tool and Function Definitions**: \\n   - Several functions and tools are defined, including `create_cell`, which allows new cells to be programmatically added to the notebook.\\n\\n4. **Notebook Agent Execution**:\\n   - The AI agent is used to execute commands. Examples include requests to create a \"Hello, World!\" function and a factorial function with input validation.\\n\\n5. **Function Implementation**:\\n   - Functions like `hello_world()` and `factorial()` are defined as part of this process. The `factorial` function includes input validation and uses recursion to calculate factorials.\\n\\n6. **Notebook History and Prompt Management**:\\n   - There are methods for capturing the history of cell executions and creating context-aware prompts that consider both the current notebook state and any previous interactions or commands.\\n\\n7. **Execution Testing**:\\n   - Various cells are used to test the system, ensure that functionality is operating correctly, and demonstrate the capabilities of the conversational agent in a Jupyter context.\\n\\n8. **Error Handling and Validation**:\\n   - The notebook handles potential errors (e.g., invalid inputs for the factorial function) and various elements of cell execution and output display.\\n\\n9. **History Creation and Contextual Responses**:\\n   - An advanced feature is the creation of context-aware prompts that adapt based on the content and history of the notebook, indicating a sophisticated interaction system between user inputs and the agent‚Äôs responses.\\n\\nIn summary, the notebook combines Jupyter\\'s interactive capabilities with an AI-driven agent to assist with tasks, automatically manage notebook content, and potentially perform more complex logical operations based on the commands or tasks provided by the user.', part_kind='text')], timestamp=datetime.datetime(2024, 12, 31, 13, 10, 53, tzinfo=datetime.timezone.utc), kind='response')]\n\n\n\n\n\n\nsource\n\n\n\n\n prompt (line, cell)\n\nCell magic to create prompt cells that interact with the AI agent.\n\nwhat this notebook is all about?\n\nThis notebook appears to be part of a system that uses an AI agent to automate tasks within a Jupyter notebook. Here are some key points:\n\nAI Agent Integration: The notebook is integrating a Pydantic AI model, specifically an agent that seems to respond to prompts and perform tasks within the notebook environment.\nFunction Definitions: Several Python functions have been defined:\n\nfactorial(): This function calculates the factorial of a number with input validation.\nhello_world(): A simple function that prints ‚ÄúHello, World!‚Äù.\n\nCell Creation and Management: There are functions and tools implemented to create and manage notebook cells programmatically. For example, the create_cell function uses the IPython‚Äôs API to insert new cells.\nNotebook History Management: The notebook implements functionality to keep track of the history of executed notebook cells, which can be used to provide context to the AI agent.\nHistory-Aware Prompts: Functions like create_history_aware_prompt are used to create prompts that include historical context from the notebook. This allows the AI to make more informed decisions by understanding previous interactions and code.\nTesting and Execution: The notebook includes cells dedicated to testing these features, like running the agent with notebook history and testing the factorial function.\n\nOverall, it seems to be an experimental setup aiming to enhance interaction with a Jupyter notebook using AI for improved productivity and dynamic task execution.\n\n\n\nlast_prompt_result.all_messages()\n\n[ModelRequest(parts=[UserPromptPart(content='Here is the context of new notebook cells that were added:\\nCell[36]:\\nSource:\\nresult.all_messages()\\nOutputs:\\n[{\\'data\\': {\\'text/plain\\': [\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\nToday\\\\\\'s date is 2024-12-31.\\\\\\\\n\", part_kind=\\\\\\'system-prompt\\\\\\'), UserPromptPart(content=\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 28, 691513, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'user-prompt\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\'create_cell\\\\\\', args=ArgsJson(args_json=\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n with input validation.\\\\\\\\\\\\\\\\n    :param n: non-negative integer\\\\\\\\\\\\\\\\n    :return: factorial of n\\\\\\\\\\\\\\\\n    :raises ValueError: if n is not a non-negative integer\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\"Input must be an integer\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\"Input must be a non-negative integer\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n    if n == 0 or n == 1:\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\n    result = 1\\\\\\\\\\\\\\\\n    for i in range(2, n + 1):\\\\\\\\\\\\\\\\n        result *= i\\\\\\\\\\\\\\\\n    return result\",\"cell_type\":\"code\"}\\\\\\'), tool_call_id=\\\\\\'call_Iuc8vC4Y2axuMDvDh3TlF9mz\\\\\\', part_kind=\\\\\\'tool-call\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 29, tzinfo=datetime.timezone.utc), kind=\\\\\\'response\\\\\\'),\\\\n\\', \\' ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\'create_cell\\\\\\', content=\\\\\\'Created new code  with content: def factorial(n):\\\\\\\\n    \"\"\"\\\\\\\\n    Calculate the factorial of a non-negative integer n with input validation.\\\\\\\\n    :param n: non-negative integer\\\\\\\\n    :return: factorial of n\\\\\\\\n    :raises ValueError: if n is not a non-negative integer\\\\\\\\n    \"\"\"\\\\\\\\n    if not isinstance(n, int):\\\\\\\\n        raise ValueError(\"Input must be an integer\")\\\\\\\\n    if n &lt; 0:\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\n    if n == 0 or n == 1:\\\\\\\\n        return 1\\\\\\\\n    result = 1\\\\\\\\n    for i in range(2, n + 1):\\\\\\\\n        result *= i\\\\\\\\n    return result\\\\\\', tool_call_id=\\\\\\'call_Iuc8vC4Y2axuMDvDh3TlF9mz\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 32, 646314, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'tool-return\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \" ModelResponse(parts=[TextPart(content=\\'I have created a function to calculate the factorial of a number with input validation. You can test it by calling the `factorial` function with a non-negative integer as the argument.\\', part_kind=\\'text\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 33, tzinfo=datetime.timezone.utc), kind=\\'response\\'),\\\\n\", \" ModelRequest(parts=[UserPromptPart(content=\\'So what you just made for me here?\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 33, 948002, tzinfo=datetime.timezone.utc), part_kind=\\'user-prompt\\')], kind=\\'request\\'),\\\\n\", \\' ModelResponse(parts=[TextPart(content=\"I created a Python function named `factorial` that calculates the factorial of a non-negative integer. This function includes input validation to ensure that the input is a non-negative integer. If the input is not valid (i.e., not an integer or a negative integer), it raises a `ValueError`.\\\\\\\\n\\\\\\\\nHere\\\\\\'s a summary of what the function does:\\\\\\\\n- It checks if the input is an integer. If not, it raises a `ValueError`.\\\\\\\\n- It checks if the input is a non-negative integer. If it\\\\\\'s negative, it raises a `ValueError`.\\\\\\\\n- If the input is 0 or 1, it returns 1 (since 0! = 1! = 1).\\\\\\\\n- For other positive integers, it calculates the factorial by multiplying all integers from 2 up to the input number and returns the result.\", part_kind=\\\\\\'text\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 34, tzinfo=datetime.timezone.utc), kind=\\\\\\'response\\\\\\'),\\\\n\\', \\' ModelRequest(parts=[UserPromptPart(content=\\\\\\'Here is the context of new notebook cells that were added:\\\\\\\\nCell[13]:\\\\\\\\nSource:\\\\\\\\nTool testing\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[14]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\\\\\\\\\\\\\')\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a new code cell with a simple \"Hello, World!\" function. You can run the cell to see the output.\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 7, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[15]:\\\\\\\\nSource:\\\\\\\\ndef hello_world():\\\\\\\\n    print(\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\')\\\\\\\\n\\\\\\\\n# Call the function to display the output\\\\\\\\nhello_world()\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'text\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\']}]\\\\\\\\n\\\\\\\\nCell[16]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\'s environment.\"], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 9, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[17]:\\\\\\\\nSource:\\\\\\\\ndef factorial(n):\\\\\\\\n    \"\"\"\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\n\\\\\\\\n    Parameters:\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\n\\\\\\\\n    Returns:\\\\\\\\n    int: Factorial of the input number n\\\\\\\\n    \"\"\"\\\\\\\\n    # Input validation\\\\\\\\n    if not isinstance(n, int):\\\\\\\\n        raise TypeError(\"Input must be an integer\")\\\\\\\\n    if n &lt; 0:\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\n\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\n    if n == 0:\\\\\\\\n        return 1\\\\\\\\n\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\n    return n * factorial(n - 1)\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[18]:\\\\\\\\nSource:\\\\\\\\nTesting agent with history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[19]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', message_history=result.new_messages())\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\"I\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'To make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'```python\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'factorial(5)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'```\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'This would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 11, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[20]:\\\\\\\\nSource:\\\\\\\\nresult.all_messages()\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is 2024-12-31.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 34, 458473, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', args=ArgsJson(args_json=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be an integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be a non-negative integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\",\"cell_type\":\"code\"}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-call\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 35, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\', content=\\\\\\\\\\\\\\'Created new code cell\\\\\\\\\\\\\\', tool_call_id=\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, 114822, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'tool-return\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 58, 747643, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTo make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfactorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nThis would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 59, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')]\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 12, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[21]:\\\\\\\\nSource:\\\\\\\\n### Adding notebook history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[22]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nimport os\\\\\\\\nimport json\\\\\\\\nfrom pathlib import Path\\\\\\\\nfrom typing import Optional, Dict, Any\\\\\\\\n\\\\\\\\n# Cache for notebook data\\\\\\\\n_notebook_cache: Dict[str, Any] = {}\\\\\\\\n\\\\\\\\ndef find_current_notebook() -&gt; Optional[dict]:\\\\\\\\n    \"\"\"Find and cache the current notebook data.\\\\\\\\n    \\\\\\\\n    Returns:\\\\\\\\n        Dict containing notebook data or None if not found\\\\\\\\n    \"\"\"\\\\\\\\n    global _notebook_cache\\\\\\\\n    \\\\\\\\n    try:\\\\\\\\n        ipython = get_ipython()\\\\\\\\n        if not ipython:\\\\\\\\n            return None\\\\\\\\n            \\\\\\\\n        # Get current cell content to identify the notebook\\\\\\\\n        current_cell = ipython.get_parent()[\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\']\\\\\\\\n        \\\\\\\\n        # Check if we already found the notebook\\\\\\\\n        if \\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\' in _notebook_cache:\\\\\\\\n            # Verify it\\\\\\\\\\\\\\'s still the correct notebook by checking the current cell\\\\\\\\n            notebook = _notebook_cache[\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\']\\\\\\\\n            for cell in notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']:\\\\\\\\n                if (cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and \\\\\\\\n                    \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\n                    return notebook\\\\\\\\n        \\\\\\\\n        # If not in cache or cache is invalid, search for the notebook\\\\\\\\n        current_dir = Path.cwd()\\\\\\\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\\\\\\\n        \\\\\\\\n        for nb_file in notebook_files:\\\\\\\\n            try:\\\\\\\\n                with open(nb_file) as f:\\\\\\\\n                    notebook = json.load(f)\\\\\\\\n                    for cell in notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']:\\\\\\\\n                        if (cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and \\\\\\\\n                            \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\n                            # Found the notebook, cache it\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\'] = notebook\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\'file\\\\\\\\\\\\\\'] = nb_file\\\\\\\\n                            return notebook\\\\\\\\n            except Exception:\\\\\\\\n                continue\\\\\\\\n                \\\\\\\\n        return None\\\\\\\\n        \\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error finding notebook: {e}\")\\\\\\\\n        return None\\\\\\\\n\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[23]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nmax_lookback = 10\\\\\\\\n\\\\\\\\ndef get_notebook_history(max_cells: int = max_lookback) -&gt; list:\\\\\\\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        max_cells: Maximum number of previous cells to include\\\\\\\\n        \\\\\\\\n    Returns:\\\\\\\\n        List of previous cell contents\\\\\\\\n    \"\"\"\\\\\\\\n    try:\\\\\\\\n        # Get the cached notebook or find it\\\\\\\\n        notebook = find_current_notebook()\\\\\\\\n        if not notebook:\\\\\\\\n            return []\\\\\\\\n            \\\\\\\\n        # Find current cell index\\\\\\\\n        current_cell = get_ipython().get_parent()[\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\']\\\\\\\\n        cells = notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']\\\\\\\\n        current_idx = -1\\\\\\\\n        last_prompt_idx = -1\\\\\\\\n        \\\\\\\\n        # Find current cell and last prompt cell\\\\\\\\n        for idx, cell in enumerate(cells):\\\\\\\\n            source = \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) if isinstance(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'], list) else cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']\\\\\\\\n            \\\\\\\\n            # Find current cell\\\\\\\\n            if current_idx == -1 and cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and source == current_cell:\\\\\\\\n                current_idx = idx\\\\\\\\n                \\\\\\\\n            # Find last prompt cell before current cell\\\\\\\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\\\\\\\n                if cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and source.strip().startswith(\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\'):\\\\\\\\n                    last_prompt_idx = idx\\\\\\\\n                \\\\\\\\n        if current_idx == -1:\\\\\\\\n            return []\\\\\\\\n            \\\\\\\\n        # Get cells between last prompt and current cell\\\\\\\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\\\\\\\n        history = []\\\\\\\\n        \\\\\\\\n        for idx in range(start_idx, current_idx):\\\\\\\\n            cell = cells[idx]            \\\\\\\\n            source = cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'])\\\\\\\\n            if \\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\' in cell:\\\\\\\\n                outputs = cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'], str) else str(cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'])\\\\\\\\n            else:\\\\\\\\n                outputs = \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\'\\\\\\\\n            if not (source.strip().startswith(\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\'#|exclude\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\'#| exclude\\\\\\\\\\\\\\')):\\\\\\\\n                history.append(f\"Cell[{idx}]:\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\n{source}\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\n{outputs}\")\\\\\\\\n        \\\\\\\\n        return history\\\\\\\\n        \\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error getting notebook history: {e}\")\\\\\\\\n        return []\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[24]:\\\\\\\\nSource:\\\\\\\\nTesting notebook history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[25]:\\\\\\\\nSource:\\\\\\\\nnb_hist = get_notebook_history(max_cells=20)\\\\\\\\nnb_hist\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\"[\\\\\\\\\\\\\\'Cell[3]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom dotenv import load_dotenv\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic import BaseModel, Field\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic_ai import Agent, ModelRetry, RunContext\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic_ai.models import KnownModelName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nload_dotenv()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Enable async/await in Jupyter\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport nest_asyncio\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnest_asyncio.apply()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\'Cell[4]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Agent setup\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\'Cell[5]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSystem prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[6]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom datetime import date\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nsystem_prompt = f\"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is {date.today().strftime(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%Y-%m-%d\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')}.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \"Cell[7]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import cast\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nmodel = cast(KnownModelName, os.getenv(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PYDANTIC_AI_MODEL\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'openai:gpt-4o\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nprint(f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PydanticAI is using model: {model}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnotebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PydanticAI is using model: openai:gpt-4o\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\",\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[8]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef refresh_agent():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    notebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\'Cell[9]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n### Adding cell creation tool\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[10]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom IPython.display import display, Markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Literal\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n@notebook_agent.tool\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef create_cell(ctx: RunContext[str], content: str, cell_type: Literal[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') -&gt; str:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Create a new cell in the notebook with the specified content.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        content: The content to put in the new cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cell_type: Type of cell to create (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' or \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        A confirmation message\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except NameError:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return \"Error: Not running in IPython/Jupyter environment\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Display the content immediately\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if cell_type == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\':\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # display(Markdown(f\"```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{content}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Set up the next cell with the content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython.set_next_input(content)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    else:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        display(Markdown(content))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return f\"Created new {cell_type} cell\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stderr\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;module&gt;:8: No type or annotation for returned value 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[11]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTool testing\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[12]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a new code cell with a simple \"Hello, World!\" function. You can run the cell to see the output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 7, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \"Cell[13]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef hello_world():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Call the function to display the output\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nhello_world()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\",\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[14]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\"], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 9, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[15]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\"Input must be an integer\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[16]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTesting agent with history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[17]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', message_history=result.new_messages())\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'To make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'factorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'This would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 11, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[18]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult.all_messages()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is 2024-12-31.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 34, 458473, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', args=ArgsJson(args_json=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nn    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nn    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be an integern    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be a non-negative integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\",\"cell_type\":\"code\"}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-call\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 35, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Created new code cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, 114822, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-return\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 58, 747643, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTo make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfactorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nThis would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 59, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 12, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[19]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n### Adding notebook history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[20]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pathlib import Path\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Optional, Dict, Any\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Cache for notebook data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n_notebook_cache: Dict[str, Any] = {}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef find_current_notebook() -&gt; Optional[dict]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Find and cache the current notebook data.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        Dict containing notebook data or None if not found\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global _notebook_cache\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not ipython:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get current cell content to identify the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = ipython.get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Check if we already found the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' in _notebook_cache:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Verify it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s still the correct notebook by checking the current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            notebook = _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # If not in cache or cache is invalid, search for the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_dir = Path.cwd()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for nb_file in notebook_files:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                with open(nb_file) as f:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    notebook = json.load(f)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                        if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            # Found the notebook, cache it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = nb_file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            except Exception:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                continue\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error finding notebook: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[21]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef get_notebook_history(max_cells: int = 5) -&gt; list:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        max_cells: Maximum number of previous cells to include\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        List of previous cell contents\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get the cached notebook or find it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook = find_current_notebook()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not notebook:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell index\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = get_ipython().get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cells = notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        last_prompt_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell and last prompt cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx, cell in enumerate(cells):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            source = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], list) else cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if current_idx == -1 and cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source == current_cell:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                current_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find last prompt cell before current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    last_prompt_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if current_idx == -1:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get cells between last prompt and current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        history = []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx in range(start_idx, current_idx):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            cell = cells[idx]            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            source = cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            outputs = cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if not (source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'#|exclude\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                history.append(f\"Cell[{idx}]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{source}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{outputs}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error getting notebook history: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[22]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTesting notebook history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\']\"]}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 28, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[26]:\\\\\\\\nSource:\\\\\\\\n### Creating history-aware prompt\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[27]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\ndef create_history_aware_prompt(prompt: str, message_history: list = None, max_history: int = 5) -&gt; tuple:\\\\\\\\n    \"\"\"Create a prompt with notebook history context and message history.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        prompt: The user\\\\\\\\\\\\\\'s prompt\\\\\\\\n        message_history: Previous conversation messages from results.all_messages()\\\\\\\\n        max_history: Maximum number of previous cells to include\\\\\\\\n        \\\\\\\\n    Returns:\\\\\\\\n        Tuple of (enhanced prompt, combined message history)\\\\\\\\n    \"\"\"\\\\\\\\n    try:\\\\\\\\n        ipython = get_ipython()\\\\\\\\n        if not ipython:\\\\\\\\n            return prompt, message_history\\\\\\\\n        \\\\\\\\n        # Get new cells using our optimized get_notebook_history\\\\\\\\n        new_cells = get_notebook_history(max_cells=max_history)\\\\\\\\n        \\\\\\\\n        if not new_cells and not message_history:\\\\\\\\n            return prompt, None\\\\\\\\n            \\\\\\\\n        # Create message history if none exists\\\\\\\\n        from pydantic_ai.messages import (\\\\\\\\n            ModelRequest, ModelResponse, \\\\\\\\n            UserPromptPart, TextPart\\\\\\\\n        )\\\\\\\\n        \\\\\\\\n        messages = []\\\\\\\\n        \\\\\\\\n        # Add existing message history if provided\\\\\\\\n        if message_history:\\\\\\\\n            messages.extend(message_history)\\\\\\\\n        \\\\\\\\n        # Only add context message if we have new cells\\\\\\\\n        if new_cells:\\\\\\\\n            # Create context message with new cells\\\\\\\\n            history_content = \"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\".join(new_cells)\\\\\\\\n\\\\\\\\n            context_msg = ModelRequest(parts=[\\\\\\\\n                UserPromptPart(\\\\\\\\n                    content=\"Here is the context of new notebook cells that were added:\\\\\\\\\\\\\\\\n\" + history_content\\\\\\\\n                )\\\\\\\\n            ])\\\\\\\\n            \\\\\\\\n            # Create response acknowledging new context\\\\\\\\n            context_response = ModelResponse(parts=[\\\\\\\\n                TextPart(\\\\\\\\n                    content=\"I understand the new notebook context. How can I help?\"\\\\\\\\n                )\\\\\\\\n            ])\\\\\\\\n            \\\\\\\\n            messages.extend([context_msg, context_response])\\\\\\\\n                \\\\\\\\n        return prompt, messages\\\\\\\\n        \\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error creating history-aware prompt: {e}\")\\\\\\\\n        return prompt, message_history\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[28]:\\\\\\\\nSource:\\\\\\\\nTesting history-aware prompt\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[29]:\\\\\\\\nSource:\\\\\\\\ncreate_history_aware_prompt(\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', result.all_messages(), max_history=20)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\"(\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' [ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is 2024-12-31.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 34, 458473, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'  ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', args=ArgsJson(args_json=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be an integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be a non-negative integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\",\"cell_type\":\"code\"}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-call\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 35, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \"  ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\', content=\\\\\\\\\\\\\\'Created new code cell\\\\\\\\\\\\\\', tool_call_id=\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, 114822, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'tool-return\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'  ModelResponse(parts=[TextPart(content=\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \"  ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 58, 747643, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'  ModelResponse(parts=[TextPart(content=\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTo make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfactorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nThis would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 59, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'  ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Here is the context of new notebook cells that were added:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[7]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import cast\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nmodel = cast(KnownModelName, os.getenv(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PYDANTIC_AI_MODEL\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'openai:gpt-4o\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nprint(f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PydanticAI is using model: {model}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnotebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PydanticAI is using model: openai:gpt-4o\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[8]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef refresh_agent():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    notebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[9]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n### Adding cell creation tool\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[10]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom IPython.display import display, Markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Literal\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n@notebook_agent.tool\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef create_cell(ctx: RunContext[str], content: str, cell_type: Literal[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') -&gt; str:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Create a new cell in the notebook with the specified content.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        content: The content to put in the new cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cell_type: Type of cell to create (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' or \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        A confirmation message\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except NameError:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return \"Error: Not running in IPython/Jupyter environment\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Display the content immediately\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if cell_type == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\':\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # display(Markdown(f\"```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{content}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Set up the next cell with the content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython.set_next_input(content)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    else:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        display(Markdown(content))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return f\"Created new {cell_type} cell\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stderr\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;module&gt;:8: No type or annotation for returned value 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[11]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTool testing\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[12]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a new code cell with a simple \"Hello, World!\" function. You can run the cell to see the output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 7, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[13]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef hello_world():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Call the function to display the output\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nhello_world()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[14]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\"], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 9, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[15]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\"Input must be an integer\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[16]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTesting agent with history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[17]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', message_history=result.new_messages())\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'To make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'factorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'This would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 11, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[18]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult.all_messages()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is 2024-12-31.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 34, 458473, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', args=ArgsJson(args_json=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nn    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nn    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be an integern    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be a non-negative integern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\",\"cell_type\":\"code\"}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-call\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 35, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Created new code cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, 114822, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-return\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 58, 747643, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTo make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfactorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nThis would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 59, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 12, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[19]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n### Adding notebook history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[20]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pathlib import Path\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Optional, Dict, Any\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Cache for notebook data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n_notebook_cache: Dict[str, Any] = {}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef find_current_notebook() -&gt; Optional[dict]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Find and cache the current notebook data.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        Dict containing notebook data or None if not found\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global _notebook_cache\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not ipython:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get current cell content to identify the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = ipython.get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Check if we already found the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' in _notebook_cache:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Verify it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s still the correct notebook by checking the current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            notebook = _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # If not in cache or cache is invalid, search for the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_dir = Path.cwd()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for nb_file in notebook_files:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                with open(nb_file) as f:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    notebook = json.load(f)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                        if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            # Found the notebook, cache it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = nb_file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            except Exception:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                continue\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error finding notebook: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[21]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef get_notebook_history(max_cells: int = 5) -&gt; list:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        max_cells: Maximum number of previous cells to include\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        List of previous cell contents\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get the cached notebook or find it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook = find_current_notebook()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not notebook:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell index\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = get_ipython().get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cells = notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        last_prompt_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell and last prompt cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx, cell in enumerate(cells):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            source = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], list) else cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if current_idx == -1 and cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source == current_cell:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                current_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find last prompt cell before current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    last_prompt_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if current_idx == -1:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get cells between last prompt and current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        history = []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx in range(start_idx, current_idx):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            cell = cells[idx]            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            source = cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            outputs = cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if not (source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'#|exclude\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                history.append(f\"Cell[{idx}]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{source}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{outputs}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error getting notebook history: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[22]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTesting notebook history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[23]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnb_hist = get_notebook_history(max_cells=20)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnb_hist\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\"[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[0]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| default_exp core\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[1]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| hide\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom nbdev.showdoc import *\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[2]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom dotenv import load_dotenv\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic import BaseModel, Field\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic_ai import Agent, ModelRetry, RunContext\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic_ai.models import KnownModelName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nload_dotenv()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Enable async/await in Jupyter\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport nest_asyncio\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnest_asyncio.apply()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[3]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom datetime import date\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nsystem_prompt = f\"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is {date.today().strftime(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%Y-%m-%d\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')}.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \"Cell[4]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import cast\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nmodel = cast(KnownModelName, os.getenv(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PYDANTIC_AI_MODEL\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'openai:gpt-4o\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nprint(f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PydanticAI is using model: {model}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnotebook_agent = Agent(model, system_prompt=system_prompt)\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[5]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef refresh_agent():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    notebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[6]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom IPython.display import display, Markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Literal\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n@notebook_agent.tool\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef create_cell(ctx: RunContext[str], content: str, cell_type: Literal[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'codemarkdowncode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') -&gt; str:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Create a new cell in the notebook with the specified content.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        content: The content to put in the new cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cell_type: Type of cell to create (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' or \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        A confirmation message\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except NameError:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return \"Error: Not running in IPython/Jupyter environment\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Display the content immediately\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if cell_type == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\':\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # display(Markdown(f\"```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{content}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Set up the next cell with the content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython.set_next_input(content)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    else:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        display(Markdown(content))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return f\"Created new {cell_type} cell\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \"Cell[7]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \"Cell[8]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef hello_world():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Call the function to display the output\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nhello_world()\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[9]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[10]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef factorial(number):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation to check if the number is a non-negative integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(number, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\"Input must be an integer.\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if number &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer.\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 or 1 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if number == 0 or number == 1:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    else:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return number * factorial(number - 1)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Example usage\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nprint(factorial(5))  # Output: 120\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nprint(factorial(0))  # Output: 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Uncomment the following lines to test input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# print(factorial(-1))  # Should raise ValueError\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# print(factorial(3.5))  # Should raise ValueError\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \"Cell[11]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', message_history=result.new_messages())\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[12]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult.all_messages()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[13]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pathlib import Path\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Optional, Dict, Any\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Cache for notebook data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n_notebook_cache: Dict[str, Any] = {}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef find_current_notebook() -&gt; Optional[dict]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Find and cache the current notebook data.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        Dict containing notebook data or None if not found\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global _notebook_cache\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not ipython:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get current cell content to identify the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = ipython.get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'contentcode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Check if we already found the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' in _notebook_cache:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Verify it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s still the correct notebook by checking the current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            notebook = _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_typecode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\njoin(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # If not in cache or cache is invalid, search for the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_dir = Path.cwd()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for nb_file in notebook_files:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                with open(nb_file) as f:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    notebook = json.load(f)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                        if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_typecode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\njoin(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            # Found the notebook, cache it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = nb_file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            except Exception:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                continue\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error finding notebook: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[14]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef get_notebook_history(max_cells: int = 5) -&gt; list:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        max_cells: Maximum number of previous cells to include\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        List of previous cell contents\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get the cached notebook or find it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook = find_current_notebook()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not notebook:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell index\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = get_ipython().get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'contentcode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cells = notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        last_prompt_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell and last prompt cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx, cell in enumerate(cells):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            sourcejoin(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], list) else cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if current_idx == -1 and cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_typecode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source == current_cell:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                current_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find last prompt cell before current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_typecode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    last_prompt_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if current_idx == -1:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get cells between last prompt and current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        history = []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx in range(start_idx, current_idx):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            cell = cells[idx]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_typecode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\':  # Only include code cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                # Skip cells that are prompt cells and nbdev directives\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                source = cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], str) elsejoin(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if not source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    history.append(f\"Cell[{idx}]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{source}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error getting notebook history: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 58, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[24]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n### Creating history-aware prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[25]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef create_history_aware_prompt(prompt: str, message_history: list = None, max_history: int = 5) -&gt; tuple:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Create a prompt with notebook history context and message history.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        prompt: The user\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        message_history: Previous conversation messages from results.all_messages()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        max_history: Maximum number of previous cells to include\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        Tuple of (enhanced prompt, combined message history)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not ipython:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return prompt, message_history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get new cells using our optimized get_notebook_history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        new_cells = get_notebook_history(max_cells=max_history)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not new_cells and not message_history:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return prompt, None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Create message history if none exists\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        from pydantic_ai.messages import (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            ModelRequest, ModelResponse, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            UserPromptPart, TextPart\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        messages = []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Add existing message history if provided\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if message_history:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            messages.extend(message_history)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Only add context message if we have new cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if new_cells:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Create context message with new cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            history_content = \"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\".join(new_cells)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            context_msg = ModelRequest(parts=[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                UserPromptPart(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    content=\"Here is the context of new notebook cells that were added:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\" + history_content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            ])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Create response acknowledging new context\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            context_response = ModelResponse(parts=[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                TextPart(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    content=\"I understand the new notebook context. How can I help?\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            ])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            messages.extend([context_msg, context_response])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return prompt, messages\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error creating history-aware prompt: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return prompt, message_history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[26]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTesting history-aware prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 26, 5, 737496, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \"  ModelResponse(parts=[TextPart(content=\\\\\\\\\\\\\\'I understand the new notebook context. How can I help?\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 26, 5, 737510, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\')])\"]}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 30, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[30]:\\\\\\\\nSource:\\\\\\\\n### Running agent with notebook history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[31]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nfrom typing import Any\\\\\\\\ndef run_with_history(agent: Agent, prompt: str, message_history: list = None, max_history: int = 5) -&gt; Any:\\\\\\\\n    \"\"\"Run the agent with notebook and conversation history context.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        agent: The PydanticAI agent\\\\\\\\n        prompt: The user\\\\\\\\\\\\\\'s prompt\\\\\\\\n        message_history: Previous conversation messages\\\\\\\\n        max_history: Maximum number of previous cells to include\\\\\\\\n        \\\\\\\\n    Returns:\\\\\\\\n        Agent run result\\\\\\\\n    \"\"\"\\\\\\\\n    prompt, combined_history = create_history_aware_prompt(\\\\\\\\n        prompt, \\\\\\\\n        message_history=message_history, \\\\\\\\n        max_history=max_history\\\\\\\\n    )\\\\\\\\n    return agent.run_sync(prompt, message_history=combined_history)\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[32]:\\\\\\\\nSource:\\\\\\\\nTesting run_with_history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 37, 976699, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'user-prompt\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \" ModelResponse(parts=[TextPart(content=\\'I understand the new notebook context. How can I help?\\', part_kind=\\'text\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 37, 976722, tzinfo=datetime.timezone.utc), kind=\\'response\\'),\\\\n\", \" ModelRequest(parts=[UserPromptPart(content=\\'So what is going on in this notebook?\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 37, 976975, tzinfo=datetime.timezone.utc), part_kind=\\'user-prompt\\')], kind=\\'request\\'),\\\\n\", \\' ModelResponse(parts=[TextPart(content=\\\\\\'This notebook appears to be part of a system that uses an AI agent to automate tasks within a Jupyter notebook. Here are some key points:\\\\\\\\n\\\\\\\\n1. **AI Agent Integration**: The notebook is integrating a Pydantic AI model, specifically an agent that seems to respond to prompts and perform tasks within the notebook environment.\\\\\\\\n\\\\\\\\n2. **Function Definitions**: Several Python functions have been defined:\\\\\\\\n   - `factorial()`: This function calculates the factorial of a number with input validation.\\\\\\\\n   - `hello_world()`: A simple function that prints \"Hello, World!\".\\\\\\\\n   \\\\\\\\n3. **Cell Creation and Management**: There are functions and tools implemented to create and manage notebook cells programmatically. For example, the `create_cell` function uses the IPython\\\\\\\\\\\\\\'s API to insert new cells.\\\\\\\\n\\\\\\\\n4. **Notebook History Management**: The notebook implements functionality to keep track of the history of executed notebook cells, which can be used to provide context to the AI agent.\\\\\\\\n\\\\\\\\n5. **History-Aware Prompts**: Functions like `create_history_aware_prompt` are used to create prompts that include historical context from the notebook. This allows the AI to make more informed decisions by understanding previous interactions and code.\\\\\\\\n\\\\\\\\n6. **Testing and Execution**: The notebook includes cells dedicated to testing these features, like running the agent with notebook history and testing the factorial function.\\\\\\\\n\\\\\\\\nOverall, it seems to be an experimental setup aiming to enhance interaction with a Jupyter notebook using AI for improved productivity and dynamic task execution.\\\\\\', part_kind=\\\\\\'text\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 39, tzinfo=datetime.timezone.utc), kind=\\\\\\'response\\\\\\')]\\']}, \\'execution_count\\': 23, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]\\n\\nCell[37]:\\nSource:\\n#| export\\n@notebook_agent.tool\\ndef modify_cell(ctx: RunContext[str], cell_index: int, content: str) -&gt; str:\\n    \"\"\"Modify an existing cell in the notebook.\\n    \\n    Args:\\n        cell_index: The index of the cell to modify\\n        content: The new content for the cell\\n        \\n    Returns:\\n        A confirmation message\\n    \"\"\"\\n    try:\\n        notebook = find_current_notebook()\\n        if not notebook:\\n            return \"Error: Could not find current notebook\"\\n            \\n        cells = notebook[\\'cells\\']\\n        if cell_index &lt; 0 or cell_index &gt;= len(cells):\\n            return f\"Error: Cell index {cell_index} is out of range\"\\n            \\n        # Get the cell\\n        cell = cells[cell_index]\\n        \\n        # Update the cell content in IPython\\n        ipython = get_ipython()\\n        if not ipython:\\n            return \"Error: Not running in IPython environment\"\\n            \\n        # Set the content of the specified cell\\n        ipython.set_next_input(content, replace=True)\\n        \\n        return f\"Modified cell {cell_index} with new content\"\\n        \\n    except Exception as e:\\n        return f\"Error modifying cell: {str(e)}\"\\nOutputs:\\n[{\\'name\\': \\'stderr\\', \\'output_type\\': \\'stream\\', \\'text\\': [\\'&lt;module&gt;:8: No type or annotation for returned value 1\\\\n\\']}, {\\'ename\\': \\'UserError\\', \\'evalue\\': \"Tool name conflicts with existing tool: \\'modify_cell\\'\", \\'output_type\\': \\'error\\', \\'traceback\\': [\\'\\\\x1b[0;31m---------------------------------------------------------------------------\\\\x1b[0m\\', \\'\\\\x1b[0;31mUserError\\\\x1b[0m                                 Traceback (most recent call last)\\', \\'Cell \\\\x1b[0;32mIn[42], line 2\\\\x1b[0m\\\\n\\\\x1b[1;32m      1\\\\x1b[0m \\\\x1b[38;5;66;03m#| export\\\\x1b[39;00m\\\\n\\\\x1b[0;32m----&gt; 2\\\\x1b[0m \\\\x1b[38;5;129;43m@notebook_agent\\\\x1b[39;49m\\\\x1b[38;5;241;43m.\\\\x1b[39;49m\\\\x1b[43mtool\\\\x1b[49m\\\\n\\\\x1b[1;32m      3\\\\x1b[0m \\\\x1b[38;5;28;43;01mdef\\\\x1b[39;49;00m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;21;43mmodify_cell\\\\x1b[39;49m\\\\x1b[43m(\\\\x1b[49m\\\\x1b[43mctx\\\\x1b[49m\\\\x1b[43m:\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[43mRunContext\\\\x1b[49m\\\\x1b[43m[\\\\x1b[49m\\\\x1b[38;5;28;43mstr\\\\x1b[39;49m\\\\x1b[43m]\\\\x1b[49m\\\\x1b[43m,\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[43mcell_index\\\\x1b[49m\\\\x1b[43m:\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;28;43mint\\\\x1b[39;49m\\\\x1b[43m,\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[43mcontent\\\\x1b[49m\\\\x1b[43m:\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;28;43mstr\\\\x1b[39;49m\\\\x1b[43m)\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;241;43m-\\\\x1b[39;49m\\\\x1b[38;5;241;43m&gt;\\\\x1b[39;49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;28;43mstr\\\\x1b[39;49m\\\\x1b[43m:\\\\x1b[49m\\\\n\\\\x1b[1;32m      4\\\\x1b[0m \\\\x1b[38;5;250;43m    \\\\x1b[39;49m\\\\x1b[38;5;124;43;03m\"\"\"Modify an existing cell in the notebook.\\\\x1b[39;49;00m\\\\n\\\\x1b[1;32m      5\\\\x1b[0m \\\\x1b[38;5;124;43;03m    \\\\x1b[39;49;00m\\\\n\\\\x1b[1;32m      6\\\\x1b[0m \\\\x1b[38;5;124;43;03m    Args:\\\\x1b[39;49;00m\\\\n\\\\x1b[0;32m   (...)\\\\x1b[0m\\\\n\\\\x1b[1;32m     11\\\\x1b[0m \\\\x1b[38;5;124;43;03m        A confirmation message\\\\x1b[39;49;00m\\\\n\\\\x1b[1;32m     12\\\\x1b[0m \\\\x1b[38;5;124;43;03m    \"\"\"\\\\x1b[39;49;00m\\\\n\\\\x1b[1;32m     13\\\\x1b[0m \\\\x1b[43m    \\\\x1b[49m\\\\x1b[38;5;28;43;01mtry\\\\x1b[39;49;00m\\\\x1b[43m:\\\\x1b[49m\\\\n\\', \\'File \\\\x1b[0;32m~/WebDev/FH_SQLModel/.venv/lib/python3.12/site-packages/pydantic_ai/agent.py:683\\\\x1b[0m, in \\\\x1b[0;36mAgent.tool\\\\x1b[0;34m(self, func, retries, prepare)\\\\x1b[0m\\\\n\\\\x1b[1;32m    680\\\\x1b[0m     \\\\x1b[38;5;28;01mreturn\\\\x1b[39;00m tool_decorator\\\\n\\\\x1b[1;32m    681\\\\x1b[0m \\\\x1b[38;5;28;01melse\\\\x1b[39;00m:\\\\n\\\\x1b[1;32m    682\\\\x1b[0m     \\\\x1b[38;5;66;03m# noinspection PyTypeChecker\\\\x1b[39;00m\\\\n\\\\x1b[0;32m--&gt; 683\\\\x1b[0m     \\\\x1b[38;5;28;43mself\\\\x1b[39;49m\\\\x1b[38;5;241;43m.\\\\x1b[39;49m\\\\x1b[43m_register_function\\\\x1b[49m\\\\x1b[43m(\\\\x1b[49m\\\\x1b[43mfunc\\\\x1b[49m\\\\x1b[43m,\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;28;43;01mTrue\\\\x1b[39;49;00m\\\\x1b[43m,\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[43mretries\\\\x1b[49m\\\\x1b[43m,\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[43mprepare\\\\x1b[49m\\\\x1b[43m)\\\\x1b[49m\\\\n\\\\x1b[1;32m    684\\\\x1b[0m     \\\\x1b[38;5;28;01mreturn\\\\x1b[39;00m func\\\\n\\', \\'File \\\\x1b[0;32m~/WebDev/FH_SQLModel/.venv/lib/python3.12/site-packages/pydantic_ai/agent.py:765\\\\x1b[0m, in \\\\x1b[0;36mAgent._register_function\\\\x1b[0;34m(self, func, takes_ctx, retries, prepare)\\\\x1b[0m\\\\n\\\\x1b[1;32m    763\\\\x1b[0m retries_ \\\\x1b[38;5;241m=\\\\x1b[39m retries \\\\x1b[38;5;28;01mif\\\\x1b[39;00m retries \\\\x1b[38;5;129;01mis\\\\x1b[39;00m \\\\x1b[38;5;129;01mnot\\\\x1b[39;00m \\\\x1b[38;5;28;01mNone\\\\x1b[39;00m \\\\x1b[38;5;28;01melse\\\\x1b[39;00m \\\\x1b[38;5;28mself\\\\x1b[39m\\\\x1b[38;5;241m.\\\\x1b[39m_default_retries\\\\n\\\\x1b[1;32m    764\\\\x1b[0m tool \\\\x1b[38;5;241m=\\\\x1b[39m Tool(func, takes_ctx\\\\x1b[38;5;241m=\\\\x1b[39mtakes_ctx, max_retries\\\\x1b[38;5;241m=\\\\x1b[39mretries_, prepare\\\\x1b[38;5;241m=\\\\x1b[39mprepare)\\\\n\\\\x1b[0;32m--&gt; 765\\\\x1b[0m \\\\x1b[38;5;28;43mself\\\\x1b[39;49m\\\\x1b[38;5;241;43m.\\\\x1b[39;49m\\\\x1b[43m_register_tool\\\\x1b[49m\\\\x1b[43m(\\\\x1b[49m\\\\x1b[43mtool\\\\x1b[49m\\\\x1b[43m)\\\\x1b[49m\\\\n\\', \"File \\\\x1b[0;32m~/WebDev/FH_SQLModel/.venv/lib/python3.12/site-packages/pydantic_ai/agent.py:774\\\\x1b[0m, in \\\\x1b[0;36mAgent._register_tool\\\\x1b[0;34m(self, tool)\\\\x1b[0m\\\\n\\\\x1b[1;32m    771\\\\x1b[0m     tool \\\\x1b[38;5;241m=\\\\x1b[39m dataclasses\\\\x1b[38;5;241m.\\\\x1b[39mreplace(tool, max_retries\\\\x1b[38;5;241m=\\\\x1b[39m\\\\x1b[38;5;28mself\\\\x1b[39m\\\\x1b[38;5;241m.\\\\x1b[39m_default_retries)\\\\n\\\\x1b[1;32m    773\\\\x1b[0m \\\\x1b[38;5;28;01mif\\\\x1b[39;00m tool\\\\x1b[38;5;241m.\\\\x1b[39mname \\\\x1b[38;5;129;01min\\\\x1b[39;00m \\\\x1b[38;5;28mself\\\\x1b[39m\\\\x1b[38;5;241m.\\\\x1b[39m_function_tools:\\\\n\\\\x1b[0;32m--&gt; 774\\\\x1b[0m     \\\\x1b[38;5;28;01mraise\\\\x1b[39;00m exceptions\\\\x1b[38;5;241m.\\\\x1b[39mUserError(\\\\x1b[38;5;124mf\\\\x1b[39m\\\\x1b[38;5;124m\\'\\\\x1b[39m\\\\x1b[38;5;124mTool name conflicts with existing tool: \\\\x1b[39m\\\\x1b[38;5;132;01m{\\\\x1b[39;00mtool\\\\x1b[38;5;241m.\\\\x1b[39mname\\\\x1b[38;5;132;01m!r}\\\\x1b[39;00m\\\\x1b[38;5;124m\\'\\\\x1b[39m)\\\\n\\\\x1b[1;32m    776\\\\x1b[0m \\\\x1b[38;5;28;01mif\\\\x1b[39;00m \\\\x1b[38;5;28mself\\\\x1b[39m\\\\x1b[38;5;241m.\\\\x1b[39m_result_schema \\\\x1b[38;5;129;01mand\\\\x1b[39;00m tool\\\\x1b[38;5;241m.\\\\x1b[39mname \\\\x1b[38;5;129;01min\\\\x1b[39;00m \\\\x1b[38;5;28mself\\\\x1b[39m\\\\x1b[38;5;241m.\\\\x1b[39m_result_schema\\\\x1b[38;5;241m.\\\\x1b[39mtools:\\\\n\\\\x1b[1;32m    777\\\\x1b[0m     \\\\x1b[38;5;28;01mraise\\\\x1b[39;00m exceptions\\\\x1b[38;5;241m.\\\\x1b[39mUserError(\\\\x1b[38;5;124mf\\\\x1b[39m\\\\x1b[38;5;124m\\'\\\\x1b[39m\\\\x1b[38;5;124mTool name conflicts with result schema name: \\\\x1b[39m\\\\x1b[38;5;132;01m{\\\\x1b[39;00mtool\\\\x1b[38;5;241m.\\\\x1b[39mname\\\\x1b[38;5;132;01m!r}\\\\x1b[39;00m\\\\x1b[38;5;124m\\'\\\\x1b[39m)\\\\n\", \"\\\\x1b[0;31mUserError\\\\x1b[0m: Tool name conflicts with existing tool: \\'modify_cell\\'\"]}]\\n\\nCell[38]:\\nSource:\\n\\nOutputs:\\n[]\\n\\nCell[39]:\\nSource:\\n### Creating prompt cell magic\\nOutputs:\\nNone\\n\\nCell[40]:\\nSource:\\n#| export\\nfrom IPython.core.magic import register_cell_magic\\n\\n#| export\\n@register_cell_magic\\ndef prompt(line, cell):\\n    \"\"\"Cell magic to create prompt cells that interact with the AI agent.\"\"\"\\n    try:\\n        # Get the last result\\'s message history if it exists\\n        message_history = None\\n        if \\'last_prompt_result\\' in get_ipython().user_ns:\\n            last_result = get_ipython().user_ns[\\'last_prompt_result\\']\\n            if hasattr(last_result, \\'all_messages\\'):\\n                message_history = last_result.all_messages()\\n        \\n        # Use get_current_agent() instead of notebook_agent directly\\n        agent = get_current_agent()\\n        \\n        # Run the prompt through our agent with history context\\n        result = run_with_history(\\n            agent, \\n            cell.strip(), \\n            message_history=message_history\\n        )\\n        \\n        # Store the result for next time\\n        get_ipython().user_ns[\\'last_prompt_result\\'] = result\\n        \\n        return Markdown(result.data)\\n    except Exception as e:\\n        return f\"Error processing prompt: {str(e)}\"\\nOutputs:\\n[]', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 59, 436565, tzinfo=datetime.timezone.utc), part_kind='user-prompt')], kind='request'),\n ModelResponse(parts=[TextPart(content='I understand the new notebook context. How can I help?', part_kind='text')], timestamp=datetime.datetime(2024, 12, 31, 13, 10, 59, 436588, tzinfo=datetime.timezone.utc), kind='response'),\n ModelRequest(parts=[UserPromptPart(content='what this notebook is all about?', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 59, 436914, tzinfo=datetime.timezone.utc), part_kind='user-prompt')], kind='request'),\n ModelResponse(parts=[TextPart(content='This notebook appears to be part of a system that uses an AI agent to automate tasks within a Jupyter notebook. Here are some key points:\\n\\n1. **AI Agent Integration**: The notebook is integrating a Pydantic AI model, specifically an agent that seems to respond to prompts and perform tasks within the notebook environment.\\n\\n2. **Function Definitions**: Several Python functions have been defined:\\n   - `factorial()`: This function calculates the factorial of a number with input validation.\\n   - `hello_world()`: A simple function that prints \"Hello, World!\".\\n\\n3. **Cell Creation and Management**: There are functions and tools implemented to create and manage notebook cells programmatically. For example, the `create_cell` function uses the IPython\\'s API to insert new cells.\\n\\n4. **Notebook History Management**: The notebook implements functionality to keep track of the history of executed notebook cells, which can be used to provide context to the AI agent.\\n\\n5. **History-Aware Prompts**: Functions like `create_history_aware_prompt` are used to create prompts that include historical context from the notebook. This allows the AI to make more informed decisions by understanding previous interactions and code.\\n\\n6. **Testing and Execution**: The notebook includes cells dedicated to testing these features, like running the agent with notebook history and testing the factorial function.\\n\\nOverall, it seems to be an experimental setup aiming to enhance interaction with a Jupyter notebook using AI for improved productivity and dynamic task execution.', part_kind='text')], timestamp=datetime.datetime(2024, 12, 31, 13, 11, 33, tzinfo=datetime.timezone.utc), kind='response')]\n\n\n\ndef last_prompt_result_data():\n    return last_prompt_result.data\nlast_prompt_result_data()\n\n'This notebook appears to be part of a system that uses an AI agent to automate tasks within a Jupyter notebook. Here are some key points:\\n\\n1. **AI Agent Integration**: The notebook is integrating a Pydantic AI model, specifically an agent that seems to respond to prompts and perform tasks within the notebook environment.\\n\\n2. **Function Definitions**: Several Python functions have been defined:\\n   - `factorial()`: This function calculates the factorial of a number with input validation.\\n   - `hello_world()`: A simple function that prints \"Hello, World!\".\\n\\n3. **Cell Creation and Management**: There are functions and tools implemented to create and manage notebook cells programmatically. For example, the `create_cell` function uses the IPython\\'s API to insert new cells.\\n\\n4. **Notebook History Management**: The notebook implements functionality to keep track of the history of executed notebook cells, which can be used to provide context to the AI agent.\\n\\n5. **History-Aware Prompts**: Functions like `create_history_aware_prompt` are used to create prompts that include historical context from the notebook. This allows the AI to make more informed decisions by understanding previous interactions and code.\\n\\n6. **Testing and Execution**: The notebook includes cells dedicated to testing these features, like running the agent with notebook history and testing the factorial function.\\n\\nOverall, it seems to be an experimental setup aiming to enhance interaction with a Jupyter notebook using AI for improved productivity and dynamic task execution.'\n\n\n\ndef all_messages():\n    return last_prompt_result.all_messages()\nall_messages()\n\n[ModelRequest(parts=[UserPromptPart(content='Here is the context of new notebook cells that were added:\\nCell[36]:\\nSource:\\nresult.all_messages()\\nOutputs:\\n[{\\'data\\': {\\'text/plain\\': [\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\nToday\\\\\\'s date is 2024-12-31.\\\\\\\\n\", part_kind=\\\\\\'system-prompt\\\\\\'), UserPromptPart(content=\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 28, 691513, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'user-prompt\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\'create_cell\\\\\\', args=ArgsJson(args_json=\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n with input validation.\\\\\\\\\\\\\\\\n    :param n: non-negative integer\\\\\\\\\\\\\\\\n    :return: factorial of n\\\\\\\\\\\\\\\\n    :raises ValueError: if n is not a non-negative integer\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\"Input must be an integer\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\"Input must be a non-negative integer\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n    if n == 0 or n == 1:\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\n    result = 1\\\\\\\\\\\\\\\\n    for i in range(2, n + 1):\\\\\\\\\\\\\\\\n        result *= i\\\\\\\\\\\\\\\\n    return result\",\"cell_type\":\"code\"}\\\\\\'), tool_call_id=\\\\\\'call_Iuc8vC4Y2axuMDvDh3TlF9mz\\\\\\', part_kind=\\\\\\'tool-call\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 29, tzinfo=datetime.timezone.utc), kind=\\\\\\'response\\\\\\'),\\\\n\\', \\' ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\'create_cell\\\\\\', content=\\\\\\'Created new code  with content: def factorial(n):\\\\\\\\n    \"\"\"\\\\\\\\n    Calculate the factorial of a non-negative integer n with input validation.\\\\\\\\n    :param n: non-negative integer\\\\\\\\n    :return: factorial of n\\\\\\\\n    :raises ValueError: if n is not a non-negative integer\\\\\\\\n    \"\"\"\\\\\\\\n    if not isinstance(n, int):\\\\\\\\n        raise ValueError(\"Input must be an integer\")\\\\\\\\n    if n &lt; 0:\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\n    if n == 0 or n == 1:\\\\\\\\n        return 1\\\\\\\\n    result = 1\\\\\\\\n    for i in range(2, n + 1):\\\\\\\\n        result *= i\\\\\\\\n    return result\\\\\\', tool_call_id=\\\\\\'call_Iuc8vC4Y2axuMDvDh3TlF9mz\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 32, 646314, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'tool-return\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \" ModelResponse(parts=[TextPart(content=\\'I have created a function to calculate the factorial of a number with input validation. You can test it by calling the `factorial` function with a non-negative integer as the argument.\\', part_kind=\\'text\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 33, tzinfo=datetime.timezone.utc), kind=\\'response\\'),\\\\n\", \" ModelRequest(parts=[UserPromptPart(content=\\'So what you just made for me here?\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 33, 948002, tzinfo=datetime.timezone.utc), part_kind=\\'user-prompt\\')], kind=\\'request\\'),\\\\n\", \\' ModelResponse(parts=[TextPart(content=\"I created a Python function named `factorial` that calculates the factorial of a non-negative integer. This function includes input validation to ensure that the input is a non-negative integer. If the input is not valid (i.e., not an integer or a negative integer), it raises a `ValueError`.\\\\\\\\n\\\\\\\\nHere\\\\\\'s a summary of what the function does:\\\\\\\\n- It checks if the input is an integer. If not, it raises a `ValueError`.\\\\\\\\n- It checks if the input is a non-negative integer. If it\\\\\\'s negative, it raises a `ValueError`.\\\\\\\\n- If the input is 0 or 1, it returns 1 (since 0! = 1! = 1).\\\\\\\\n- For other positive integers, it calculates the factorial by multiplying all integers from 2 up to the input number and returns the result.\", part_kind=\\\\\\'text\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 34, tzinfo=datetime.timezone.utc), kind=\\\\\\'response\\\\\\'),\\\\n\\', \\' ModelRequest(parts=[UserPromptPart(content=\\\\\\'Here is the context of new notebook cells that were added:\\\\\\\\nCell[13]:\\\\\\\\nSource:\\\\\\\\nTool testing\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[14]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\\\\\\\\\\\\\')\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a new code cell with a simple \"Hello, World!\" function. You can run the cell to see the output.\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 7, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[15]:\\\\\\\\nSource:\\\\\\\\ndef hello_world():\\\\\\\\n    print(\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\')\\\\\\\\n\\\\\\\\n# Call the function to display the output\\\\\\\\nhello_world()\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'text\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\']}]\\\\\\\\n\\\\\\\\nCell[16]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\'s environment.\"], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 9, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[17]:\\\\\\\\nSource:\\\\\\\\ndef factorial(n):\\\\\\\\n    \"\"\"\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\n\\\\\\\\n    Parameters:\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\n\\\\\\\\n    Returns:\\\\\\\\n    int: Factorial of the input number n\\\\\\\\n    \"\"\"\\\\\\\\n    # Input validation\\\\\\\\n    if not isinstance(n, int):\\\\\\\\n        raise TypeError(\"Input must be an integer\")\\\\\\\\n    if n &lt; 0:\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\n\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\n    if n == 0:\\\\\\\\n        return 1\\\\\\\\n\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\n    return n * factorial(n - 1)\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[18]:\\\\\\\\nSource:\\\\\\\\nTesting agent with history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[19]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', message_history=result.new_messages())\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\"I\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'To make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'```python\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'factorial(5)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'```\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'This would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 11, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[20]:\\\\\\\\nSource:\\\\\\\\nresult.all_messages()\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is 2024-12-31.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 34, 458473, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', args=ArgsJson(args_json=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be an integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be a non-negative integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\",\"cell_type\":\"code\"}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-call\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 35, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\', content=\\\\\\\\\\\\\\'Created new code cell\\\\\\\\\\\\\\', tool_call_id=\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, 114822, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'tool-return\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 58, 747643, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTo make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfactorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nThis would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 59, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')]\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 12, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[21]:\\\\\\\\nSource:\\\\\\\\n### Adding notebook history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[22]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nimport os\\\\\\\\nimport json\\\\\\\\nfrom pathlib import Path\\\\\\\\nfrom typing import Optional, Dict, Any\\\\\\\\n\\\\\\\\n# Cache for notebook data\\\\\\\\n_notebook_cache: Dict[str, Any] = {}\\\\\\\\n\\\\\\\\ndef find_current_notebook() -&gt; Optional[dict]:\\\\\\\\n    \"\"\"Find and cache the current notebook data.\\\\\\\\n    \\\\\\\\n    Returns:\\\\\\\\n        Dict containing notebook data or None if not found\\\\\\\\n    \"\"\"\\\\\\\\n    global _notebook_cache\\\\\\\\n    \\\\\\\\n    try:\\\\\\\\n        ipython = get_ipython()\\\\\\\\n        if not ipython:\\\\\\\\n            return None\\\\\\\\n            \\\\\\\\n        # Get current cell content to identify the notebook\\\\\\\\n        current_cell = ipython.get_parent()[\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\']\\\\\\\\n        \\\\\\\\n        # Check if we already found the notebook\\\\\\\\n        if \\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\' in _notebook_cache:\\\\\\\\n            # Verify it\\\\\\\\\\\\\\'s still the correct notebook by checking the current cell\\\\\\\\n            notebook = _notebook_cache[\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\']\\\\\\\\n            for cell in notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']:\\\\\\\\n                if (cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and \\\\\\\\n                    \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\n                    return notebook\\\\\\\\n        \\\\\\\\n        # If not in cache or cache is invalid, search for the notebook\\\\\\\\n        current_dir = Path.cwd()\\\\\\\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\\\\\\\n        \\\\\\\\n        for nb_file in notebook_files:\\\\\\\\n            try:\\\\\\\\n                with open(nb_file) as f:\\\\\\\\n                    notebook = json.load(f)\\\\\\\\n                    for cell in notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']:\\\\\\\\n                        if (cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and \\\\\\\\n                            \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\n                            # Found the notebook, cache it\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\'] = notebook\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\'file\\\\\\\\\\\\\\'] = nb_file\\\\\\\\n                            return notebook\\\\\\\\n            except Exception:\\\\\\\\n                continue\\\\\\\\n                \\\\\\\\n        return None\\\\\\\\n        \\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error finding notebook: {e}\")\\\\\\\\n        return None\\\\\\\\n\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[23]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nmax_lookback = 10\\\\\\\\n\\\\\\\\ndef get_notebook_history(max_cells: int = max_lookback) -&gt; list:\\\\\\\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        max_cells: Maximum number of previous cells to include\\\\\\\\n        \\\\\\\\n    Returns:\\\\\\\\n        List of previous cell contents\\\\\\\\n    \"\"\"\\\\\\\\n    try:\\\\\\\\n        # Get the cached notebook or find it\\\\\\\\n        notebook = find_current_notebook()\\\\\\\\n        if not notebook:\\\\\\\\n            return []\\\\\\\\n            \\\\\\\\n        # Find current cell index\\\\\\\\n        current_cell = get_ipython().get_parent()[\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\']\\\\\\\\n        cells = notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']\\\\\\\\n        current_idx = -1\\\\\\\\n        last_prompt_idx = -1\\\\\\\\n        \\\\\\\\n        # Find current cell and last prompt cell\\\\\\\\n        for idx, cell in enumerate(cells):\\\\\\\\n            source = \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) if isinstance(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'], list) else cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']\\\\\\\\n            \\\\\\\\n            # Find current cell\\\\\\\\n            if current_idx == -1 and cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and source == current_cell:\\\\\\\\n                current_idx = idx\\\\\\\\n                \\\\\\\\n            # Find last prompt cell before current cell\\\\\\\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\\\\\\\n                if cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and source.strip().startswith(\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\'):\\\\\\\\n                    last_prompt_idx = idx\\\\\\\\n                \\\\\\\\n        if current_idx == -1:\\\\\\\\n            return []\\\\\\\\n            \\\\\\\\n        # Get cells between last prompt and current cell\\\\\\\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\\\\\\\n        history = []\\\\\\\\n        \\\\\\\\n        for idx in range(start_idx, current_idx):\\\\\\\\n            cell = cells[idx]            \\\\\\\\n            source = cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'])\\\\\\\\n            if \\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\' in cell:\\\\\\\\n                outputs = cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'], str) else str(cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'])\\\\\\\\n            else:\\\\\\\\n                outputs = \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\'\\\\\\\\n            if not (source.strip().startswith(\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\'#|exclude\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\'#| exclude\\\\\\\\\\\\\\')):\\\\\\\\n                history.append(f\"Cell[{idx}]:\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\n{source}\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\n{outputs}\")\\\\\\\\n        \\\\\\\\n        return history\\\\\\\\n        \\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error getting notebook history: {e}\")\\\\\\\\n        return []\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[24]:\\\\\\\\nSource:\\\\\\\\nTesting notebook history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[25]:\\\\\\\\nSource:\\\\\\\\nnb_hist = get_notebook_history(max_cells=20)\\\\\\\\nnb_hist\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\"[\\\\\\\\\\\\\\'Cell[3]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom dotenv import load_dotenv\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic import BaseModel, Field\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic_ai import Agent, ModelRetry, RunContext\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic_ai.models import KnownModelName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nload_dotenv()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Enable async/await in Jupyter\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport nest_asyncio\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnest_asyncio.apply()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\'Cell[4]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Agent setup\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\'Cell[5]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSystem prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[6]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom datetime import date\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nsystem_prompt = f\"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is {date.today().strftime(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%Y-%m-%d\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')}.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \"Cell[7]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import cast\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nmodel = cast(KnownModelName, os.getenv(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PYDANTIC_AI_MODEL\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'openai:gpt-4o\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nprint(f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PydanticAI is using model: {model}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnotebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PydanticAI is using model: openai:gpt-4o\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\",\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[8]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef refresh_agent():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    notebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\'Cell[9]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n### Adding cell creation tool\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[10]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom IPython.display import display, Markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Literal\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n@notebook_agent.tool\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef create_cell(ctx: RunContext[str], content: str, cell_type: Literal[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') -&gt; str:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Create a new cell in the notebook with the specified content.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        content: The content to put in the new cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cell_type: Type of cell to create (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' or \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        A confirmation message\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except NameError:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return \"Error: Not running in IPython/Jupyter environment\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Display the content immediately\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if cell_type == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\':\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # display(Markdown(f\"```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{content}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Set up the next cell with the content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython.set_next_input(content)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    else:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        display(Markdown(content))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return f\"Created new {cell_type} cell\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stderr\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;module&gt;:8: No type or annotation for returned value 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[11]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTool testing\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[12]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a new code cell with a simple \"Hello, World!\" function. You can run the cell to see the output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 7, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \"Cell[13]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef hello_world():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Call the function to display the output\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nhello_world()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\",\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[14]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\"], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 9, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[15]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\"Input must be an integer\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[16]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTesting agent with history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[17]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', message_history=result.new_messages())\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'To make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'factorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'This would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 11, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[18]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult.all_messages()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is 2024-12-31.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 34, 458473, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', args=ArgsJson(args_json=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nn    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nn    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be an integern    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be a non-negative integern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\",\"cell_type\":\"code\"}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-call\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 35, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Created new code cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, 114822, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-return\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 58, 747643, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTo make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfactorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nThis would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 59, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 12, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[19]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n### Adding notebook history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[20]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pathlib import Path\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Optional, Dict, Any\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Cache for notebook data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n_notebook_cache: Dict[str, Any] = {}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef find_current_notebook() -&gt; Optional[dict]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Find and cache the current notebook data.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        Dict containing notebook data or None if not found\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global _notebook_cache\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not ipython:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get current cell content to identify the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = ipython.get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Check if we already found the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' in _notebook_cache:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Verify it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s still the correct notebook by checking the current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            notebook = _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # If not in cache or cache is invalid, search for the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_dir = Path.cwd()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for nb_file in notebook_files:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                with open(nb_file) as f:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    notebook = json.load(f)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                        if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            # Found the notebook, cache it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = nb_file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            except Exception:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                continue\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error finding notebook: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[21]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef get_notebook_history(max_cells: int = 5) -&gt; list:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        max_cells: Maximum number of previous cells to include\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        List of previous cell contents\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get the cached notebook or find it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook = find_current_notebook()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not notebook:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell index\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = get_ipython().get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cells = notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        last_prompt_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell and last prompt cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx, cell in enumerate(cells):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            source = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], list) else cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if current_idx == -1 and cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source == current_cell:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                current_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find last prompt cell before current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    last_prompt_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if current_idx == -1:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get cells between last prompt and current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        history = []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx in range(start_idx, current_idx):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            cell = cells[idx]            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            source = cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            outputs = cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if not (source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'#|exclude\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                history.append(f\"Cell[{idx}]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{source}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{outputs}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error getting notebook history: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[22]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTesting notebook history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\']\"]}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 28, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[26]:\\\\\\\\nSource:\\\\\\\\n### Creating history-aware prompt\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[27]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\ndef create_history_aware_prompt(prompt: str, message_history: list = None, max_history: int = 5) -&gt; tuple:\\\\\\\\n    \"\"\"Create a prompt with notebook history context and message history.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        prompt: The user\\\\\\\\\\\\\\'s prompt\\\\\\\\n        message_history: Previous conversation messages from results.all_messages()\\\\\\\\n        max_history: Maximum number of previous cells to include\\\\\\\\n        \\\\\\\\n    Returns:\\\\\\\\n        Tuple of (enhanced prompt, combined message history)\\\\\\\\n    \"\"\"\\\\\\\\n    try:\\\\\\\\n        ipython = get_ipython()\\\\\\\\n        if not ipython:\\\\\\\\n            return prompt, message_history\\\\\\\\n        \\\\\\\\n        # Get new cells using our optimized get_notebook_history\\\\\\\\n        new_cells = get_notebook_history(max_cells=max_history)\\\\\\\\n        \\\\\\\\n        if not new_cells and not message_history:\\\\\\\\n            return prompt, None\\\\\\\\n            \\\\\\\\n        # Create message history if none exists\\\\\\\\n        from pydantic_ai.messages import (\\\\\\\\n            ModelRequest, ModelResponse, \\\\\\\\n            UserPromptPart, TextPart\\\\\\\\n        )\\\\\\\\n        \\\\\\\\n        messages = []\\\\\\\\n        \\\\\\\\n        # Add existing message history if provided\\\\\\\\n        if message_history:\\\\\\\\n            messages.extend(message_history)\\\\\\\\n        \\\\\\\\n        # Only add context message if we have new cells\\\\\\\\n        if new_cells:\\\\\\\\n            # Create context message with new cells\\\\\\\\n            history_content = \"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\".join(new_cells)\\\\\\\\n\\\\\\\\n            context_msg = ModelRequest(parts=[\\\\\\\\n                UserPromptPart(\\\\\\\\n                    content=\"Here is the context of new notebook cells that were added:\\\\\\\\\\\\\\\\n\" + history_content\\\\\\\\n                )\\\\\\\\n            ])\\\\\\\\n            \\\\\\\\n            # Create response acknowledging new context\\\\\\\\n            context_response = ModelResponse(parts=[\\\\\\\\n                TextPart(\\\\\\\\n                    content=\"I understand the new notebook context. How can I help?\"\\\\\\\\n                )\\\\\\\\n            ])\\\\\\\\n            \\\\\\\\n            messages.extend([context_msg, context_response])\\\\\\\\n                \\\\\\\\n        return prompt, messages\\\\\\\\n        \\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error creating history-aware prompt: {e}\")\\\\\\\\n        return prompt, message_history\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[28]:\\\\\\\\nSource:\\\\\\\\nTesting history-aware prompt\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[29]:\\\\\\\\nSource:\\\\\\\\ncreate_history_aware_prompt(\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', result.all_messages(), max_history=20)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\"(\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' [ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is 2024-12-31.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 34, 458473, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'  ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', args=ArgsJson(args_json=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be an integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be a non-negative integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\",\"cell_type\":\"code\"}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-call\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 35, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \"  ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\', content=\\\\\\\\\\\\\\'Created new code cell\\\\\\\\\\\\\\', tool_call_id=\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, 114822, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'tool-return\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'  ModelResponse(parts=[TextPart(content=\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \"  ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 58, 747643, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'  ModelResponse(parts=[TextPart(content=\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTo make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfactorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nThis would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 59, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'  ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Here is the context of new notebook cells that were added:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[7]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import cast\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nmodel = cast(KnownModelName, os.getenv(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PYDANTIC_AI_MODEL\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'openai:gpt-4o\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nprint(f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PydanticAI is using model: {model}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnotebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PydanticAI is using model: openai:gpt-4o\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[8]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef refresh_agent():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    notebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[9]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n### Adding cell creation tool\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[10]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom IPython.display import display, Markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Literal\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n@notebook_agent.tool\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef create_cell(ctx: RunContext[str], content: str, cell_type: Literal[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') -&gt; str:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Create a new cell in the notebook with the specified content.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        content: The content to put in the new cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cell_type: Type of cell to create (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' or \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        A confirmation message\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except NameError:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return \"Error: Not running in IPython/Jupyter environment\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Display the content immediately\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if cell_type == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\':\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # display(Markdown(f\"```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{content}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Set up the next cell with the content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython.set_next_input(content)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    else:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        display(Markdown(content))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return f\"Created new {cell_type} cell\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stderr\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;module&gt;:8: No type or annotation for returned value 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[11]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTool testing\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[12]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a new code cell with a simple \"Hello, World!\" function. You can run the cell to see the output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 7, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[13]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef hello_world():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Call the function to display the output\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nhello_world()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[14]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\"], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 9, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[15]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\"Input must be an integer\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[16]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTesting agent with history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[17]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', message_history=result.new_messages())\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'To make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'factorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'This would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 11, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[18]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult.all_messages()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is 2024-12-31.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 34, 458473, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', args=ArgsJson(args_json=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nn    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nn    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be an integern    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be a non-negative integern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\",\"cell_type\":\"code\"}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-call\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 35, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Created new code cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, 114822, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-return\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 58, 747643, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTo make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfactorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nThis would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 59, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 12, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[19]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n### Adding notebook history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[20]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pathlib import Path\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Optional, Dict, Any\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Cache for notebook data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n_notebook_cache: Dict[str, Any] = {}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef find_current_notebook() -&gt; Optional[dict]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Find and cache the current notebook data.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        Dict containing notebook data or None if not found\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global _notebook_cache\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not ipython:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get current cell content to identify the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = ipython.get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Check if we already found the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' in _notebook_cache:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Verify it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s still the correct notebook by checking the current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            notebook = _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # If not in cache or cache is invalid, search for the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_dir = Path.cwd()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for nb_file in notebook_files:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                with open(nb_file) as f:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    notebook = json.load(f)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                        if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            # Found the notebook, cache it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = nb_file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            except Exception:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                continue\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error finding notebook: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[21]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef get_notebook_history(max_cells: int = 5) -&gt; list:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        max_cells: Maximum number of previous cells to include\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        List of previous cell contents\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get the cached notebook or find it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook = find_current_notebook()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not notebook:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell index\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = get_ipython().get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cells = notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        last_prompt_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell and last prompt cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx, cell in enumerate(cells):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            source = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], list) else cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if current_idx == -1 and cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source == current_cell:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                current_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find last prompt cell before current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    last_prompt_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if current_idx == -1:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get cells between last prompt and current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        history = []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx in range(start_idx, current_idx):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            cell = cells[idx]            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            source = cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            outputs = cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if not (source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'#|exclude\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                history.append(f\"Cell[{idx}]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{source}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{outputs}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error getting notebook history: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[22]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTesting notebook history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[23]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnb_hist = get_notebook_history(max_cells=20)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnb_hist\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\"[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[0]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| default_exp core\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[1]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| hide\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom nbdev.showdoc import *\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[2]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom dotenv import load_dotenv\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic import BaseModel, Field\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic_ai import Agent, ModelRetry, RunContext\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic_ai.models import KnownModelName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nload_dotenv()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Enable async/await in Jupyter\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport nest_asyncio\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnest_asyncio.apply()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[3]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom datetime import date\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nsystem_prompt = f\"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is {date.today().strftime(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%Y-%m-%d\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')}.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \"Cell[4]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import cast\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nmodel = cast(KnownModelName, os.getenv(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PYDANTIC_AI_MODEL\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'openai:gpt-4o\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nprint(f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PydanticAI is using model: {model}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnotebook_agent = Agent(model, system_prompt=system_prompt)\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[5]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef refresh_agent():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    notebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[6]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom IPython.display import display, Markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Literal\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n@notebook_agent.tool\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef create_cell(ctx: RunContext[str], content: str, cell_type: Literal[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'codemarkdowncode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') -&gt; str:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Create a new cell in the notebook with the specified content.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        content: The content to put in the new cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cell_type: Type of cell to create (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' or \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        A confirmation message\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except NameError:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return \"Error: Not running in IPython/Jupyter environment\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Display the content immediately\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if cell_type == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\':\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # display(Markdown(f\"```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{content}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Set up the next cell with the content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython.set_next_input(content)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    else:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        display(Markdown(content))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return f\"Created new {cell_type} cell\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \"Cell[7]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \"Cell[8]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef hello_world():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Call the function to display the output\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nhello_world()\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[9]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[10]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef factorial(number):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation to check if the number is a non-negative integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(number, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\"Input must be an integer.\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if number &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer.\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 or 1 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if number == 0 or number == 1:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    else:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return number * factorial(number - 1)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Example usage\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nprint(factorial(5))  # Output: 120\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nprint(factorial(0))  # Output: 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Uncomment the following lines to test input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# print(factorial(-1))  # Should raise ValueError\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# print(factorial(3.5))  # Should raise ValueError\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \"Cell[11]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', message_history=result.new_messages())\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[12]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult.all_messages()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[13]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pathlib import Path\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Optional, Dict, Any\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Cache for notebook data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n_notebook_cache: Dict[str, Any] = {}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef find_current_notebook() -&gt; Optional[dict]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Find and cache the current notebook data.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        Dict containing notebook data or None if not found\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global _notebook_cache\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not ipython:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get current cell content to identify the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = ipython.get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'contentcode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Check if we already found the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' in _notebook_cache:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Verify it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s still the correct notebook by checking the current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            notebook = _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_typecode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # If not in cache or cache is invalid, search for the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_dir = Path.cwd()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for nb_file in notebook_files:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                with open(nb_file) as f:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    notebook = json.load(f)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                        if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_typecode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\njoin(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            # Found the notebook, cache it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = nb_file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            except Exception:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                continue\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error finding notebook: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[14]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef get_notebook_history(max_cells: int = 5) -&gt; list:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        max_cells: Maximum number of previous cells to include\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        List of previous cell contents\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get the cached notebook or find it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook = find_current_notebook()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not notebook:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell index\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = get_ipython().get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cells = notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        last_prompt_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell and last prompt cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx, cell in enumerate(cells):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            sourcejoin(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], list) else cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if current_idx == -1 and cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_typecode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source == current_cell:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                current_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find last prompt cell before current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_typecode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    last_prompt_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if current_idx == -1:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get cells between last prompt and current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        history = []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx in range(start_idx, current_idx):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            cell = cells[idx]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_typecode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\':  # Only include code cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                # Skip cells that are prompt cells and nbdev directives\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                source = cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], str) elsejoin(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if not source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    history.append(f\"Cell[{idx}]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{source}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error getting notebook history: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 58, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[24]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n### Creating history-aware prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[25]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef create_history_aware_prompt(prompt: str, message_history: list = None, max_history: int = 5) -&gt; tuple:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Create a prompt with notebook history context and message history.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        prompt: The user\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        message_history: Previous conversation messages from results.all_messages()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        max_history: Maximum number of previous cells to include\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        Tuple of (enhanced prompt, combined message history)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not ipython:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return prompt, message_history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get new cells using our optimized get_notebook_history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        new_cells = get_notebook_history(max_cells=max_history)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not new_cells and not message_history:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return prompt, None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Create message history if none exists\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        from pydantic_ai.messages import (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            ModelRequest, ModelResponse, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            UserPromptPart, TextPart\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        messages = []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Add existing message history if provided\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if message_history:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            messages.extend(message_history)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Only add context message if we have new cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if new_cells:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Create context message with new cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            history_content = \"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\".join(new_cells)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            context_msg = ModelRequest(parts=[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                UserPromptPart(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    content=\"Here is the context of new notebook cells that were added:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\" + history_content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            ])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Create response acknowledging new context\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            context_response = ModelResponse(parts=[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                TextPart(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    content=\"I understand the new notebook context. How can I help?\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            ])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            messages.extend([context_msg, context_response])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return prompt, messages\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error creating history-aware prompt: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return prompt, message_history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[26]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTesting history-aware prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 26, 5, 737496, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \"  ModelResponse(parts=[TextPart(content=\\\\\\\\\\\\\\'I understand the new notebook context. How can I help?\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 26, 5, 737510, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\')])\"]}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 30, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[30]:\\\\\\\\nSource:\\\\\\\\n### Running agent with notebook history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[31]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nfrom typing import Any\\\\\\\\ndef run_with_history(agent: Agent, prompt: str, message_history: list = None, max_history: int = 5) -&gt; Any:\\\\\\\\n    \"\"\"Run the agent with notebook and conversation history context.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        agent: The PydanticAI agent\\\\\\\\n        prompt: The user\\\\\\\\\\\\\\'s prompt\\\\\\\\n        message_history: Previous conversation messages\\\\\\\\n        max_history: Maximum number of previous cells to include\\\\\\\\n        \\\\\\\\n    Returns:\\\\\\\\n        Agent run result\\\\\\\\n    \"\"\"\\\\\\\\n    prompt, combined_history = create_history_aware_prompt(\\\\\\\\n        prompt, \\\\\\\\n        message_history=message_history, \\\\\\\\n        max_history=max_history\\\\\\\\n    )\\\\\\\\n    return agent.run_sync(prompt, message_history=combined_history)\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[32]:\\\\\\\\nSource:\\\\\\\\nTesting run_with_history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 37, 976699, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'user-prompt\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \" ModelResponse(parts=[TextPart(content=\\'I understand the new notebook context. How can I help?\\', part_kind=\\'text\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 37, 976722, tzinfo=datetime.timezone.utc), kind=\\'response\\'),\\\\n\", \" ModelRequest(parts=[UserPromptPart(content=\\'So what is going on in this notebook?\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 37, 976975, tzinfo=datetime.timezone.utc), part_kind=\\'user-prompt\\')], kind=\\'request\\'),\\\\n\", \\' ModelResponse(parts=[TextPart(content=\\\\\\'This notebook appears to be part of a system that uses an AI agent to automate tasks within a Jupyter notebook. Here are some key points:\\\\\\\\n\\\\\\\\n1. **AI Agent Integration**: The notebook is integrating a Pydantic AI model, specifically an agent that seems to respond to prompts and perform tasks within the notebook environment.\\\\\\\\n\\\\\\\\n2. **Function Definitions**: Several Python functions have been defined:\\\\\\\\n   - `factorial()`: This function calculates the factorial of a number with input validation.\\\\\\\\n   - `hello_world()`: A simple function that prints \"Hello, World!\".\\\\\\\\n   \\\\\\\\n3. **Cell Creation and Management**: There are functions and tools implemented to create and manage notebook cells programmatically. For example, the `create_cell` function uses the IPython\\\\\\\\\\\\\\'s API to insert new cells.\\\\\\\\n\\\\\\\\n4. **Notebook History Management**: The notebook implements functionality to keep track of the history of executed notebook cells, which can be used to provide context to the AI agent.\\\\\\\\n\\\\\\\\n5. **History-Aware Prompts**: Functions like `create_history_aware_prompt` are used to create prompts that include historical context from the notebook. This allows the AI to make more informed decisions by understanding previous interactions and code.\\\\\\\\n\\\\\\\\n6. **Testing and Execution**: The notebook includes cells dedicated to testing these features, like running the agent with notebook history and testing the factorial function.\\\\\\\\n\\\\\\\\nOverall, it seems to be an experimental setup aiming to enhance interaction with a Jupyter notebook using AI for improved productivity and dynamic task execution.\\\\\\', part_kind=\\\\\\'text\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 39, tzinfo=datetime.timezone.utc), kind=\\\\\\'response\\\\\\')]\\']}, \\'execution_count\\': 23, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]\\n\\nCell[37]:\\nSource:\\n#| export\\n@notebook_agent.tool\\ndef modify_cell(ctx: RunContext[str], cell_index: int, content: str) -&gt; str:\\n    \"\"\"Modify an existing cell in the notebook.\\n    \\n    Args:\\n        cell_index: The index of the cell to modify\\n        content: The new content for the cell\\n        \\n    Returns:\\n        A confirmation message\\n    \"\"\"\\n    try:\\n        notebook = find_current_notebook()\\n        if not notebook:\\n            return \"Error: Could not find current notebook\"\\n            \\n        cells = notebook[\\'cells\\']\\n        if cell_index &lt; 0 or cell_index &gt;= len(cells):\\n            return f\"Error: Cell index {cell_index} is out of range\"\\n            \\n        # Get the cell\\n        cell = cells[cell_index]\\n        \\n        # Update the cell content in IPython\\n        ipython = get_ipython()\\n        if not ipython:\\n            return \"Error: Not running in IPython environment\"\\n            \\n        # Set the content of the specified cell\\n        ipython.set_next_input(content, replace=True)\\n        \\n        return f\"Modified cell {cell_index} with new content\"\\n        \\n    except Exception as e:\\n        return f\"Error modifying cell: {str(e)}\"\\nOutputs:\\n[{\\'name\\': \\'stderr\\', \\'output_type\\': \\'stream\\', \\'text\\': [\\'&lt;module&gt;:8: No type or annotation for returned value 1\\\\n\\']}, {\\'ename\\': \\'UserError\\', \\'evalue\\': \"Tool name conflicts with existing tool: \\'modify_cell\\'\", \\'output_type\\': \\'error\\', \\'traceback\\': [\\'\\\\x1b[0;31m---------------------------------------------------------------------------\\\\x1b[0m\\', \\'\\\\x1b[0;31mUserError\\\\x1b[0m                                 Traceback (most recent call last)\\', \\'Cell \\\\x1b[0;32mIn[42], line 2\\\\x1b[0m\\\\n\\\\x1b[1;32m      1\\\\x1b[0m \\\\x1b[38;5;66;03m#| export\\\\x1b[39;00m\\\\n\\\\x1b[0;32m----&gt; 2\\\\x1b[0m \\\\x1b[38;5;129;43m@notebook_agent\\\\x1b[39;49m\\\\x1b[38;5;241;43m.\\\\x1b[39;49m\\\\x1b[43mtool\\\\x1b[49m\\\\n\\\\x1b[1;32m      3\\\\x1b[0m \\\\x1b[38;5;28;43;01mdef\\\\x1b[39;49;00m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;21;43mmodify_cell\\\\x1b[39;49m\\\\x1b[43m(\\\\x1b[49m\\\\x1b[43mctx\\\\x1b[49m\\\\x1b[43m:\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[43mRunContext\\\\x1b[49m\\\\x1b[43m[\\\\x1b[49m\\\\x1b[38;5;28;43mstr\\\\x1b[39;49m\\\\x1b[43m]\\\\x1b[49m\\\\x1b[43m,\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[43mcell_index\\\\x1b[49m\\\\x1b[43m:\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;28;43mint\\\\x1b[39;49m\\\\x1b[43m,\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[43mcontent\\\\x1b[49m\\\\x1b[43m:\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;28;43mstr\\\\x1b[39;49m\\\\x1b[43m)\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;241;43m-\\\\x1b[39;49m\\\\x1b[38;5;241;43m&gt;\\\\x1b[39;49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;28;43mstr\\\\x1b[39;49m\\\\x1b[43m:\\\\x1b[49m\\\\n\\\\x1b[1;32m      4\\\\x1b[0m \\\\x1b[38;5;250;43m    \\\\x1b[39;49m\\\\x1b[38;5;124;43;03m\"\"\"Modify an existing cell in the notebook.\\\\x1b[39;49;00m\\\\n\\\\x1b[1;32m      5\\\\x1b[0m \\\\x1b[38;5;124;43;03m    \\\\x1b[39;49;00m\\\\n\\\\x1b[1;32m      6\\\\x1b[0m \\\\x1b[38;5;124;43;03m    Args:\\\\x1b[39;49;00m\\\\n\\\\x1b[0;32m   (...)\\\\x1b[0m\\\\n\\\\x1b[1;32m     11\\\\x1b[0m \\\\x1b[38;5;124;43;03m        A confirmation message\\\\x1b[39;49;00m\\\\n\\\\x1b[1;32m     12\\\\x1b[0m \\\\x1b[38;5;124;43;03m    \"\"\"\\\\x1b[39;49;00m\\\\n\\\\x1b[1;32m     13\\\\x1b[0m \\\\x1b[43m    \\\\x1b[49m\\\\x1b[38;5;28;43;01mtry\\\\x1b[39;49;00m\\\\x1b[43m:\\\\x1b[49m\\\\n\\', \\'File \\\\x1b[0;32m~/WebDev/FH_SQLModel/.venv/lib/python3.12/site-packages/pydantic_ai/agent.py:683\\\\x1b[0m, in \\\\x1b[0;36mAgent.tool\\\\x1b[0;34m(self, func, retries, prepare)\\\\x1b[0m\\\\n\\\\x1b[1;32m    680\\\\x1b[0m     \\\\x1b[38;5;28;01mreturn\\\\x1b[39;00m tool_decorator\\\\n\\\\x1b[1;32m    681\\\\x1b[0m \\\\x1b[38;5;28;01melse\\\\x1b[39;00m:\\\\n\\\\x1b[1;32m    682\\\\x1b[0m     \\\\x1b[38;5;66;03m# noinspection PyTypeChecker\\\\x1b[39;00m\\\\n\\\\x1b[0;32m--&gt; 683\\\\x1b[0m     \\\\x1b[38;5;28;43mself\\\\x1b[39;49m\\\\x1b[38;5;241;43m.\\\\x1b[39;49m\\\\x1b[43m_register_function\\\\x1b[49m\\\\x1b[43m(\\\\x1b[49m\\\\x1b[43mfunc\\\\x1b[49m\\\\x1b[43m,\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;28;43;01mTrue\\\\x1b[39;49;00m\\\\x1b[43m,\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[43mretries\\\\x1b[49m\\\\x1b[43m,\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[43mprepare\\\\x1b[49m\\\\x1b[43m)\\\\x1b[49m\\\\n\\\\x1b[1;32m    684\\\\x1b[0m     \\\\x1b[38;5;28;01mreturn\\\\x1b[39;00m func\\\\n\\', \\'File \\\\x1b[0;32m~/WebDev/FH_SQLModel/.venv/lib/python3.12/site-packages/pydantic_ai/agent.py:765\\\\x1b[0m, in \\\\x1b[0;36mAgent._register_function\\\\x1b[0;34m(self, func, takes_ctx, retries, prepare)\\\\x1b[0m\\\\n\\\\x1b[1;32m    763\\\\x1b[0m retries_ \\\\x1b[38;5;241m=\\\\x1b[39m retries \\\\x1b[38;5;28;01mif\\\\x1b[39;00m retries \\\\x1b[38;5;129;01mis\\\\x1b[39;00m \\\\x1b[38;5;129;01mnot\\\\x1b[39;00m \\\\x1b[38;5;28;01mNone\\\\x1b[39;00m \\\\x1b[38;5;28;01melse\\\\x1b[39;00m \\\\x1b[38;5;28mself\\\\x1b[39m\\\\x1b[38;5;241m.\\\\x1b[39m_default_retries\\\\n\\\\x1b[1;32m    764\\\\x1b[0m tool \\\\x1b[38;5;241m=\\\\x1b[39m Tool(func, takes_ctx\\\\x1b[38;5;241m=\\\\x1b[39mtakes_ctx, max_retries\\\\x1b[38;5;241m=\\\\x1b[39mretries_, prepare\\\\x1b[38;5;241m=\\\\x1b[39mprepare)\\\\n\\\\x1b[0;32m--&gt; 765\\\\x1b[0m \\\\x1b[38;5;28;43mself\\\\x1b[39;49m\\\\x1b[38;5;241;43m.\\\\x1b[39;49m\\\\x1b[43m_register_tool\\\\x1b[49m\\\\x1b[43m(\\\\x1b[49m\\\\x1b[43mtool\\\\x1b[49m\\\\x1b[43m)\\\\x1b[49m\\\\n\\', \"File \\\\x1b[0;32m~/WebDev/FH_SQLModel/.venv/lib/python3.12/site-packages/pydantic_ai/agent.py:774\\\\x1b[0m, in \\\\x1b[0;36mAgent._register_tool\\\\x1b[0;34m(self, tool)\\\\x1b[0m\\\\n\\\\x1b[1;32m    771\\\\x1b[0m     tool \\\\x1b[38;5;241m=\\\\x1b[39m dataclasses\\\\x1b[38;5;241m.\\\\x1b[39mreplace(tool, max_retries\\\\x1b[38;5;241m=\\\\x1b[39m\\\\x1b[38;5;28mself\\\\x1b[39m\\\\x1b[38;5;241m.\\\\x1b[39m_default_retries)\\\\n\\\\x1b[1;32m    773\\\\x1b[0m \\\\x1b[38;5;28;01mif\\\\x1b[39;00m tool\\\\x1b[38;5;241m.\\\\x1b[39mname \\\\x1b[38;5;129;01min\\\\x1b[39;00m \\\\x1b[38;5;28mself\\\\x1b[39m\\\\x1b[38;5;241m.\\\\x1b[39m_function_tools:\\\\n\\\\x1b[0;32m--&gt; 774\\\\x1b[0m     \\\\x1b[38;5;28;01mraise\\\\x1b[39;00m exceptions\\\\x1b[38;5;241m.\\\\x1b[39mUserError(\\\\x1b[38;5;124mf\\\\x1b[39m\\\\x1b[38;5;124m\\'\\\\x1b[39m\\\\x1b[38;5;124mTool name conflicts with existing tool: \\\\x1b[39m\\\\x1b[38;5;132;01m{\\\\x1b[39;00mtool\\\\x1b[38;5;241m.\\\\x1b[39mname\\\\x1b[38;5;132;01m!r}\\\\x1b[39;00m\\\\x1b[38;5;124m\\'\\\\x1b[39m)\\\\n\\\\x1b[1;32m    776\\\\x1b[0m \\\\x1b[38;5;28;01mif\\\\x1b[39;00m \\\\x1b[38;5;28mself\\\\x1b[39m\\\\x1b[38;5;241m.\\\\x1b[39m_result_schema \\\\x1b[38;5;129;01mand\\\\x1b[39;00m tool\\\\x1b[38;5;241m.\\\\x1b[39mname \\\\x1b[38;5;129;01min\\\\x1b[39;00m \\\\x1b[38;5;28mself\\\\x1b[39m\\\\x1b[38;5;241m.\\\\x1b[39m_result_schema\\\\x1b[38;5;241m.\\\\x1b[39mtools:\\\\n\\\\x1b[1;32m    777\\\\x1b[0m     \\\\x1b[38;5;28;01mraise\\\\x1b[39;00m exceptions\\\\x1b[38;5;241m.\\\\x1b[39mUserError(\\\\x1b[38;5;124mf\\\\x1b[39m\\\\x1b[38;5;124m\\'\\\\x1b[39m\\\\x1b[38;5;124mTool name conflicts with result schema name: \\\\x1b[39m\\\\x1b[38;5;132;01m{\\\\x1b[39;00mtool\\\\x1b[38;5;241m.\\\\x1b[39mname\\\\x1b[38;5;132;01m!r}\\\\x1b[39;00m\\\\x1b[38;5;124m\\'\\\\x1b[39m)\\\\n\", \"\\\\x1b[0;31mUserError\\\\x1b[0m: Tool name conflicts with existing tool: \\'modify_cell\\'\"]}]\\n\\nCell[38]:\\nSource:\\n\\nOutputs:\\n[]\\n\\nCell[39]:\\nSource:\\n### Creating prompt cell magic\\nOutputs:\\nNone\\n\\nCell[40]:\\nSource:\\n#| export\\nfrom IPython.core.magic import register_cell_magic\\n\\n#| export\\n@register_cell_magic\\ndef prompt(line, cell):\\n    \"\"\"Cell magic to create prompt cells that interact with the AI agent.\"\"\"\\n    try:\\n        # Get the last result\\'s message history if it exists\\n        message_history = None\\n        if \\'last_prompt_result\\' in get_ipython().user_ns:\\n            last_result = get_ipython().user_ns[\\'last_prompt_result\\']\\n            if hasattr(last_result, \\'all_messages\\'):\\n                message_history = last_result.all_messages()\\n        \\n        # Use get_current_agent() instead of notebook_agent directly\\n        agent = get_current_agent()\\n        \\n        # Run the prompt through our agent with history context\\n        result = run_with_history(\\n            agent, \\n            cell.strip(), \\n            message_history=message_history\\n        )\\n        \\n        # Store the result for next time\\n        get_ipython().user_ns[\\'last_prompt_result\\'] = result\\n        \\n        return Markdown(result.data)\\n    except Exception as e:\\n        return f\"Error processing prompt: {str(e)}\"\\nOutputs:\\n[]', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 59, 436565, tzinfo=datetime.timezone.utc), part_kind='user-prompt')], kind='request'),\n ModelResponse(parts=[TextPart(content='I understand the new notebook context. How can I help?', part_kind='text')], timestamp=datetime.datetime(2024, 12, 31, 13, 10, 59, 436588, tzinfo=datetime.timezone.utc), kind='response'),\n ModelRequest(parts=[UserPromptPart(content='what this notebook is all about?', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 59, 436914, tzinfo=datetime.timezone.utc), part_kind='user-prompt')], kind='request'),\n ModelResponse(parts=[TextPart(content='This notebook appears to be part of a system that uses an AI agent to automate tasks within a Jupyter notebook. Here are some key points:\\n\\n1. **AI Agent Integration**: The notebook is integrating a Pydantic AI model, specifically an agent that seems to respond to prompts and perform tasks within the notebook environment.\\n\\n2. **Function Definitions**: Several Python functions have been defined:\\n   - `factorial()`: This function calculates the factorial of a number with input validation.\\n   - `hello_world()`: A simple function that prints \"Hello, World!\".\\n\\n3. **Cell Creation and Management**: There are functions and tools implemented to create and manage notebook cells programmatically. For example, the `create_cell` function uses the IPython\\'s API to insert new cells.\\n\\n4. **Notebook History Management**: The notebook implements functionality to keep track of the history of executed notebook cells, which can be used to provide context to the AI agent.\\n\\n5. **History-Aware Prompts**: Functions like `create_history_aware_prompt` are used to create prompts that include historical context from the notebook. This allows the AI to make more informed decisions by understanding previous interactions and code.\\n\\n6. **Testing and Execution**: The notebook includes cells dedicated to testing these features, like running the agent with notebook history and testing the factorial function.\\n\\nOverall, it seems to be an experimental setup aiming to enhance interaction with a Jupyter notebook using AI for improved productivity and dynamic task execution.', part_kind='text')], timestamp=datetime.datetime(2024, 12, 31, 13, 11, 33, tzinfo=datetime.timezone.utc), kind='response')]\n\n\n\ntell me what have I added last to this notebook?\n\n\"Error processing prompt: Error code: 429 - {'error': {'message': 'Request too large for gpt-4o in organization org-Pm8WC2pvJDhMF1KkAgUCByZl on tokens per min (TPM): Limit 30000, Requested 62420. The input or output tokens must be reduced in order to run successfully. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}\"\n\n\n\nall_messages()\n\n[ModelRequest(parts=[UserPromptPart(content='Here is the context of new notebook cells that were added:\\nCell[36]:\\nSource:\\nresult.all_messages()\\nOutputs:\\n[{\\'data\\': {\\'text/plain\\': [\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\nToday\\\\\\'s date is 2024-12-31.\\\\\\\\n\", part_kind=\\\\\\'system-prompt\\\\\\'), UserPromptPart(content=\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 28, 691513, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'user-prompt\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\'create_cell\\\\\\', args=ArgsJson(args_json=\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n with input validation.\\\\\\\\\\\\\\\\n    :param n: non-negative integer\\\\\\\\\\\\\\\\n    :return: factorial of n\\\\\\\\\\\\\\\\n    :raises ValueError: if n is not a non-negative integer\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\"Input must be an integer\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\"Input must be a non-negative integer\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n    if n == 0 or n == 1:\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\n    result = 1\\\\\\\\\\\\\\\\n    for i in range(2, n + 1):\\\\\\\\\\\\\\\\n        result *= i\\\\\\\\\\\\\\\\n    return result\",\"cell_type\":\"code\"}\\\\\\'), tool_call_id=\\\\\\'call_Iuc8vC4Y2axuMDvDh3TlF9mz\\\\\\', part_kind=\\\\\\'tool-call\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 29, tzinfo=datetime.timezone.utc), kind=\\\\\\'response\\\\\\'),\\\\n\\', \\' ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\'create_cell\\\\\\', content=\\\\\\'Created new code  with content: def factorial(n):\\\\\\\\n    \"\"\"\\\\\\\\n    Calculate the factorial of a non-negative integer n with input validation.\\\\\\\\n    :param n: non-negative integer\\\\\\\\n    :return: factorial of n\\\\\\\\n    :raises ValueError: if n is not a non-negative integer\\\\\\\\n    \"\"\"\\\\\\\\n    if not isinstance(n, int):\\\\\\\\n        raise ValueError(\"Input must be an integer\")\\\\\\\\n    if n &lt; 0:\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\n    if n == 0 or n == 1:\\\\\\\\n        return 1\\\\\\\\n    result = 1\\\\\\\\n    for i in range(2, n + 1):\\\\\\\\n        result *= i\\\\\\\\n    return result\\\\\\', tool_call_id=\\\\\\'call_Iuc8vC4Y2axuMDvDh3TlF9mz\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 32, 646314, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'tool-return\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \" ModelResponse(parts=[TextPart(content=\\'I have created a function to calculate the factorial of a number with input validation. You can test it by calling the `factorial` function with a non-negative integer as the argument.\\', part_kind=\\'text\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 33, tzinfo=datetime.timezone.utc), kind=\\'response\\'),\\\\n\", \" ModelRequest(parts=[UserPromptPart(content=\\'So what you just made for me here?\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 33, 948002, tzinfo=datetime.timezone.utc), part_kind=\\'user-prompt\\')], kind=\\'request\\'),\\\\n\", \\' ModelResponse(parts=[TextPart(content=\"I created a Python function named `factorial` that calculates the factorial of a non-negative integer. This function includes input validation to ensure that the input is a non-negative integer. If the input is not valid (i.e., not an integer or a negative integer), it raises a `ValueError`.\\\\\\\\n\\\\\\\\nHere\\\\\\'s a summary of what the function does:\\\\\\\\n- It checks if the input is an integer. If not, it raises a `ValueError`.\\\\\\\\n- It checks if the input is a non-negative integer. If it\\\\\\'s negative, it raises a `ValueError`.\\\\\\\\n- If the input is 0 or 1, it returns 1 (since 0! = 1! = 1).\\\\\\\\n- For other positive integers, it calculates the factorial by multiplying all integers from 2 up to the input number and returns the result.\", part_kind=\\\\\\'text\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 34, tzinfo=datetime.timezone.utc), kind=\\\\\\'response\\\\\\'),\\\\n\\', \\' ModelRequest(parts=[UserPromptPart(content=\\\\\\'Here is the context of new notebook cells that were added:\\\\\\\\nCell[13]:\\\\\\\\nSource:\\\\\\\\nTool testing\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[14]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\\\\\\\\\\\\\')\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a new code cell with a simple \"Hello, World!\" function. You can run the cell to see the output.\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 7, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[15]:\\\\\\\\nSource:\\\\\\\\ndef hello_world():\\\\\\\\n    print(\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\')\\\\\\\\n\\\\\\\\n# Call the function to display the output\\\\\\\\nhello_world()\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'text\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\']}]\\\\\\\\n\\\\\\\\nCell[16]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\'s environment.\"], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 9, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[17]:\\\\\\\\nSource:\\\\\\\\ndef factorial(n):\\\\\\\\n    \"\"\"\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\n\\\\\\\\n    Parameters:\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\n\\\\\\\\n    Returns:\\\\\\\\n    int: Factorial of the input number n\\\\\\\\n    \"\"\"\\\\\\\\n    # Input validation\\\\\\\\n    if not isinstance(n, int):\\\\\\\\n        raise TypeError(\"Input must be an integer\")\\\\\\\\n    if n &lt; 0:\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\n\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\n    if n == 0:\\\\\\\\n        return 1\\\\\\\\n\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\n    return n * factorial(n - 1)\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[18]:\\\\\\\\nSource:\\\\\\\\nTesting agent with history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[19]:\\\\\\\\nSource:\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', message_history=result.new_messages())\\\\\\\\nMarkdown(result.data)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\': [\"I\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'To make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'```python\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'factorial(5)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'```\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'This would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 11, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[20]:\\\\\\\\nSource:\\\\\\\\nresult.all_messages()\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is 2024-12-31.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 34, 458473, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', args=ArgsJson(args_json=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be an integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be a non-negative integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\",\"cell_type\":\"code\"}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-call\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 35, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\', content=\\\\\\\\\\\\\\'Created new code cell\\\\\\\\\\\\\\', tool_call_id=\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, 114822, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'tool-return\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 58, 747643, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTo make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfactorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nThis would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 59, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')]\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 12, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[21]:\\\\\\\\nSource:\\\\\\\\n### Adding notebook history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[22]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nimport os\\\\\\\\nimport json\\\\\\\\nfrom pathlib import Path\\\\\\\\nfrom typing import Optional, Dict, Any\\\\\\\\n\\\\\\\\n# Cache for notebook data\\\\\\\\n_notebook_cache: Dict[str, Any] = {}\\\\\\\\n\\\\\\\\ndef find_current_notebook() -&gt; Optional[dict]:\\\\\\\\n    \"\"\"Find and cache the current notebook data.\\\\\\\\n    \\\\\\\\n    Returns:\\\\\\\\n        Dict containing notebook data or None if not found\\\\\\\\n    \"\"\"\\\\\\\\n    global _notebook_cache\\\\\\\\n    \\\\\\\\n    try:\\\\\\\\n        ipython = get_ipython()\\\\\\\\n        if not ipython:\\\\\\\\n            return None\\\\\\\\n            \\\\\\\\n        # Get current cell content to identify the notebook\\\\\\\\n        current_cell = ipython.get_parent()[\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\']\\\\\\\\n        \\\\\\\\n        # Check if we already found the notebook\\\\\\\\n        if \\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\' in _notebook_cache:\\\\\\\\n            # Verify it\\\\\\\\\\\\\\'s still the correct notebook by checking the current cell\\\\\\\\n            notebook = _notebook_cache[\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\']\\\\\\\\n            for cell in notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']:\\\\\\\\n                if (cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and \\\\\\\\n                    \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\n                    return notebook\\\\\\\\n        \\\\\\\\n        # If not in cache or cache is invalid, search for the notebook\\\\\\\\n        current_dir = Path.cwd()\\\\\\\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\\\\\\\n        \\\\\\\\n        for nb_file in notebook_files:\\\\\\\\n            try:\\\\\\\\n                with open(nb_file) as f:\\\\\\\\n                    notebook = json.load(f)\\\\\\\\n                    for cell in notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']:\\\\\\\\n                        if (cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and \\\\\\\\n                            \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\n                            # Found the notebook, cache it\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\'] = notebook\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\'file\\\\\\\\\\\\\\'] = nb_file\\\\\\\\n                            return notebook\\\\\\\\n            except Exception:\\\\\\\\n                continue\\\\\\\\n                \\\\\\\\n        return None\\\\\\\\n        \\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error finding notebook: {e}\")\\\\\\\\n        return None\\\\\\\\n\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[23]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nmax_lookback = 10\\\\\\\\n\\\\\\\\ndef get_notebook_history(max_cells: int = max_lookback) -&gt; list:\\\\\\\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        max_cells: Maximum number of previous cells to include\\\\\\\\n        \\\\\\\\n    Returns:\\\\\\\\n        List of previous cell contents\\\\\\\\n    \"\"\"\\\\\\\\n    try:\\\\\\\\n        # Get the cached notebook or find it\\\\\\\\n        notebook = find_current_notebook()\\\\\\\\n        if not notebook:\\\\\\\\n            return []\\\\\\\\n            \\\\\\\\n        # Find current cell index\\\\\\\\n        current_cell = get_ipython().get_parent()[\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\']\\\\\\\\n        cells = notebook[\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\']\\\\\\\\n        current_idx = -1\\\\\\\\n        last_prompt_idx = -1\\\\\\\\n        \\\\\\\\n        # Find current cell and last prompt cell\\\\\\\\n        for idx, cell in enumerate(cells):\\\\\\\\n            source = \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']) if isinstance(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'], list) else cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\']\\\\\\\\n            \\\\\\\\n            # Find current cell\\\\\\\\n            if current_idx == -1 and cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and source == current_cell:\\\\\\\\n                current_idx = idx\\\\\\\\n                \\\\\\\\n            # Find last prompt cell before current cell\\\\\\\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\\\\\\\n                if cell[\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\'code\\\\\\\\\\\\\\' and source.strip().startswith(\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\'):\\\\\\\\n                    last_prompt_idx = idx\\\\\\\\n                \\\\\\\\n        if current_idx == -1:\\\\\\\\n            return []\\\\\\\\n            \\\\\\\\n        # Get cells between last prompt and current cell\\\\\\\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\\\\\\\n        history = []\\\\\\\\n        \\\\\\\\n        for idx in range(start_idx, current_idx):\\\\\\\\n            cell = cells[idx]            \\\\\\\\n            source = cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\'\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\'])\\\\\\\\n            if \\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\' in cell:\\\\\\\\n                outputs = cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'], str) else str(cell[\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\'])\\\\\\\\n            else:\\\\\\\\n                outputs = \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\'\\\\\\\\n            if not (source.strip().startswith(\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\'#|exclude\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\'#| exclude\\\\\\\\\\\\\\')):\\\\\\\\n                history.append(f\"Cell[{idx}]:\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\n{source}\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\n{outputs}\")\\\\\\\\n        \\\\\\\\n        return history\\\\\\\\n        \\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error getting notebook history: {e}\")\\\\\\\\n        return []\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[24]:\\\\\\\\nSource:\\\\\\\\nTesting notebook history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[25]:\\\\\\\\nSource:\\\\\\\\nnb_hist = get_notebook_history(max_cells=20)\\\\\\\\nnb_hist\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\"[\\\\\\\\\\\\\\'Cell[3]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom dotenv import load_dotenv\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic import BaseModel, Field\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic_ai import Agent, ModelRetry, RunContext\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic_ai.models import KnownModelName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nload_dotenv()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Enable async/await in Jupyter\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport nest_asyncio\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnest_asyncio.apply()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\'Cell[4]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Agent setup\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\'Cell[5]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSystem prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[6]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom datetime import date\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nsystem_prompt = f\"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is {date.today().strftime(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%Y-%m-%d\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')}.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \"Cell[7]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import cast\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nmodel = cast(KnownModelName, os.getenv(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PYDANTIC_AI_MODEL\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'openai:gpt-4o\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nprint(f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PydanticAI is using model: {model}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnotebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PydanticAI is using model: openai:gpt-4o\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\",\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[8]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef refresh_agent():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    notebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\'Cell[9]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n### Adding cell creation tool\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[10]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom IPython.display import display, Markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Literal\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n@notebook_agent.tool\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef create_cell(ctx: RunContext[str], content: str, cell_type: Literal[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') -&gt; str:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Create a new cell in the notebook with the specified content.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        content: The content to put in the new cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cell_type: Type of cell to create (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' or \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        A confirmation message\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except NameError:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return \"Error: Not running in IPython/Jupyter environment\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Display the content immediately\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if cell_type == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\':\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # display(Markdown(f\"```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{content}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Set up the next cell with the content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython.set_next_input(content)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    else:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        display(Markdown(content))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return f\"Created new {cell_type} cell\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stderr\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;module&gt;:8: No type or annotation for returned value 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[11]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTool testing\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[12]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a new code cell with a simple \"Hello, World!\" function. You can run the cell to see the output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 7, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \"Cell[13]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef hello_world():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Call the function to display the output\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nhello_world()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\",\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[14]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\"], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 9, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[15]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\"Input must be an integer\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[16]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTesting agent with history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[17]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', message_history=result.new_messages())\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'To make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'factorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'This would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 11, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[18]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult.all_messages()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is 2024-12-31.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 34, 458473, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', args=ArgsJson(args_json=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nn    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nn    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be an integern    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be a non-negative integern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\",\"cell_type\":\"code\"}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-call\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 35, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Created new code cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, 114822, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-return\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 58, 747643, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTo make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfactorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nThis would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 59, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 12, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[19]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n### Adding notebook history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[20]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pathlib import Path\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Optional, Dict, Any\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Cache for notebook data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n_notebook_cache: Dict[str, Any] = {}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef find_current_notebook() -&gt; Optional[dict]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Find and cache the current notebook data.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        Dict containing notebook data or None if not found\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global _notebook_cache\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not ipython:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get current cell content to identify the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = ipython.get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Check if we already found the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' in _notebook_cache:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Verify it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s still the correct notebook by checking the current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            notebook = _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # If not in cache or cache is invalid, search for the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_dir = Path.cwd()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for nb_file in notebook_files:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                with open(nb_file) as f:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    notebook = json.load(f)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                        if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            # Found the notebook, cache it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = nb_file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            except Exception:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                continue\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error finding notebook: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[21]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef get_notebook_history(max_cells: int = 5) -&gt; list:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        max_cells: Maximum number of previous cells to include\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        List of previous cell contents\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get the cached notebook or find it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook = find_current_notebook()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not notebook:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell index\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = get_ipython().get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cells = notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        last_prompt_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell and last prompt cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx, cell in enumerate(cells):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            source = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], list) else cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if current_idx == -1 and cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source == current_cell:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                current_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find last prompt cell before current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    last_prompt_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if current_idx == -1:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get cells between last prompt and current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        history = []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx in range(start_idx, current_idx):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            cell = cells[idx]            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            source = cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            outputs = cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if not (source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'#|exclude\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                history.append(f\"Cell[{idx}]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{source}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{outputs}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error getting notebook history: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\'Cell[22]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTesting notebook history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\']\"]}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 28, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[26]:\\\\\\\\nSource:\\\\\\\\n### Creating history-aware prompt\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[27]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\ndef create_history_aware_prompt(prompt: str, message_history: list = None, max_history: int = 5) -&gt; tuple:\\\\\\\\n    \"\"\"Create a prompt with notebook history context and message history.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        prompt: The user\\\\\\\\\\\\\\'s prompt\\\\\\\\n        message_history: Previous conversation messages from results.all_messages()\\\\\\\\n        max_history: Maximum number of previous cells to include\\\\\\\\n        \\\\\\\\n    Returns:\\\\\\\\n        Tuple of (enhanced prompt, combined message history)\\\\\\\\n    \"\"\"\\\\\\\\n    try:\\\\\\\\n        ipython = get_ipython()\\\\\\\\n        if not ipython:\\\\\\\\n            return prompt, message_history\\\\\\\\n        \\\\\\\\n        # Get new cells using our optimized get_notebook_history\\\\\\\\n        new_cells = get_notebook_history(max_cells=max_history)\\\\\\\\n        \\\\\\\\n        if not new_cells and not message_history:\\\\\\\\n            return prompt, None\\\\\\\\n            \\\\\\\\n        # Create message history if none exists\\\\\\\\n        from pydantic_ai.messages import (\\\\\\\\n            ModelRequest, ModelResponse, \\\\\\\\n            UserPromptPart, TextPart\\\\\\\\n        )\\\\\\\\n        \\\\\\\\n        messages = []\\\\\\\\n        \\\\\\\\n        # Add existing message history if provided\\\\\\\\n        if message_history:\\\\\\\\n            messages.extend(message_history)\\\\\\\\n        \\\\\\\\n        # Only add context message if we have new cells\\\\\\\\n        if new_cells:\\\\\\\\n            # Create context message with new cells\\\\\\\\n            history_content = \"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\".join(new_cells)\\\\\\\\n\\\\\\\\n            context_msg = ModelRequest(parts=[\\\\\\\\n                UserPromptPart(\\\\\\\\n                    content=\"Here is the context of new notebook cells that were added:\\\\\\\\\\\\\\\\n\" + history_content\\\\\\\\n                )\\\\\\\\n            ])\\\\\\\\n            \\\\\\\\n            # Create response acknowledging new context\\\\\\\\n            context_response = ModelResponse(parts=[\\\\\\\\n                TextPart(\\\\\\\\n                    content=\"I understand the new notebook context. How can I help?\"\\\\\\\\n                )\\\\\\\\n            ])\\\\\\\\n            \\\\\\\\n            messages.extend([context_msg, context_response])\\\\\\\\n                \\\\\\\\n        return prompt, messages\\\\\\\\n        \\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error creating history-aware prompt: {e}\")\\\\\\\\n        return prompt, message_history\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[28]:\\\\\\\\nSource:\\\\\\\\nTesting history-aware prompt\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[29]:\\\\\\\\nSource:\\\\\\\\ncreate_history_aware_prompt(\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', result.all_messages(), max_history=20)\\\\\\\\nOutputs:\\\\\\\\n[{\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\': [\"(\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\' [ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is 2024-12-31.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 34, 458473, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'  ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', args=ArgsJson(args_json=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be an integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be a non-negative integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\",\"cell_type\":\"code\"}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-call\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 35, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \"  ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\', content=\\\\\\\\\\\\\\'Created new code cell\\\\\\\\\\\\\\', tool_call_id=\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, 114822, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'tool-return\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'  ModelResponse(parts=[TextPart(content=\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \"  ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 58, 747643, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'  ModelResponse(parts=[TextPart(content=\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTo make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfactorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nThis would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 59, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'  ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Here is the context of new notebook cells that were added:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[7]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import cast\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nmodel = cast(KnownModelName, os.getenv(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PYDANTIC_AI_MODEL\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'openai:gpt-4o\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nprint(f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PydanticAI is using model: {model}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnotebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PydanticAI is using model: openai:gpt-4o\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[8]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef refresh_agent():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    notebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[9]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n### Adding cell creation tool\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[10]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom IPython.display import display, Markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Literal\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n@notebook_agent.tool\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef create_cell(ctx: RunContext[str], content: str, cell_type: Literal[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') -&gt; str:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Create a new cell in the notebook with the specified content.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        content: The content to put in the new cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cell_type: Type of cell to create (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' or \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        A confirmation message\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except NameError:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return \"Error: Not running in IPython/Jupyter environment\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Display the content immediately\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if cell_type == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\':\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # display(Markdown(f\"```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{content}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Set up the next cell with the content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython.set_next_input(content)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    else:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        display(Markdown(content))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return f\"Created new {cell_type} cell\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stderr\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;module&gt;:8: No type or annotation for returned value 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[11]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTool testing\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[12]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a new code cell with a simple \"Hello, World!\" function. You can run the cell to see the output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 7, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[13]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef hello_world():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Call the function to display the output\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nhello_world()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stdout\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'stream\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[14]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\"], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 9, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[15]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\"Input must be an integer\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[16]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTesting agent with history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[17]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', message_history=result.new_messages())\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'To make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'factorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'This would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'&lt;IPython.core.display.Markdown object&gt;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 11, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[18]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult.all_messages()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'[ModelRequest(parts=[SystemPromptPart(content=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is 2024-12-31.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Create a function that calculates the factorial of a number with input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 34, 458473, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[ToolCallPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', args=ArgsJson(args_json=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'{\"content\":\"def factorial(n):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nn    Calculate the factorial of a non-negative integer n.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Parameters:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    n (int): A non-negative integer whose factorial is to be computed\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    int: Factorial of the input number n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nn    # Input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(n, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise TypeError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be an integern    if n &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Input must be a non-negative integern\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if n == 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return n * factorial(n - 1)\",\"cell_type\":\"code\"}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'), tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-call\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 35, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" ModelRequest(parts=[ToolReturnPart(tool_name=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'create_cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Created new code cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', tool_call_id=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'call_7ZMonXSp6BR3nTOGupyaiXdd\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, 114822, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'tool-return\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I have created a function named `factorial` in a new code cell. This function calculates the factorial of a number and includes input validation to ensure that the input is a non-negative integer. You can run that cell to define the function in the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s environment.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 37, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" ModelRequest(parts=[UserPromptPart(content=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 8, 58, 747643, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' ModelResponse(parts=[TextPart(content=\"I\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'ve created a Python function called `factorial` for you. This function calculates the factorial of a given non-negative integer. Here\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s a brief overview of its features:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Input Validation**: It checks whether the input is a non-negative integer. If the input is not an integer, it raises a `TypeError`. If the input is a negative integer, it raises a `ValueError`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- **Factorial Calculation**: It calculates the factorial using a recursive approach. The base case is that the factorial of 0 is 1, and for other numbers, it uses the recursive definition: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\( n! = n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\times (n-1)! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\).\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTo make use of this function, you would call it with an integer argument, like so:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfactorial(5)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nThis would return `120`, which is the factorial of 5. You can test this function by running the code cell I created.\", part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 8, 59, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 12, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[19]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n### Adding notebook history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[20]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pathlib import Path\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Optional, Dict, Any\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Cache for notebook data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n_notebook_cache: Dict[str, Any] = {}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef find_current_notebook() -&gt; Optional[dict]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Find and cache the current notebook data.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        Dict containing notebook data or None if not found\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global _notebook_cache\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not ipython:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get current cell content to identify the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = ipython.get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Check if we already found the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' in _notebook_cache:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Verify it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s still the correct notebook by checking the current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            notebook = _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # If not in cache or cache is invalid, search for the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_dir = Path.cwd()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for nb_file in notebook_files:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                with open(nb_file) as f:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    notebook = json.load(f)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                        if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            # Found the notebook, cache it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = nb_file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            except Exception:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                continue\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error finding notebook: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[21]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef get_notebook_history(max_cells: int = 5) -&gt; list:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        max_cells: Maximum number of previous cells to include\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        List of previous cell contents\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get the cached notebook or find it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook = find_current_notebook()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not notebook:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell index\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = get_ipython().get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'][\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cells = notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        last_prompt_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell and last prompt cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx, cell in enumerate(cells):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            source = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], list) else cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if current_idx == -1 and cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source == current_cell:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                current_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find last prompt cell before current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    last_prompt_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if current_idx == -1:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get cells between last prompt and current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        history = []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx in range(start_idx, current_idx):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            cell = cells[idx]            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            source = cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            outputs = cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], str) else \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.join(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'outputs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if not (source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'#|exclude\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') or outputs.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                history.append(f\"Cell[{idx}]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{source}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{outputs}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error getting notebook history: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[22]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTesting notebook history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[23]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnb_hist = get_notebook_history(max_cells=20)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnb_hist\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'text/plain\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': [\"[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[0]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| default_exp core\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[1]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| hide\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom nbdev.showdoc import *\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \" \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[2]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom dotenv import load_dotenv\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic import BaseModel, Field\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic_ai import Agent, ModelRetry, RunContext\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pydantic_ai.models import KnownModelName\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nload_dotenv()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Enable async/await in Jupyter\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport nest_asyncio\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnest_asyncio.apply()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[3]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom datetime import date\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nsystem_prompt = f\"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou are a helpful assistant that operates in a Jupyter notebook.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYour regular text responses are rendered as cell output.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can create new cells, edit existing cells, and run code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nYou can also use tools to help you with your tasks.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nToday\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s date is {date.today().strftime(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%Y-%m-%d\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')}.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \"Cell[4]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import cast\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nmodel = cast(KnownModelName, os.getenv(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PYDANTIC_AI_MODEL\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'openai:gpt-4o\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nprint(f\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'PydanticAI is using model: {model}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nnotebook_agent = Agent(model, system_prompt=system_prompt)\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[5]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef refresh_agent():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    notebook_agent = Agent(model, system_prompt=system_prompt)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return notebook_agent\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[6]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom IPython.display import display, Markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Literal\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n@notebook_agent.tool\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef create_cell(ctx: RunContext[str], content: str, cell_type: Literal[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'codemarkdowncode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\') -&gt; str:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Create a new cell in the notebook with the specified content.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        content: The content to put in the new cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cell_type: Type of cell to create (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' or \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'markdown\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        A confirmation message\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except NameError:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return \"Error: Not running in IPython/Jupyter environment\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Display the content immediately\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if cell_type == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\':\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # display(Markdown(f\"```python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{content}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Set up the next cell with the content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython.set_next_input(content)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    else:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        display(Markdown(content))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return f\"Created new {cell_type} cell\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \"Cell[7]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'can you create me a simple hello world functio in a new celland make sure I can run it right away to see the output?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \"Cell[8]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef hello_world():\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Hello, World!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Call the function to display the output\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nhello_world()\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[9]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\"Create a function that calculates the factorial of a number with input validation\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[10]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef factorial(number):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Input validation to check if the number is a non-negative integer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if not isinstance(number, int):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\"Input must be an integer.\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if number &lt; 0:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        raise ValueError(\"Input must be a non-negative integer.\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Base case: factorial of 0 or 1 is 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    if number == 0 or number == 1:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    # Recursive case: n! = n * (n-1)!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    else:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return number * factorial(number - 1)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Example usage\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nprint(factorial(5))  # Output: 120\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nprint(factorial(0))  # Output: 1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Uncomment the following lines to test input validation\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# print(factorial(-1))  # Should raise ValueError\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# print(factorial(3.5))  # Should raise ValueError\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \"Cell[11]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult = notebook_agent.run_sync(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'So what you just made for me here?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', message_history=result.new_messages())\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMarkdown(result.data)\",\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \" \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[12]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nresult.all_messages()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[13]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport os\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nimport json\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom pathlib import Path\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfrom typing import Optional, Dict, Any\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n# Cache for notebook data\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n_notebook_cache: Dict[str, Any] = {}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef find_current_notebook() -&gt; Optional[dict]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Find and cache the current notebook data.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        Dict containing notebook data or None if not found\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    global _notebook_cache\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not ipython:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get current cell content to identify the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = ipython.get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'contentcode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Check if we already found the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' in _notebook_cache:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Verify it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s still the correct notebook by checking the current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            notebook = _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\njoin(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # If not in cache or cache is invalid, search for the notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_dir = Path.cwd()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook_files = list(current_dir.glob(\"*.ipynb\"))\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for nb_file in notebook_files:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                with open(nb_file) as f:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    notebook = json.load(f)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    for cell in notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                        if (cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\njoin(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) == current_cell):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            # Found the notebook, cache it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            _notebook_cache[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] = nb_file\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                            return notebook\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            except Exception:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                continue\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error finding notebook: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Cell[14]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef get_notebook_history(max_cells: int = 5) -&gt; list:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Get the content of notebook cells between current and last prompt cell.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        max_cells: Maximum number of previous cells to include\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        List of previous cell contents\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get the cached notebook or find it\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        notebook = find_current_notebook()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not notebook:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell index\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_cell = get_ipython().get_parent()[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'contentcode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        cells = notebook[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        current_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        last_prompt_idx = -1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Find current cell and last prompt cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx, cell in enumerate(cells):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            sourcejoin(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']) if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], list) else cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if current_idx == -1 and cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_typecode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source == current_cell:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                current_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Find last prompt cell before current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if idx &lt; current_idx or current_idx == -1:  # Only look at cells before current\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_typecode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' and source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    last_prompt_idx = idx\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if current_idx == -1:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get cells between last prompt and current cell\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        start_idx = last_prompt_idx + 1 if last_prompt_idx != -1 else max(0, current_idx - max_cells)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        history = []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        for idx in range(start_idx, current_idx):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            cell = cells[idx]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            if cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'cell_typecode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\':  # Only include code cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                # Skip cells that are prompt cells and nbdev directives\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                source = cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'] if isinstance(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'], str) elsejoin(cell[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'source\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                if not source.strip().startswith(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'%%prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    history.append(f\"Cell[{idx}]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n{source}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error getting notebook history: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\']}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': 58, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[24]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n### Creating history-aware prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[25]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#| export\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef create_history_aware_prompt(prompt: str, message_history: list = None, max_history: int = 5) -&gt; tuple:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"Create a prompt with notebook history context and message history.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        prompt: The user\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        message_history: Previous conversation messages from results.all_messages()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        max_history: Maximum number of previous cells to include\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        Tuple of (enhanced prompt, combined message history)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    try:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        ipython = get_ipython()\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not ipython:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return prompt, message_history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Get new cells using our optimized get_notebook_history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        new_cells = get_notebook_history(max_cells=max_history)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if not new_cells and not message_history:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            return prompt, None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Create message history if none exists\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        from pydantic_ai.messages import (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            ModelRequest, ModelResponse, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            UserPromptPart, TextPart\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        messages = []\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Add existing message history if provided\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if message_history:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            messages.extend(message_history)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        # Only add context message if we have new cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        if new_cells:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Create context message with new cells\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            history_content = \"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\".join(new_cells)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            context_msg = ModelRequest(parts=[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                UserPromptPart(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    content=\"Here is the context of new notebook cells that were added:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\" + history_content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            ])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            # Create response acknowledging new context\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            context_response = ModelResponse(parts=[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                TextPart(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                    content=\"I understand the new notebook context. How can I help?\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            ])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            messages.extend([context_msg, context_response])\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return prompt, messages\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    except Exception as e:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        print(f\"Error creating history-aware prompt: {e}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return prompt, message_history\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n[]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCell[26]:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSource:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nTesting history-aware prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nOutputs:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nNone\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 8, 26, 5, 737496, tzinfo=datetime.timezone.utc), part_kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user-prompt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\')], kind=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'request\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'),\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \"  ModelResponse(parts=[TextPart(content=\\\\\\\\\\\\\\'I understand the new notebook context. How can I help?\\\\\\\\\\\\\\', part_kind=\\\\\\\\\\\\\\'text\\\\\\\\\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 8, 26, 5, 737510, tzinfo=datetime.timezone.utc), kind=\\\\\\\\\\\\\\'response\\\\\\\\\\\\\\')])\"]}, \\\\\\\\\\\\\\'execution_count\\\\\\\\\\\\\\': 30, \\\\\\\\\\\\\\'metadata\\\\\\\\\\\\\\': {}, \\\\\\\\\\\\\\'output_type\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'execute_result\\\\\\\\\\\\\\'}]\\\\\\\\n\\\\\\\\nCell[30]:\\\\\\\\nSource:\\\\\\\\n### Running agent with notebook history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\\\n\\\\\\\\nCell[31]:\\\\\\\\nSource:\\\\\\\\n#| export\\\\\\\\nfrom typing import Any\\\\\\\\ndef run_with_history(agent: Agent, prompt: str, message_history: list = None, max_history: int = 5) -&gt; Any:\\\\\\\\n    \"\"\"Run the agent with notebook and conversation history context.\\\\\\\\n    \\\\\\\\n    Args:\\\\\\\\n        agent: The PydanticAI agent\\\\\\\\n        prompt: The user\\\\\\\\\\\\\\'s prompt\\\\\\\\n        message_history: Previous conversation messages\\\\\\\\n        max_history: Maximum number of previous cells to include\\\\\\\\n        \\\\\\\\n    Returns:\\\\\\\\n        Agent run result\\\\\\\\n    \"\"\"\\\\\\\\n    prompt, combined_history = create_history_aware_prompt(\\\\\\\\n        prompt, \\\\\\\\n        message_history=message_history, \\\\\\\\n        max_history=max_history\\\\\\\\n    )\\\\\\\\n    return agent.run_sync(prompt, message_history=combined_history)\\\\\\\\nOutputs:\\\\\\\\n[]\\\\\\\\n\\\\\\\\nCell[32]:\\\\\\\\nSource:\\\\\\\\nTesting run_with_history\\\\\\\\nOutputs:\\\\\\\\nNone\\\\\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 37, 976699, tzinfo=datetime.timezone.utc), part_kind=\\\\\\'user-prompt\\\\\\')], kind=\\\\\\'request\\\\\\'),\\\\n\\', \" ModelResponse(parts=[TextPart(content=\\'I understand the new notebook context. How can I help?\\', part_kind=\\'text\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 37, 976722, tzinfo=datetime.timezone.utc), kind=\\'response\\'),\\\\n\", \" ModelRequest(parts=[UserPromptPart(content=\\'So what is going on in this notebook?\\', timestamp=datetime.datetime(2024, 12, 31, 12, 53, 37, 976975, tzinfo=datetime.timezone.utc), part_kind=\\'user-prompt\\')], kind=\\'request\\'),\\\\n\", \\' ModelResponse(parts=[TextPart(content=\\\\\\'This notebook appears to be part of a system that uses an AI agent to automate tasks within a Jupyter notebook. Here are some key points:\\\\\\\\n\\\\\\\\n1. **AI Agent Integration**: The notebook is integrating a Pydantic AI model, specifically an agent that seems to respond to prompts and perform tasks within the notebook environment.\\\\\\\\n\\\\\\\\n2. **Function Definitions**: Several Python functions have been defined:\\\\\\\\n   - `factorial()`: This function calculates the factorial of a number with input validation.\\\\\\\\n   - `hello_world()`: A simple function that prints \"Hello, World!\".\\\\\\\\n   \\\\\\\\n3. **Cell Creation and Management**: There are functions and tools implemented to create and manage notebook cells programmatically. For example, the `create_cell` function uses the IPython\\\\\\\\\\\\\\'s API to insert new cells.\\\\\\\\n\\\\\\\\n4. **Notebook History Management**: The notebook implements functionality to keep track of the history of executed notebook cells, which can be used to provide context to the AI agent.\\\\\\\\n\\\\\\\\n5. **History-Aware Prompts**: Functions like `create_history_aware_prompt` are used to create prompts that include historical context from the notebook. This allows the AI to make more informed decisions by understanding previous interactions and code.\\\\\\\\n\\\\\\\\n6. **Testing and Execution**: The notebook includes cells dedicated to testing these features, like running the agent with notebook history and testing the factorial function.\\\\\\\\n\\\\\\\\nOverall, it seems to be an experimental setup aiming to enhance interaction with a Jupyter notebook using AI for improved productivity and dynamic task execution.\\\\\\', part_kind=\\\\\\'text\\\\\\')], timestamp=datetime.datetime(2024, 12, 31, 12, 53, 39, tzinfo=datetime.timezone.utc), kind=\\\\\\'response\\\\\\')]\\']}, \\'execution_count\\': 23, \\'metadata\\': {}, \\'output_type\\': \\'execute_result\\'}]\\n\\nCell[37]:\\nSource:\\n#| export\\n@notebook_agent.tool\\ndef modify_cell(ctx: RunContext[str], cell_index: int, content: str) -&gt; str:\\n    \"\"\"Modify an existing cell in the notebook.\\n    \\n    Args:\\n        cell_index: The index of the cell to modify\\n        content: The new content for the cell\\n        \\n    Returns:\\n        A confirmation message\\n    \"\"\"\\n    try:\\n        notebook = find_current_notebook()\\n        if not notebook:\\n            return \"Error: Could not find current notebook\"\\n            \\n        cells = notebook[\\'cells\\']\\n        if cell_index &lt; 0 or cell_index &gt;= len(cells):\\n            return f\"Error: Cell index {cell_index} is out of range\"\\n            \\n        # Get the cell\\n        cell = cells[cell_index]\\n        \\n        # Update the cell content in IPython\\n        ipython = get_ipython()\\n        if not ipython:\\n            return \"Error: Not running in IPython environment\"\\n            \\n        # Set the content of the specified cell\\n        ipython.set_next_input(content, replace=True)\\n        \\n        return f\"Modified cell {cell_index} with new content\"\\n        \\n    except Exception as e:\\n        return f\"Error modifying cell: {str(e)}\"\\nOutputs:\\n[{\\'name\\': \\'stderr\\', \\'output_type\\': \\'stream\\', \\'text\\': [\\'&lt;module&gt;:8: No type or annotation for returned value 1\\\\n\\']}, {\\'ename\\': \\'UserError\\', \\'evalue\\': \"Tool name conflicts with existing tool: \\'modify_cell\\'\", \\'output_type\\': \\'error\\', \\'traceback\\': [\\'\\\\x1b[0;31m---------------------------------------------------------------------------\\\\x1b[0m\\', \\'\\\\x1b[0;31mUserError\\\\x1b[0m                                 Traceback (most recent call last)\\', \\'Cell \\\\x1b[0;32mIn[42], line 2\\\\x1b[0m\\\\n\\\\x1b[1;32m      1\\\\x1b[0m \\\\x1b[38;5;66;03m#| export\\\\x1b[39;00m\\\\n\\\\x1b[0;32m----&gt; 2\\\\x1b[0m \\\\x1b[38;5;129;43m@notebook_agent\\\\x1b[39;49m\\\\x1b[38;5;241;43m.\\\\x1b[39;49m\\\\x1b[43mtool\\\\x1b[49m\\\\n\\\\x1b[1;32m      3\\\\x1b[0m \\\\x1b[38;5;28;43;01mdef\\\\x1b[39;49;00m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;21;43mmodify_cell\\\\x1b[39;49m\\\\x1b[43m(\\\\x1b[49m\\\\x1b[43mctx\\\\x1b[49m\\\\x1b[43m:\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[43mRunContext\\\\x1b[49m\\\\x1b[43m[\\\\x1b[49m\\\\x1b[38;5;28;43mstr\\\\x1b[39;49m\\\\x1b[43m]\\\\x1b[49m\\\\x1b[43m,\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[43mcell_index\\\\x1b[49m\\\\x1b[43m:\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;28;43mint\\\\x1b[39;49m\\\\x1b[43m,\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[43mcontent\\\\x1b[49m\\\\x1b[43m:\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;28;43mstr\\\\x1b[39;49m\\\\x1b[43m)\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;241;43m-\\\\x1b[39;49m\\\\x1b[38;5;241;43m&gt;\\\\x1b[39;49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;28;43mstr\\\\x1b[39;49m\\\\x1b[43m:\\\\x1b[49m\\\\n\\\\x1b[1;32m      4\\\\x1b[0m \\\\x1b[38;5;250;43m    \\\\x1b[39;49m\\\\x1b[38;5;124;43;03m\"\"\"Modify an existing cell in the notebook.\\\\x1b[39;49;00m\\\\n\\\\x1b[1;32m      5\\\\x1b[0m \\\\x1b[38;5;124;43;03m    \\\\x1b[39;49;00m\\\\n\\\\x1b[1;32m      6\\\\x1b[0m \\\\x1b[38;5;124;43;03m    Args:\\\\x1b[39;49;00m\\\\n\\\\x1b[0;32m   (...)\\\\x1b[0m\\\\n\\\\x1b[1;32m     11\\\\x1b[0m \\\\x1b[38;5;124;43;03m        A confirmation message\\\\x1b[39;49;00m\\\\n\\\\x1b[1;32m     12\\\\x1b[0m \\\\x1b[38;5;124;43;03m    \"\"\"\\\\x1b[39;49;00m\\\\n\\\\x1b[1;32m     13\\\\x1b[0m \\\\x1b[43m    \\\\x1b[49m\\\\x1b[38;5;28;43;01mtry\\\\x1b[39;49;00m\\\\x1b[43m:\\\\x1b[49m\\\\n\\', \\'File \\\\x1b[0;32m~/WebDev/FH_SQLModel/.venv/lib/python3.12/site-packages/pydantic_ai/agent.py:683\\\\x1b[0m, in \\\\x1b[0;36mAgent.tool\\\\x1b[0;34m(self, func, retries, prepare)\\\\x1b[0m\\\\n\\\\x1b[1;32m    680\\\\x1b[0m     \\\\x1b[38;5;28;01mreturn\\\\x1b[39;00m tool_decorator\\\\n\\\\x1b[1;32m    681\\\\x1b[0m \\\\x1b[38;5;28;01melse\\\\x1b[39;00m:\\\\n\\\\x1b[1;32m    682\\\\x1b[0m     \\\\x1b[38;5;66;03m# noinspection PyTypeChecker\\\\x1b[39;00m\\\\n\\\\x1b[0;32m--&gt; 683\\\\x1b[0m     \\\\x1b[38;5;28;43mself\\\\x1b[39;49m\\\\x1b[38;5;241;43m.\\\\x1b[39;49m\\\\x1b[43m_register_function\\\\x1b[49m\\\\x1b[43m(\\\\x1b[49m\\\\x1b[43mfunc\\\\x1b[49m\\\\x1b[43m,\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[38;5;28;43;01mTrue\\\\x1b[39;49;00m\\\\x1b[43m,\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[43mretries\\\\x1b[49m\\\\x1b[43m,\\\\x1b[49m\\\\x1b[43m \\\\x1b[49m\\\\x1b[43mprepare\\\\x1b[49m\\\\x1b[43m)\\\\x1b[49m\\\\n\\\\x1b[1;32m    684\\\\x1b[0m     \\\\x1b[38;5;28;01mreturn\\\\x1b[39;00m func\\\\n\\', \\'File \\\\x1b[0;32m~/WebDev/FH_SQLModel/.venv/lib/python3.12/site-packages/pydantic_ai/agent.py:765\\\\x1b[0m, in \\\\x1b[0;36mAgent._register_function\\\\x1b[0;34m(self, func, takes_ctx, retries, prepare)\\\\x1b[0m\\\\n\\\\x1b[1;32m    763\\\\x1b[0m retries_ \\\\x1b[38;5;241m=\\\\x1b[39m retries \\\\x1b[38;5;28;01mif\\\\x1b[39;00m retries \\\\x1b[38;5;129;01mis\\\\x1b[39;00m \\\\x1b[38;5;129;01mnot\\\\x1b[39;00m \\\\x1b[38;5;28;01mNone\\\\x1b[39;00m \\\\x1b[38;5;28;01melse\\\\x1b[39;00m \\\\x1b[38;5;28mself\\\\x1b[39m\\\\x1b[38;5;241m.\\\\x1b[39m_default_retries\\\\n\\\\x1b[1;32m    764\\\\x1b[0m tool \\\\x1b[38;5;241m=\\\\x1b[39m Tool(func, takes_ctx\\\\x1b[38;5;241m=\\\\x1b[39mtakes_ctx, max_retries\\\\x1b[38;5;241m=\\\\x1b[39mretries_, prepare\\\\x1b[38;5;241m=\\\\x1b[39mprepare)\\\\n\\\\x1b[0;32m--&gt; 765\\\\x1b[0m \\\\x1b[38;5;28;43mself\\\\x1b[39;49m\\\\x1b[38;5;241;43m.\\\\x1b[39;49m\\\\x1b[43m_register_tool\\\\x1b[49m\\\\x1b[43m(\\\\x1b[49m\\\\x1b[43mtool\\\\x1b[49m\\\\x1b[43m)\\\\x1b[49m\\\\n\\', \"File \\\\x1b[0;32m~/WebDev/FH_SQLModel/.venv/lib/python3.12/site-packages/pydantic_ai/agent.py:774\\\\x1b[0m, in \\\\x1b[0;36mAgent._register_tool\\\\x1b[0;34m(self, tool)\\\\x1b[0m\\\\n\\\\x1b[1;32m    771\\\\x1b[0m     tool \\\\x1b[38;5;241m=\\\\x1b[39m dataclasses\\\\x1b[38;5;241m.\\\\x1b[39mreplace(tool, max_retries\\\\x1b[38;5;241m=\\\\x1b[39m\\\\x1b[38;5;28mself\\\\x1b[39m\\\\x1b[38;5;241m.\\\\x1b[39m_default_retries)\\\\n\\\\x1b[1;32m    773\\\\x1b[0m \\\\x1b[38;5;28;01mif\\\\x1b[39;00m tool\\\\x1b[38;5;241m.\\\\x1b[39mname \\\\x1b[38;5;129;01min\\\\x1b[39;00m \\\\x1b[38;5;28mself\\\\x1b[39m\\\\x1b[38;5;241m.\\\\x1b[39m_function_tools:\\\\n\\\\x1b[0;32m--&gt; 774\\\\x1b[0m     \\\\x1b[38;5;28;01mraise\\\\x1b[39;00m exceptions\\\\x1b[38;5;241m.\\\\x1b[39mUserError(\\\\x1b[38;5;124mf\\\\x1b[39m\\\\x1b[38;5;124m\\'\\\\x1b[39m\\\\x1b[38;5;124mTool name conflicts with existing tool: \\\\x1b[39m\\\\x1b[38;5;132;01m{\\\\x1b[39;00mtool\\\\x1b[38;5;241m.\\\\x1b[39mname\\\\x1b[38;5;132;01m!r}\\\\x1b[39;00m\\\\x1b[38;5;124m\\'\\\\x1b[39m)\\\\n\\\\x1b[1;32m    776\\\\x1b[0m \\\\x1b[38;5;28;01mif\\\\x1b[39;00m \\\\x1b[38;5;28mself\\\\x1b[39m\\\\x1b[38;5;241m.\\\\x1b[39m_result_schema \\\\x1b[38;5;129;01mand\\\\x1b[39;00m tool\\\\x1b[38;5;241m.\\\\x1b[39mname \\\\x1b[38;5;129;01min\\\\x1b[39;00m \\\\x1b[38;5;28mself\\\\x1b[39m\\\\x1b[38;5;241m.\\\\x1b[39m_result_schema\\\\x1b[38;5;241m.\\\\x1b[39mtools:\\\\n\\\\x1b[1;32m    777\\\\x1b[0m     \\\\x1b[38;5;28;01mraise\\\\x1b[39;00m exceptions\\\\x1b[38;5;241m.\\\\x1b[39mUserError(\\\\x1b[38;5;124mf\\\\x1b[39m\\\\x1b[38;5;124m\\'\\\\x1b[39m\\\\x1b[38;5;124mTool name conflicts with result schema name: \\\\x1b[39m\\\\x1b[38;5;132;01m{\\\\x1b[39;00mtool\\\\x1b[38;5;241m.\\\\x1b[39mname\\\\x1b[38;5;132;01m!r}\\\\x1b[39;00m\\\\x1b[38;5;124m\\'\\\\x1b[39m)\\\\n\", \"\\\\x1b[0;31mUserError\\\\x1b[0m: Tool name conflicts with existing tool: \\'modify_cell\\'\"]}]\\n\\nCell[38]:\\nSource:\\n\\nOutputs:\\n[]\\n\\nCell[39]:\\nSource:\\n### Creating prompt cell magic\\nOutputs:\\nNone\\n\\nCell[40]:\\nSource:\\n#| export\\nfrom IPython.core.magic import register_cell_magic\\n\\n#| export\\n@register_cell_magic\\ndef prompt(line, cell):\\n    \"\"\"Cell magic to create prompt cells that interact with the AI agent.\"\"\"\\n    try:\\n        # Get the last result\\'s message history if it exists\\n        message_history = None\\n        if \\'last_prompt_result\\' in get_ipython().user_ns:\\n            last_result = get_ipython().user_ns[\\'last_prompt_result\\']\\n            if hasattr(last_result, \\'all_messages\\'):\\n                message_history = last_result.all_messages()\\n        \\n        # Use get_current_agent() instead of notebook_agent directly\\n        agent = get_current_agent()\\n        \\n        # Run the prompt through our agent with history context\\n        result = run_with_history(\\n            agent, \\n            cell.strip(), \\n            message_history=message_history\\n        )\\n        \\n        # Store the result for next time\\n        get_ipython().user_ns[\\'last_prompt_result\\'] = result\\n        \\n        return Markdown(result.data)\\n    except Exception as e:\\n        return f\"Error processing prompt: {str(e)}\"\\nOutputs:\\n[]', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 59, 436565, tzinfo=datetime.timezone.utc), part_kind='user-prompt')], kind='request'),\n ModelResponse(parts=[TextPart(content='I understand the new notebook context. How can I help?', part_kind='text')], timestamp=datetime.datetime(2024, 12, 31, 13, 10, 59, 436588, tzinfo=datetime.timezone.utc), kind='response'),\n ModelRequest(parts=[UserPromptPart(content='what this notebook is all about?', timestamp=datetime.datetime(2024, 12, 31, 13, 10, 59, 436914, tzinfo=datetime.timezone.utc), part_kind='user-prompt')], kind='request'),\n ModelResponse(parts=[TextPart(content='This notebook appears to be part of a system that uses an AI agent to automate tasks within a Jupyter notebook. Here are some key points:\\n\\n1. **AI Agent Integration**: The notebook is integrating a Pydantic AI model, specifically an agent that seems to respond to prompts and perform tasks within the notebook environment.\\n\\n2. **Function Definitions**: Several Python functions have been defined:\\n   - `factorial()`: This function calculates the factorial of a number with input validation.\\n   - `hello_world()`: A simple function that prints \"Hello, World!\".\\n\\n3. **Cell Creation and Management**: There are functions and tools implemented to create and manage notebook cells programmatically. For example, the `create_cell` function uses the IPython\\'s API to insert new cells.\\n\\n4. **Notebook History Management**: The notebook implements functionality to keep track of the history of executed notebook cells, which can be used to provide context to the AI agent.\\n\\n5. **History-Aware Prompts**: Functions like `create_history_aware_prompt` are used to create prompts that include historical context from the notebook. This allows the AI to make more informed decisions by understanding previous interactions and code.\\n\\n6. **Testing and Execution**: The notebook includes cells dedicated to testing these features, like running the agent with notebook history and testing the factorial function.\\n\\nOverall, it seems to be an experimental setup aiming to enhance interaction with a Jupyter notebook using AI for improved productivity and dynamic task execution.', part_kind='text')], timestamp=datetime.datetime(2024, 12, 31, 13, 11, 33, tzinfo=datetime.timezone.utc), kind='response')]",
    "crumbs": [
      "Dependencies"
    ]
  }
]